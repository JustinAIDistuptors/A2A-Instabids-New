name: CI

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      # Add Gemini API Key from secrets
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}
      GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      # This URL is used by Supabase CLI to connect to the service container
      SUPABASE_DB_URL: "postgresql://postgres:postgres@localhost:5432/postgres"
      # Set Python path for imports
      PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/src

    services:
      # Use Supabase image which includes pgvector
      postgres:
        image: supabase/postgres:15.1.0.116
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: postgres
        options: |
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -e ".[dev]" # Installs project and dev deps

      # Install Supabase CLI
      - name: Install Supabase CLI
        run: npm install -g supabase@latest

      # Wait for PostgreSQL service to be ready
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      # Apply migrations using Supabase CLI
      # This resets the DB and applies migrations from supabase/migrations
      - name: Apply Supabase Migrations
        run: supabase db reset --local # Uses SUPABASE_DB_URL from env

      - name: Run tests with Pytest
        run: pytest

  e2e:
    runs-on: ubuntu-latest
    services:
      # Use Supabase image which includes pgvector
      postgres:
        image: supabase/postgres:15.1.0.116
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: root
          POSTGRES_DB: postgres
        options: |
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      - name: Install Node dependencies
        run: pnpm install

      # Install Supabase CLI
      - name: Install Supabase CLI
        run: npm install -g supabase@latest

      # Install psql client
      - name: Install psql client
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client

      # Wait for PostgreSQL service to be ready
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U root; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

       # Apply migrations using Supabase CLI for E2E test DB
      - name: Apply Supabase Migrations for E2E
        run: supabase db reset --local

      - name: Create fixtures directory
        run: mkdir -p cypress/fixtures
      - name: Create sample image for testing
        run: |
          echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8z8BQDwAEhQGAhKmMIQAAAABJRU5ErkJggg==" | base64 -d > cypress/fixtures/roof.jpg

      - name: Run Cypress tests
        run: pnpm exec cypress run
        env:
          # Add required env vars for Cypress tests
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

  deploy:
    needs: [test, e2e]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -e ".[dev]"
          
      - name: Build package
        run: python -m build
          
      - name: Deploy to production
        run: |
          echo "Deploying version $(python setup.py --version) to production"
          # Add your deployment commands here
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}