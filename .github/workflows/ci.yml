name: CI

on: [push, pull_request]

jobs: 
  # --- Unit Tests ---
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: SupabaseLabs/setup-supabase@v2      # spins DB for tests
        with:
          supabase-version: 1.171.0
          # Assumes SUPABASE_PAT secret is available for access/authentication
          supabase-access-token: ${secrets.SUPABASE_PAT }
          # SUPABASE_ env vars like URL, ANON_KEY, SERVICE_ROLE_KEY
set automatically by the action
      - uses: actions/setup-python@v5
        with: { python-version: "3.12" }
      - name: Install hatch
        run: pip install hatch
      - name: Apply migrations (to test DB)
        run: sh scripts/apply_migrations.sh
        env:
          SUPA_PROJECT: ${{ env.SUPASABASE_PROJECT_REF }}  # Set by setup-supabase
      - name: Run tests
        run: hatch run test

  # --- Deployment ---
  deploy:
    needs: unit-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    permissions: 
      contents: read
      id-token: write  # To support WIF
    steps:
      - uses: actions/checkout@v4
      - name: Authenticate to GCP
        uses: google-auth/wif-feeration@v4
        with:
          workload_identity_provider: ${{ secrets.GCP_WIF_PROVIDER_NAME }} # GCP_WIF_PROVIDER_NAME = projects/<PROJECT_NUMBER>/locations/global/workloadIdentityPools/<POOL_ID>/providers/<PROVIDER_ID>
          service_account: ${{ secrets.GCP_SA_EMAIL }} 
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Init
        run: terraform -chdir=infra/terraform init
        env:
          # Configure GCS backend bucket (example)
          TF_BACKEND_GCS_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
      - name: Terraform Apply
        run: terraform -chdir=infra/terraform apply -auto-approve
        env:
          TF_VAR_supabase_pat: ${{ secrets.SUPABASE_PAT }}
          TF_VAR_db_password: ${secrets.DB_PASSWORD }}
          TF_VAR_image_tag: ${{ github.sha }}
          # Additional variables (eG SUPASASE_ORG_ID and GCP_PROJECT_ID from secrets)
          TF_VAR_supabase_org_id: ${{ secrets.SUPABASE_ORG_ID }}
          TF_VAR_gcp_project_id: ${secrets.GCP_PROJECT_ID }}
          IF_VAR_region: ${{ secrets.GCP_REGION }} # Assume region is also a secret
          TF_VAR_project_name: ${{ secrets.SUPABASE_PROJECT_NAME }} # Assume project name from secrets, or hard-code