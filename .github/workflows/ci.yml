name: CI

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    # Use GitHub secrets for all credentials
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}
      GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/src
      MOCK_SERVICES: "true"  # Force mock services in CI
      CI: "true"
    
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      # Install dependencies explicitly
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -e ".[dev]"
          pip install pytest pytest-asyncio pytest-mock python-dotenv
      
      # Fix common syntax issues
      - name: Fix common syntax issues
        run: python scripts/fix_syntax.py
      
      # Prepare test environment with mock data
      - name: Prepare mock environment
        run: |
          mkdir -p tests/fixtures
          echo "Creating test environment file"
          cat > .env.test << EOL
          SUPABASE_URL=${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}
          SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE=${{ secrets.SUPABASE_SERVICE_ROLE }}
          GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
          MOCK_SERVICES=true
          EOL
          
          echo "Creating mock test data"
          mkdir -p tests/fixtures/images
          echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8z8BQDwAEhQGAhKmMIQAAAABJRU5ErkJggg==" | base64 -d > tests/fixtures/images/test_image.jpg
      
      # Run linting
      - name: Run linting
        run: python -m ruff check src tests
      
      # Run unit tests with mock services
      - name: Run unit tests
        run: |
          python -m pytest -xvs tests/unit --no-header --tb=short
        env:
          MOCK_SERVICES: "true"
          PYTEST_PLUGINS: "pytest_mock"
      
      # Run integration tests with mock services
      - name: Run integration tests
        run: |
          python -m pytest -xvs tests/integration -m "not live_service" --no-header --tb=short
        env:
          MOCK_SERVICES: "true"
          PYTEST_PLUGINS: "pytest_mock"

  e2e:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14-alpine
        ports: ["5432:5432"]
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE: ${{ secrets.SUPABASE_SERVICE_ROLE }}
      GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      PYTHONPATH: ${{ github.workspace }}:${{ github.workspace }}/src
      MOCK_SERVICES: "true"
      
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install
      - name: Wait for PostgreSQL to be ready
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          for i in {1..15}; do
            pg_isready -U postgres -d postgres -h localhost -p 5432 && echo "PostgreSQL is ready" && break
            echo "Waiting for PostgreSQL... Attempt $i/15"
            sleep 5
            if [ $i -eq 15 ]; then
              echo "PostgreSQL failed to start after multiple attempts" && exit 1
            fi
          done
      - name: Create fixtures directory
        run: mkdir -p cypress/fixtures
      - name: Create sample image for testing
        run: |
          echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8z8BQDwAEhQGAhKmMIQAAAABJRU5ErkJggg==" | base64 -d > cypress/fixtures/roof.jpg
      - name: Run E2E tests
        run: pnpm exec cypress run
        env:
          SUPABASE_URL: http://localhost:5432
          SUPABASE_ANON_KEY: dummy
          MOCK_SERVICES: "true"

  # Add a deploy job that runs on successful completion of the test jobs
  deploy:
    # Only run this job if the previous jobs succeed and we're on the main branch
    needs: [test, e2e]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      # Build the package
      - name: Build package
        run: |
          pip install build
          python -m build
      
      # Deploy to GitHub Packages
      - name: Deploy to GitHub Packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pip install twine
          python -m twine upload --repository-url https://maven.pkg.github.com/JustinAIDistuptors/A2A-Instabids-New dist/*
