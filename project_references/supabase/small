TITLE: Database Schema with Row Level Security for Todo List in SQL
DESCRIPTION: SQL schema for creating a todos table with row-level security policies. Defines the table structure with user references and implements policies for CRUD operations that restrict users to accessing only their own todos.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/todo-list/nextjs-todo-list/README.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table todos (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  task text check (char_length(task) > 3),
  is_complete boolean default false,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table todos enable row level security;

create policy "Individuals can create todos." on todos for
    insert with check ((select auth.uid()) = user_id);

create policy "Individuals can view their own todos. " on todos for
    select using ((select auth.uid()) = user_id);

create policy "Individuals can update their own todos." on todos for
    update using ((select auth.uid()) = user_id);

create policy "Individuals can delete their own todos." on todos for
    delete using ((select auth.uid()) = user_id);
```

----------------------------------------

TITLE: Handling Authentication Client Component in TypeScript
DESCRIPTION: This TypeScript code snippet demonstrates a client-side component for user authentication in a Next.js application using Supabase. It includes methods for user sign-up, sign-in, and sign-out, utilizing a typed Supabase client and React hooks for state management. Dependencies include @supabase/auth-helpers-nextjs, next/navigation, and TypeScript types for the database are specified for type safety.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_7

LANGUAGE: TypeScript
CODE:
```
'use client'

import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { useRouter } from 'next/navigation'
import { useState } from 'react'

import type { Database } from '@/lib/database.types'

export default function Login() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const router = useRouter()
  const supabase = createClientComponentClient<Database>()

  const handleSignUp = async () => {
    await supabase.auth.signUp({
      email,
      password,
      options: {
        emailRedirectTo: `${location.origin}/auth/callback`,
      },
    })
    router.refresh()
  }

  const handleSignIn = async () => {
    await supabase.auth.signInWithPassword({
      email,
      password,
    })
    router.refresh()
  }

  const handleSignOut = async () => {
    await supabase.auth.signOut()
    router.refresh()
  }

  return (
    <>
      <input name="email" onChange={(e) => setEmail(e.target.value)} value={email} />
      <input
        type="password"
        name="password"
        onChange={(e) => setPassword(e.target.value)}
        value={password}
      />
      <button onClick={handleSignUp}>Sign up</button>
      <button onClick={handleSignIn}>Sign in</button>
      <button onClick={handleSignOut}>Sign out</button>
    </>
  )
}

```

----------------------------------------

TITLE: Fetch Supabase Branch Credentials in GitHub Actions (YAML)
DESCRIPTION: This GitHub Actions workflow snippet demonstrates how to wait for the Supabase Preview check to pass and then fetch the preview branch credentials using the Supabase CLI. These credentials can be used by custom ORM or seed scripts to interact with the database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#_snippet_9

LANGUAGE: yaml
CODE:
```
on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
    branches:
      - main
    paths:
      - 'supabase/**'

jobs:
  wait:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.check.outputs.conclusion }}
    steps:
      - uses: fountainhead/action-wait-for-check@v1.2.0
        id: check
        with:
          checkName: Supabase Preview
          ref: ${{ github.event.pull_request.head.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}

  migrate:
    needs:
      - wait
    if: ${{ needs.wait.outputs.status == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: supabase/setup-cli@v1
        with:
          version: latest
      - run: supabase --experimental branches get "$GITHUB_HEAD_REF" -o env >> $GITHUB_ENV
      - name: Custom ORM migration
        run: psql "$POSTGRES_URL_NON_POOLING" -c 'select 1'
```

----------------------------------------

TITLE: Install Supabase Client (Bash)
DESCRIPTION: Navigate into the newly created Vue project directory ('my-app') and install the official Supabase client library using npm. The '@supabase/supabase-js' package provides a convenient interface for interacting with your Supabase project from the client-side.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/vue.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
cd my-app && npm install @supabase/supabase-js
```

----------------------------------------

TITLE: Signing Out User with Supabase Auth (JavaScript)
DESCRIPTION: Shows how to sign out the currently authenticated user using the Supabase client library's `signOut` method. This action terminates the user's session.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/monthly-active-users-sso.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
const {error} = await supabase.auth.signOut()
```

----------------------------------------

TITLE: Setting Environment Variables
DESCRIPTION: Configuration of Supabase environment variables for API URL and anonymous key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nuxt-3.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
SUPABASE_URL="YOUR_SUPABASE_URL"
SUPABASE_KEY="YOUR_SUPABASE_ANON_KEY"
```

----------------------------------------

TITLE: Setting Up SQL Database Schema for User Profiles in Supabase
DESCRIPTION: SQL commands to create and configure a profiles table with row level security policies, set up Supabase Realtime for the profiles table, and configure storage for avatar images with appropriate access policies.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/nuxt3-user-management/README.md#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- Create a table for public "profiles"
create table profiles (
  id uuid references auth.users not null,
  updated_at timestamp with time zone,
  username text unique,
  avatar_url text,
  website text,

  primary key (id),
  unique(username),
  constraint username_length check (char_length(username) >= 3)
);

alter table profiles enable row level security;

create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );

create policy "Users can insert their own profile."
  on profiles for insert
  with check ( (select auth.uid()) = id );

create policy "Users can update own profile."
  on profiles for update
  using ( (select auth.uid()) = id );

-- Set up Realtime!
begin;
  drop publication if exists supabase_realtime;
  create publication supabase_realtime;
commit;
alter publication supabase_realtime add table profiles;

-- Set up Storage!
insert into storage.buckets (id, name)
values ('avatars', 'avatars');

create policy "Avatar images are publicly accessible."
  on storage.objects for select
  using ( bucket_id = 'avatars' );

create policy "Anyone can upload an avatar."
  on storage.objects for insert
  with check ( bucket_id = 'avatars' );
```

----------------------------------------

TITLE: Initializing Supabase Client
DESCRIPTION: JavaScript module that creates and exports a Supabase client instance using environment variables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-react.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey)
```

----------------------------------------

TITLE: Setting Up Environment Variables for Supabase Client
DESCRIPTION: This snippet outlines the necessary environment variables required to configure the Supabase client in a TanStack Start project. It details how to set these variables in a .env file, including the Supabase URL and anonymous key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/client.mdx#2025-04-21_snippet_0

LANGUAGE: env
CODE:
```
VITE_SUPABASE_URL=
VITE_SUPABASE_ANON_KEY=
```

----------------------------------------

TITLE: Creating Sign-up Route Handler in TypeScript
DESCRIPTION: This TypeScript code example provides a server-side route handler for signing up users in a Next.js application using Supabase. It involves processing a POST request with form data, utilizing a type-safe Supabase client to handle user registration, and redirecting the user afterward. It requires @supabase/auth-helpers-nextjs and next/headers packages, and includes TypeScript type definitions for better type checking.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_9

LANGUAGE: TypeScript
CODE:
```
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { NextResponse } from 'next/server'

import type { Database } from '@/lib/database.types'

export async function POST(request: Request) {
  const requestUrl = new URL(request.url)
  const formData = await request.formData()
  const email = String(formData.get('email'))
  const password = String(formData.get('password'))
  const cookieStore = cookies()
  const supabase = createRouteHandlerClient<Database>({ cookies: () => cookieStore })

  await supabase.auth.signUp({
    email,
    password,
    options: {
      emailRedirectTo: `${requestUrl.origin}/auth/callback`,
    },
  })

  return NextResponse.redirect(requestUrl.origin, {
    status: 301,
  })
}

```

----------------------------------------

TITLE: Creating JSONB Column in Postgres (SQL)
DESCRIPTION: This SQL snippet demonstrates how to create a database table named `books` that includes an `id`, `title`, `author`, and a `metadata` column defined with the `jsonb` data type. The `jsonb` type is recommended for storing unstructured or variable-schema data efficiently in PostgreSQL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/json.mdx#_snippet_0

LANGUAGE: sql
CODE:
```
create table books (
  id serial primary key,
  title text,
  author text,
  metadata jsonb
);
```

----------------------------------------

TITLE: Enabling Row Level Security Using SQL
DESCRIPTION: SQL command to enable Row Level Security (RLS) on a database table named 'todos'. This prevents unauthorized access to the table data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/securing-your-api.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
alter table
  todos enable row level security;
```

----------------------------------------

TITLE: Signing Out a User JavaScript
DESCRIPTION: The JavaScript snippet demonstrates how to sign out a user using the Supabase client library. It shows the basic sign-out method and how to invoke it from the client-side, effectively ending the active session. Requires '@supabase/supabase-js' package.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/signout.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')\n\n// ---cut---\nasync function signOut() {\n  const { error } = await supabase.auth.signOut()\n}
```

----------------------------------------

TITLE: Creating a Vector Similarity Search Function in PostgreSQL
DESCRIPTION: This SQL function creates a Postgres function for similarity searching of image embeddings. It takes a query embedding vector, a similarity threshold, and a maximum result count as parameters. The function uses pgvector's cosine similarity operator (<=>), orders by similarity score, and returns matches above the specified threshold.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-07-hugging-face-supabase.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create function match_images (
    query_embedding vector(512),
    match_threshold float,
    match_count int
)
returns setof images
language sql stable
as $$
	select *, 1 - (image_embedding <=> query_embedding) as similarity
	from images
	where 1 - (image_embedding <=> query_embedding) > match_threshold
	order by similarity desc
	limit match_count;
$$;
```

----------------------------------------

TITLE: Creating Server Client for Supabase in Next.js
DESCRIPTION: Implementation for creating a Supabase client for server components using the createServerClient function from @supabase/ssr package with proper cookie handling.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/nextjs-supabase-auth.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export async function createClient() {
  const cookieStore = await cookies()

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll()
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {
            // The `setAll` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    }
  )
}
```

----------------------------------------

TITLE: Installing Supabase JavaScript Client
DESCRIPTION: Command to install the Supabase JavaScript client library for integrating with Supabase services.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
npm install @supabase/supabase-js
```

----------------------------------------

TITLE: Using TypeScript Definitions with Supabase Client
DESCRIPTION: This code demonstrates how to use the generated TypeScript definitions when creating a Supabase client instance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/typescript-support.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { createClient } from '@supabase/supabase-js'
import { Database } from './database.types'

const supabase = createClient<Database>(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
)
```

----------------------------------------

TITLE: Querying Database Table with Basic Select in JavaScript
DESCRIPTION: Simple Supabase query to select the 'name' column from the 'countries' table. This translates to a lightweight URL request that won't trigger 520 errors.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/fixing-520-errors-in-the-database-rest-api-Ur5-B2.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
let { data: countries, error } = await supabase.from('countries').select('name')
```

----------------------------------------

TITLE: Creating Supabase Client Utility Functions for Next.js
DESCRIPTION: Create utility functions to initialize Supabase clients for use in Client Components and Server Components/Actions/Route Handlers, handling cookie management for server-side rendering.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#_snippet_2

LANGUAGE: ts
CODE:
```
import { createBrowserClient } from '@supabase/ssr'

export function createClient() {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )
}
```

LANGUAGE: ts
CODE:
```
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export async function createClient() {
  const cookieStore = await cookies()

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll()
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {
            // The `setAll` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        }
      }
    }
  )
}
```

----------------------------------------

TITLE: Installing supabase-js v2 via npm
DESCRIPTION: Command to install the latest version of supabase-js v2 using npm.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
npm install @supabase/supabase-js@2
```

----------------------------------------

TITLE: Creating Supabase SSR Client in Remix Loader
DESCRIPTION: Demonstrates how to create a Supabase client for server-side rendering in a Remix loader function, handling cookie management for authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_21

LANGUAGE: typescript
CODE:
```
import { type LoaderFunctionArgs } from '@remix-run/node'
import { createServerClient, parseCookieHeader, serializeCookieHeader } from '@supabase/ssr'

export async function loader({ request }: LoaderFunctionArgs) {
  const headers = new Headers()

  const supabase = createServerClient(process.env.SUPABASE_URL!, process.env.SUPABASE_ANON_KEY!, {
    cookies: {
      getAll() {
        return parseCookieHeader(request.headers.get('Cookie') ?? '')
      },
      setAll(cookiesToSet) {
        cookiesToSet.forEach(({ name, value, options }) =>
          headers.append('Set-Cookie', serializeCookieHeader(name, value, options))
        )
      },
    },
  })

  return new Response('...', {
    headers,
  })
}
```

----------------------------------------

TITLE: Supabase Initialization in Flutter
DESCRIPTION: Dart code to initialize Supabase client in the Flutter application
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-05-flutter-uber-clone.mdx#2025-04-21_snippet_2

LANGUAGE: dart
CODE:
```
import 'package:supabase_flutter/supabase_flutter.dart';

void main() async {
  await Supabase.initialize(
    url: 'YOUR_SUPABASE_URL',
    anonKey: 'YOUR_SUPABASE_ANON_KEY',
  );
  runApp(const MainApp());
}

final supabase = Supabase.instance.client;
```

----------------------------------------

TITLE: Streaming Inserts using Postgres Changes in JavaScript
DESCRIPTION: This JavaScript code shows how to stream new rows inserted into a table using Postgres Changes and the Supabase client. It initializes the Supabase client, creates a channel, and subscribes to 'postgres_changes' events with the 'INSERT' event type and a specified schema. When a new row is inserted, the payload is logged to the console.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/subscribing-to-database-changes.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
// @noImplicitAny: false
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

// ---cut---
const channel = supabase
  .channel('schema-db-changes')
  .on(
    'postgres_changes',
    {
      event: 'INSERT',
      schema: 'public',
    },
    (payload) => console.log(payload)
  )
  .subscribe()
```

----------------------------------------

TITLE: Install Supabase Client (Bash)
DESCRIPTION: Navigates into the created Nuxt app directory and installs the official Supabase JavaScript client library using npm.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/nuxtjs.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
cd my-app && npm install @supabase/supabase-js
```

----------------------------------------

TITLE: Querying Todos with Client Libraries
DESCRIPTION: Examples of querying todos using different Supabase client libraries.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/quickstart.mdx#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.from('todos').select()
```

LANGUAGE: dart
CODE:
```
final data = await supabase.from('todos').select('*');
```

LANGUAGE: python
CODE:
```
response = supabase.table('todos').select("*").execute()
```

LANGUAGE: swift
CODE:
```
let response = try await supabase.from("todos").select()
```

----------------------------------------

TITLE: Push Database Migrations (CLI)
DESCRIPTION: This command pushes the local database migrations to the remote Supabase database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_11

LANGUAGE: bash
CODE:
```
supabase db push
```

----------------------------------------

TITLE: Query Supabase Data in React (JavaScript)
DESCRIPTION: Imports React hooks and the Supabase client. Initializes the client using environment variables. Defines an async function `getInstruments` to fetch data from the 'instruments' table and updates the component state. Renders the fetched data as a list.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/reactjs.mdx#_snippet_3

LANGUAGE: js
CODE:
```
import { useEffect, useState } from "react";
import { createClient } from "@supabase/supabase-js";

const supabase = createClient(import.meta.env.VITE_SUPABASE_URL, import.meta.env.VITE_SUPABASE_ANON_KEY);

function App() {
  const [instruments, setInstruments] = useState([]);

  useEffect(() => {
    getInstruments();
  }, []);

  async function getInstruments() {
    const { data } = await supabase.from("instruments").select();
    setInstruments(data);
  }

  return (
    <ul>
      {instruments.map((instrument) => (
        <li key={instrument.name}>{instrument.name}</li>
      ))}
    </ul>
  );
}

export default App;
```

----------------------------------------

TITLE: Starting Supabase Local Development
DESCRIPTION: Initializes the local Supabase development environment, making the local dashboard accessible at `localhost:54323` for schema changes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#_snippet_4

LANGUAGE: bash
CODE:
```
supabase start
```

----------------------------------------

TITLE: Signing Up New User using Supabase in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to sign up a new user with email and password using Supabase. Optionally, a redirect URL can be specified to direct the user after confirmation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_11

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project.supabase.co', 'your-anon-key')

// ---cut---
async function signUpNewUser() {
  const { data, error } = await supabase.auth.signUp({
    email: 'valid.email@supabase.io',
    password: 'example-password',
    options: {
      emailRedirectTo: 'https://example.com/welcome',
    },
  })
}
```

----------------------------------------

TITLE: Supabase Auth Server Actions - Next.js/TypeScript
DESCRIPTION: Implements Next.js server actions (`login`, `signup`) for handling user authentication with Supabase. It retrieves form data, calls Supabase Auth methods (`signInWithPassword`, `signUp`), and redirects the user based on the result.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#_snippet_6

LANGUAGE: TypeScript
CODE:
```
'use server'

import { revalidatePath } from 'next/cache'
import { redirect } from 'next/navigation'

import { createClient } from '@/utils/supabase/server'

export async function login(formData: FormData) {
  const supabase = await createClient()

  // type-casting here for convenience
  // in practice, you should validate your inputs
  const data = {
    email: formData.get('email') as string,
    password: formData.get('password') as string,
  }

  const { error } = await supabase.auth.signInWithPassword(data)

  if (error) {
    redirect('/error')
  }

  revalidatePath('/', 'layout')
  redirect('/')
}

export async function signup(formData: FormData) {
  const supabase = await createClient()

  // type-casting here for convenience
  // in practice, you should validate your inputs
  const data = {
    email: formData.get('email') as string,
    password: formData.get('password') as string,
  }

  const { error } = await supabase.auth.signUp(data)

  if (error) {
    redirect('/error')
  }

  revalidatePath('/', 'layout')
  redirect('/')
}
```

----------------------------------------

TITLE: Creating Related Tables with Foreign Keys
DESCRIPTION: Creates a categories table and adds a foreign key reference in the movies table to establish a one-to-many relationship.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create table categories (
  id bigint generated always as identity primary key,
  name text -- category name
);

alter table movies
  add column category_id bigint references categories;
```

----------------------------------------

TITLE: Using EXPLAIN for Query Plan Analysis in SQL
DESCRIPTION: This snippet demonstrates how to use the EXPLAIN keyword to view the query execution plan in Postgres, which is useful for understanding index usage and query optimization.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-postgres-chooses-which-index-to-use-_JHrf4.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
EXPLAIN <your query>
```

----------------------------------------

TITLE: Signing In with LinkedIn using Supabase JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to authenticate a user with LinkedIn OAuth using Supabase's `signInWithOAuth` function. It requires the `@supabase/supabase-js` library and a Supabase project URL with an anonymous key. Parameters include the `provider` set to `linkedin_oidc`, returning the user's authentication data upon success.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-linkedin.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('<your-project-url>', '<your-anon-key>')

// ---cut---
async function signInWithLinkedIn() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'linkedin_oidc',
  })
}
```

----------------------------------------

TITLE: Signing Out Users in Supabase JavaScript
DESCRIPTION: This JavaScript code demonstrates how to log out users and clear session data using the `signOut` method in a Supabase environment. The client must be pre-configured with project-specific details. It is a straightforward logout operation removing the authentication token from the session.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-gitlab.mdx#2025-04-21_snippet_3

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')

// ---cut---
async function signOut() {
  const { error } = await supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Installing Supabase CLI
DESCRIPTION: Install the Supabase Command Line Interface (CLI) globally or as a dev dependency using your preferred package manager (npm, yarn, pnpm) or Homebrew. The CLI is necessary to manage local Supabase projects and services.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development.mdx#_snippet_0

LANGUAGE: sh
CODE:
```
npm install supabase --save-dev
```

LANGUAGE: sh
CODE:
```
yarn add supabase --dev
```

LANGUAGE: sh
CODE:
```
pnpm add supabase --save-dev
```

LANGUAGE: sh
CODE:
```
brew install supabase/tap/supabase
```

----------------------------------------

TITLE: Initializing Supabase Client with AsyncStorage
DESCRIPTION: TypeScript code to configure the Supabase client with AsyncStorage for session persistence in a React Native app.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-expo-react-native.mdx#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import AsyncStorage from '@react-native-async-storage/async-storage'
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = YOUR_REACT_NATIVE_SUPABASE_URL
const supabaseAnonKey = YOUR_REACT_NATIVE_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    storage: AsyncStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false,
  },
})
```

----------------------------------------

TITLE: Creating Authenticated Users RLS Policy
DESCRIPTION: SQL policy to allow access to the profiles table for authenticated users only.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/api-keys.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create policy "Allow access to authenticated users" on profiles to authenticated for
select
  using (true);
```

----------------------------------------

TITLE: Starting Supabase Locally
DESCRIPTION: This command starts Supabase locally using the Supabase CLI, which is required to run the development database for the project.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/caching/with-nextjs-13/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
supabase start
```

----------------------------------------

TITLE: Signing in with Magic Link using JavaScript
DESCRIPTION: Demonstrates signing in a user via a magic link using Supabase JavaScript client. Requires Supabase JS library and a valid Supabase URL and key. Inputs: a user's email. Automatically signs up an unsigned user unless specified otherwise.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('url', 'anonKey')

// ---cut---
async function signInWithEmail() {
  const { data, error } = await supabase.auth.signInWithOtp({
    email: 'valid.email@supabase.io',
    options: {
      // set this to false if you do not want the user to be automatically signed up
      shouldCreateUser: false,
      emailRedirectTo: 'https://example.com/welcome',
    },
  })
}
```

----------------------------------------

TITLE: Creating Database Schema Tables in Supabase
DESCRIPTION: Defines the core database tables for a content management application with user profiles, organizations, membership roles, posts, and comments. Includes foreign key relationships, constraints, and default values.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/pgtap-extended.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create table public.profiles (
  id uuid references auth.users(id) primary key,
  username text unique not null,
  full_name text,
  bio text,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table public.organizations (
  id bigint primary key generated always as identity,
  name text not null,
  slug text unique not null,
  plan_type text not null check (plan_type in ('free', 'pro', 'enterprise')),
  max_posts int not null default 5,
  created_at timestamptz default now()
);

create table public.org_members (
  org_id bigint references public.organizations(id) on delete cascade,
  user_id uuid references auth.users(id) on delete cascade,
  role text not null check (role in ('owner', 'admin', 'editor', 'viewer')),
  created_at timestamptz default now(),
  primary key (org_id, user_id)
);

create table public.posts (
  id bigint primary key generated always as identity,
  title text not null,
  content text not null,
  author_id uuid references public.profiles(id) not null,
  org_id bigint references public.organizations(id),
  status text not null check (status in ('draft', 'published', 'archived')),
  is_premium boolean default false,
  scheduled_for timestamptz,
  category text,
  view_count int default 0,
  published_at timestamptz,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table public.comments (
  id bigint primary key generated always as identity,
  post_id bigint references public.posts(id) on delete cascade,
  author_id uuid references public.profiles(id),
  content text not null,
  is_deleted boolean default false,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);
```

----------------------------------------

TITLE: Using Supabase in Next.js TypeScript Server Components
DESCRIPTION: TypeScript implementation for using Supabase in a Next.js Server Component. This approach provides type safety when fetching data server-side using the createServerComponentClient function with database type definitions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_19

LANGUAGE: tsx
CODE:
```
import { cookies } from 'next/headers'
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs'

import type { Database } from '@/lib/database.types'

export default async function ServerComponent() {
  const cookieStore = cookies()
  const supabase = createServerComponentClient<Database>({ cookies: () => cookieStore })
  const { data } = await supabase.from('todos').select()
  return <pre>{JSON.stringify(data, null, 2)}</pre>
}
```

----------------------------------------

TITLE: Supabase Auth Sign Up Example
DESCRIPTION: This JavaScript code snippet shows an example of how to use the `signUp` function from the Supabase auth client. It demonstrates how to sign up a user with an email and password, including setting the `emailRedirectTo` option.  The `emailRedirectTo` option specifies the URL where the user will be redirected after confirming their email.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/remix.mdx#2025-04-21_snippet_10

LANGUAGE: jsx
CODE:
```
supabaseClient.auth.signUp({
  email: 'valid.email@supabase.io',
  password: 'sup3rs3cur3',
  options: {
    emailRedirectTo: 'http://localhost:3000/auth/callback',
  },
})
```

----------------------------------------

TITLE: Initializing Supabase Client and Fetching Data in Swift
DESCRIPTION: This snippet demonstrates how to initialize a Supabase client in Swift and use it to fetch data from a 'countries' table. It shows the basic pattern for connecting to Supabase and executing a query that returns typed results.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-15-supabase-swift.mdx#2025-04-21_snippet_0

LANGUAGE: swift
CODE:
```
let url = URL(string: "...")!
let anonKey = "public-anon-key"
let client = SupabaseClient(supabaseURL: url, supabaseKey: anonKey)

struct Country: Decodable {
  let id: Int
  let name: String
}

let countries: [Country] = try await supabase.from("countries")
  .select()
  .execute()
  .value
```

----------------------------------------

TITLE: Creating Instruments Table and Inserting Sample Data in SQL
DESCRIPTION: This SQL snippet creates an 'instruments' table with an auto-incrementing ID and a name column. It then inserts sample data for violin, viola, and cello. Finally, it enables row-level security on the table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/quickstart_db_setup.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Create the table
create table instruments (
  id bigint primary key generated always as identity,
  name text not null
);
-- Insert some sample data into the table
insert into instruments (name)
values
  ('violin'),
  ('viola'),
  ('cello');

alter table instruments enable row level security;
```

----------------------------------------

TITLE: Creating Database Schema for User Profiles in Supabase
DESCRIPTION: SQL script to set up the complete backend structure for user profiles in Supabase, including table creation, row-level security policies, realtime publication setup, and storage bucket configuration for avatar images.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/vue3-user-management/README.md#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- Create a table for public "profiles"
create table profiles (
  id uuid references auth.users not null,
  updated_at timestamp with time zone,
  username text unique,
  avatar_url text,
  website text,

  primary key (id),
  unique(username),
  constraint username_length check (char_length(username) >= 3)
);

alter table profiles enable row level security;

create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );

create policy "Users can insert their own profile."
  on profiles for insert
  with check ( (select auth.uid()) = id );

create policy "Users can update own profile."
  on profiles for update
  using ( (select auth.uid()) = id );

-- Set up Realtime!
begin;
  drop publication if exists supabase_realtime;
  create publication supabase_realtime;
commit;
alter publication supabase_realtime add table profiles;

-- Set up Storage!
insert into storage.buckets (id, name)
values ('avatars', 'avatars');

create policy "Avatar images are publicly accessible."
  on storage.objects for select
  using ( bucket_id = 'avatars' );

create policy "Anyone can upload an avatar."
  on storage.objects for insert
  with check ( bucket_id = 'avatars' );
```

----------------------------------------

TITLE: Starting Local Supabase Stack
DESCRIPTION: Start the local Supabase services, including the database, authentication, and storage. This command spins up the necessary Docker containers to run the Supabase stack locally on your machine, allowing you to develop without a network connection.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development.mdx#_snippet_2

LANGUAGE: sh
CODE:
```
npx supabase start
```

LANGUAGE: sh
CODE:
```
yarn supabase start
```

LANGUAGE: sh
CODE:
```
pnpx supabase start
```

LANGUAGE: sh
CODE:
```
supabase start
```

----------------------------------------

TITLE: Initializing and Starting Supabase Locally with CLI
DESCRIPTION: Commands to initialize and start the Supabase stack on a local machine using the CLI. These commands set up the project and launch the entire Supabase infrastructure locally.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cli.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase init
supabase start
```

----------------------------------------

TITLE: Install Supabase Client Library (Bash)
DESCRIPTION: Navigates into the newly created 'my-app' directory and installs the `@supabase/supabase-js` package using npm, adding it as a project dependency.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/reactjs.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
cd my-app && npm install @supabase/supabase-js
```

----------------------------------------

TITLE: Installing Supabase Package for Dart
DESCRIPTION: Command to install the Supabase package for regular Dart projects using pub package manager.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v1/installing.mdx#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
dart pub add supabase
```

----------------------------------------

TITLE: Initializing Supabase Client and Querying 'todos' Table in JavaScript
DESCRIPTION: JavaScript code to initialize the Supabase client using the API URL and anonymous key, then perform a SELECT query on the 'todos' table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/creating-routes.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// Initialize the JS client
import { createClient } from '@supabase/supabase-js'
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)

// Make a request
const { data: todos, error } = await supabase.from('todos').select('*')
```
