TITLE: Database Schema with Row Level Security for Todo List in SQL
DESCRIPTION: SQL schema for creating a todos table with row-level security policies. Defines the table structure with user references and implements policies for CRUD operations that restrict users to accessing only their own todos.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/todo-list/nextjs-todo-list/README.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table todos (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  task text check (char_length(task) > 3),
  is_complete boolean default false,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table todos enable row level security;

create policy "Individuals can create todos." on todos for
    insert with check ((select auth.uid()) = user_id);

create policy "Individuals can view their own todos. " on todos for
    select using ((select auth.uid()) = user_id);

create policy "Individuals can update their own todos." on todos for
    update using ((select auth.uid()) = user_id);

create policy "Individuals can delete their own todos." on todos for
    delete using ((select auth.uid()) = user_id);
```

----------------------------------------

TITLE: Handling Authentication Client Component in TypeScript
DESCRIPTION: This TypeScript code snippet demonstrates a client-side component for user authentication in a Next.js application using Supabase. It includes methods for user sign-up, sign-in, and sign-out, utilizing a typed Supabase client and React hooks for state management. Dependencies include @supabase/auth-helpers-nextjs, next/navigation, and TypeScript types for the database are specified for type safety.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_7

LANGUAGE: TypeScript
CODE:
```
'use client'

import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { useRouter } from 'next/navigation'
import { useState } from 'react'

import type { Database } from '@/lib/database.types'

export default function Login() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const router = useRouter()
  const supabase = createClientComponentClient<Database>()

  const handleSignUp = async () => {
    await supabase.auth.signUp({
      email,
      password,
      options: {
        emailRedirectTo: `${location.origin}/auth/callback`,
      },
    })
    router.refresh()
  }

  const handleSignIn = async () => {
    await supabase.auth.signInWithPassword({
      email,
      password,
    })
    router.refresh()
  }

  const handleSignOut = async () => {
    await supabase.auth.signOut()
    router.refresh()
  }

  return (
    <>
      <input name="email" onChange={(e) => setEmail(e.target.value)} value={email} />
      <input
        type="password"
        name="password"
        onChange={(e) => setPassword(e.target.value)}
        value={password}
      />
      <button onClick={handleSignUp}>Sign up</button>
      <button onClick={handleSignIn}>Sign in</button>
      <button onClick={handleSignOut}>Sign out</button>
    </>
  )
}

```

----------------------------------------

TITLE: Fetch Supabase Branch Credentials in GitHub Actions (YAML)
DESCRIPTION: This GitHub Actions workflow snippet demonstrates how to wait for the Supabase Preview check to pass and then fetch the preview branch credentials using the Supabase CLI. These credentials can be used by custom ORM or seed scripts to interact with the database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#_snippet_9

LANGUAGE: yaml
CODE:
```
on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
    branches:
      - main
    paths:
      - 'supabase/**'

jobs:
  wait:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.check.outputs.conclusion }}
    steps:
      - uses: fountainhead/action-wait-for-check@v1.2.0
        id: check
        with:
          checkName: Supabase Preview
          ref: ${{ github.event.pull_request.head.sha }}
          token: ${{ secrets.GITHUB_TOKEN }}

  migrate:
    needs:
      - wait
    if: ${{ needs.wait.outputs.status == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: supabase/setup-cli@v1
        with:
          version: latest
      - run: supabase --experimental branches get "$GITHUB_HEAD_REF" -o env >> $GITHUB_ENV
      - name: Custom ORM migration
        run: psql "$POSTGRES_URL_NON_POOLING" -c 'select 1'
```

----------------------------------------

TITLE: Install Supabase Client (Bash)
DESCRIPTION: Navigate into the newly created Vue project directory ('my-app') and install the official Supabase client library using npm. The '@supabase/supabase-js' package provides a convenient interface for interacting with your Supabase project from the client-side.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/vue.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
cd my-app && npm install @supabase/supabase-js
```

----------------------------------------

TITLE: Signing Out User with Supabase Auth (JavaScript)
DESCRIPTION: Shows how to sign out the currently authenticated user using the Supabase client library's `signOut` method. This action terminates the user's session.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/monthly-active-users-sso.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
const {error} = await supabase.auth.signOut()
```

----------------------------------------

TITLE: Setting Environment Variables
DESCRIPTION: Configuration of Supabase environment variables for API URL and anonymous key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nuxt-3.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
SUPABASE_URL="YOUR_SUPABASE_URL"
SUPABASE_KEY="YOUR_SUPABASE_ANON_KEY"
```

----------------------------------------

TITLE: Setting Up SQL Database Schema for User Profiles in Supabase
DESCRIPTION: SQL commands to create and configure a profiles table with row level security policies, set up Supabase Realtime for the profiles table, and configure storage for avatar images with appropriate access policies.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/nuxt3-user-management/README.md#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- Create a table for public "profiles"
create table profiles (
  id uuid references auth.users not null,
  updated_at timestamp with time zone,
  username text unique,
  avatar_url text,
  website text,

  primary key (id),
  unique(username),
  constraint username_length check (char_length(username) >= 3)
);

alter table profiles enable row level security;

create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );

create policy "Users can insert their own profile."
  on profiles for insert
  with check ( (select auth.uid()) = id );

create policy "Users can update own profile."
  on profiles for update
  using ( (select auth.uid()) = id );

-- Set up Realtime!
begin;
  drop publication if exists supabase_realtime;
  create publication supabase_realtime;
commit;
alter publication supabase_realtime add table profiles;

-- Set up Storage!
insert into storage.buckets (id, name)
values ('avatars', 'avatars');

create policy "Avatar images are publicly accessible."
  on storage.objects for select
  using ( bucket_id = 'avatars' );

create policy "Anyone can upload an avatar."
  on storage.objects for insert
  with check ( bucket_id = 'avatars' );
```

----------------------------------------

TITLE: Initializing Supabase Client
DESCRIPTION: JavaScript module that creates and exports a Supabase client instance using environment variables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-react.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey)
```

----------------------------------------

TITLE: Setting Up Environment Variables for Supabase Client
DESCRIPTION: This snippet outlines the necessary environment variables required to configure the Supabase client in a TanStack Start project. It details how to set these variables in a .env file, including the Supabase URL and anonymous key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/client.mdx#2025-04-21_snippet_0

LANGUAGE: env
CODE:
```
VITE_SUPABASE_URL=
VITE_SUPABASE_ANON_KEY=
```

----------------------------------------

TITLE: Creating Sign-up Route Handler in TypeScript
DESCRIPTION: This TypeScript code example provides a server-side route handler for signing up users in a Next.js application using Supabase. It involves processing a POST request with form data, utilizing a type-safe Supabase client to handle user registration, and redirecting the user afterward. It requires @supabase/auth-helpers-nextjs and next/headers packages, and includes TypeScript type definitions for better type checking.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_9

LANGUAGE: TypeScript
CODE:
```
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { NextResponse } from 'next/server'

import type { Database } from '@/lib/database.types'

export async function POST(request: Request) {
  const requestUrl = new URL(request.url)
  const formData = await request.formData()
  const email = String(formData.get('email'))
  const password = String(formData.get('password'))
  const cookieStore = cookies()
  const supabase = createRouteHandlerClient<Database>({ cookies: () => cookieStore })

  await supabase.auth.signUp({
    email,
    password,
    options: {
      emailRedirectTo: `${requestUrl.origin}/auth/callback`,
    },
  })

  return NextResponse.redirect(requestUrl.origin, {
    status: 301,
  })
}

```

----------------------------------------

TITLE: Creating JSONB Column in Postgres (SQL)
DESCRIPTION: This SQL snippet demonstrates how to create a database table named `books` that includes an `id`, `title`, `author`, and a `metadata` column defined with the `jsonb` data type. The `jsonb` type is recommended for storing unstructured or variable-schema data efficiently in PostgreSQL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/json.mdx#_snippet_0

LANGUAGE: sql
CODE:
```
create table books (
  id serial primary key,
  title text,
  author text,
  metadata jsonb
);
```

----------------------------------------

TITLE: Enabling Row Level Security Using SQL
DESCRIPTION: SQL command to enable Row Level Security (RLS) on a database table named 'todos'. This prevents unauthorized access to the table data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/securing-your-api.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
alter table
  todos enable row level security;
```

----------------------------------------

TITLE: Signing Out a User JavaScript
DESCRIPTION: The JavaScript snippet demonstrates how to sign out a user using the Supabase client library. It shows the basic sign-out method and how to invoke it from the client-side, effectively ending the active session. Requires '@supabase/supabase-js' package.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/signout.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')\n\n// ---cut---\nasync function signOut() {\n  const { error } = await supabase.auth.signOut()\n}
```

----------------------------------------

TITLE: Creating a Vector Similarity Search Function in PostgreSQL
DESCRIPTION: This SQL function creates a Postgres function for similarity searching of image embeddings. It takes a query embedding vector, a similarity threshold, and a maximum result count as parameters. The function uses pgvector's cosine similarity operator (<=>), orders by similarity score, and returns matches above the specified threshold.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-07-hugging-face-supabase.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create function match_images (
    query_embedding vector(512),
    match_threshold float,
    match_count int
)
returns setof images
language sql stable
as $$
	select *, 1 - (image_embedding <=> query_embedding) as similarity
	from images
	where 1 - (image_embedding <=> query_embedding) > match_threshold
	order by similarity desc
	limit match_count;
$$;
```

----------------------------------------

TITLE: Creating Server Client for Supabase in Next.js
DESCRIPTION: Implementation for creating a Supabase client for server components using the createServerClient function from @supabase/ssr package with proper cookie handling.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/nextjs-supabase-auth.md#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export async function createClient() {
  const cookieStore = await cookies()

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll()
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {
            // The `setAll` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    }
  )
}
```

----------------------------------------

TITLE: Installing Supabase JavaScript Client
DESCRIPTION: Command to install the Supabase JavaScript client library for integrating with Supabase services.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
npm install @supabase/supabase-js
```

----------------------------------------

TITLE: Using TypeScript Definitions with Supabase Client
DESCRIPTION: This code demonstrates how to use the generated TypeScript definitions when creating a Supabase client instance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/typescript-support.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { createClient } from '@supabase/supabase-js'
import { Database } from './database.types'

const supabase = createClient<Database>(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_ANON_KEY
)
```

----------------------------------------

TITLE: Querying Database Table with Basic Select in JavaScript
DESCRIPTION: Simple Supabase query to select the 'name' column from the 'countries' table. This translates to a lightweight URL request that won't trigger 520 errors.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/fixing-520-errors-in-the-database-rest-api-Ur5-B2.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
let { data: countries, error } = await supabase.from('countries').select('name')
```

----------------------------------------

TITLE: Creating Supabase Client Utility Functions for Next.js
DESCRIPTION: Create utility functions to initialize Supabase clients for use in Client Components and Server Components/Actions/Route Handlers, handling cookie management for server-side rendering.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#_snippet_2

LANGUAGE: ts
CODE:
```
import { createBrowserClient } from '@supabase/ssr'

export function createClient() {
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )
}
```

LANGUAGE: ts
CODE:
```
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export async function createClient() {
  const cookieStore = await cookies()

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll()
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {
            // The `setAll` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        }
      }
    }
  )
}
```

----------------------------------------

TITLE: Installing supabase-js v2 via npm
DESCRIPTION: Command to install the latest version of supabase-js v2 using npm.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
npm install @supabase/supabase-js@2
```

----------------------------------------

TITLE: Creating Supabase SSR Client in Remix Loader
DESCRIPTION: Demonstrates how to create a Supabase client for server-side rendering in a Remix loader function, handling cookie management for authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_21

LANGUAGE: typescript
CODE:
```
import { type LoaderFunctionArgs } from '@remix-run/node'
import { createServerClient, parseCookieHeader, serializeCookieHeader } from '@supabase/ssr'

export async function loader({ request }: LoaderFunctionArgs) {
  const headers = new Headers()

  const supabase = createServerClient(process.env.SUPABASE_URL!, process.env.SUPABASE_ANON_KEY!, {
    cookies: {
      getAll() {
        return parseCookieHeader(request.headers.get('Cookie') ?? '')
      },
      setAll(cookiesToSet) {
        cookiesToSet.forEach(({ name, value, options }) =>
          headers.append('Set-Cookie', serializeCookieHeader(name, value, options))
        )
      },
    },
  })

  return new Response('...', {
    headers,
  })
}
```

----------------------------------------

TITLE: Supabase Initialization in Flutter
DESCRIPTION: Dart code to initialize Supabase client in the Flutter application
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-05-flutter-uber-clone.mdx#2025-04-21_snippet_2

LANGUAGE: dart
CODE:
```
import 'package:supabase_flutter/supabase_flutter.dart';

void main() async {
  await Supabase.initialize(
    url: 'YOUR_SUPABASE_URL',
    anonKey: 'YOUR_SUPABASE_ANON_KEY',
  );
  runApp(const MainApp());
}

final supabase = Supabase.instance.client;
```

----------------------------------------

TITLE: Streaming Inserts using Postgres Changes in JavaScript
DESCRIPTION: This JavaScript code shows how to stream new rows inserted into a table using Postgres Changes and the Supabase client. It initializes the Supabase client, creates a channel, and subscribes to 'postgres_changes' events with the 'INSERT' event type and a specified schema. When a new row is inserted, the payload is logged to the console.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/subscribing-to-database-changes.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
// @noImplicitAny: false
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

// ---cut---
const channel = supabase
  .channel('schema-db-changes')
  .on(
    'postgres_changes',
    {
      event: 'INSERT',
      schema: 'public',
    },
    (payload) => console.log(payload)
  )
  .subscribe()
```

----------------------------------------

TITLE: Install Supabase Client (Bash)
DESCRIPTION: Navigates into the created Nuxt app directory and installs the official Supabase JavaScript client library using npm.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/nuxtjs.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
cd my-app && npm install @supabase/supabase-js
```

----------------------------------------

TITLE: Querying Todos with Client Libraries
DESCRIPTION: Examples of querying todos using different Supabase client libraries.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/quickstart.mdx#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.from('todos').select()
```

LANGUAGE: dart
CODE:
```
final data = await supabase.from('todos').select('*');
```

LANGUAGE: python
CODE:
```
response = supabase.table('todos').select("*").execute()
```

LANGUAGE: swift
CODE:
```
let response = try await supabase.from("todos").select()
```

----------------------------------------

TITLE: Push Database Migrations (CLI)
DESCRIPTION: This command pushes the local database migrations to the remote Supabase database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_11

LANGUAGE: bash
CODE:
```
supabase db push
```

----------------------------------------

TITLE: Query Supabase Data in React (JavaScript)
DESCRIPTION: Imports React hooks and the Supabase client. Initializes the client using environment variables. Defines an async function `getInstruments` to fetch data from the 'instruments' table and updates the component state. Renders the fetched data as a list.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/reactjs.mdx#_snippet_3

LANGUAGE: js
CODE:
```
import { useEffect, useState } from "react";
import { createClient } from "@supabase/supabase-js";

const supabase = createClient(import.meta.env.VITE_SUPABASE_URL, import.meta.env.VITE_SUPABASE_ANON_KEY);

function App() {
  const [instruments, setInstruments] = useState([]);

  useEffect(() => {
    getInstruments();
  }, []);

  async function getInstruments() {
    const { data } = await supabase.from("instruments").select();
    setInstruments(data);
  }

  return (
    <ul>
      {instruments.map((instrument) => (
        <li key={instrument.name}>{instrument.name}</li>
      ))}
    </ul>
  );
}

export default App;
```

----------------------------------------

TITLE: Starting Supabase Local Development
DESCRIPTION: Initializes the local Supabase development environment, making the local dashboard accessible at `localhost:54323` for schema changes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#_snippet_4

LANGUAGE: bash
CODE:
```
supabase start
```

----------------------------------------

TITLE: Signing Up New User using Supabase in JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to sign up a new user with email and password using Supabase. Optionally, a redirect URL can be specified to direct the user after confirmation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_11

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project.supabase.co', 'your-anon-key')

// ---cut---
async function signUpNewUser() {
  const { data, error } = await supabase.auth.signUp({
    email: 'valid.email@supabase.io',
    password: 'example-password',
    options: {
      emailRedirectTo: 'https://example.com/welcome',
    },
  })
}
```

----------------------------------------

TITLE: Supabase Auth Server Actions - Next.js/TypeScript
DESCRIPTION: Implements Next.js server actions (`login`, `signup`) for handling user authentication with Supabase. It retrieves form data, calls Supabase Auth methods (`signInWithPassword`, `signUp`), and redirects the user based on the result.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#_snippet_6

LANGUAGE: TypeScript
CODE:
```
'use server'

import { revalidatePath } from 'next/cache'
import { redirect } from 'next/navigation'

import { createClient } from '@/utils/supabase/server'

export async function login(formData: FormData) {
  const supabase = await createClient()

  // type-casting here for convenience
  // in practice, you should validate your inputs
  const data = {
    email: formData.get('email') as string,
    password: formData.get('password') as string,
  }

  const { error } = await supabase.auth.signInWithPassword(data)

  if (error) {
    redirect('/error')
  }

  revalidatePath('/', 'layout')
  redirect('/')
}

export async function signup(formData: FormData) {
  const supabase = await createClient()

  // type-casting here for convenience
  // in practice, you should validate your inputs
  const data = {
    email: formData.get('email') as string,
    password: formData.get('password') as string,
  }

  const { error } = await supabase.auth.signUp(data)

  if (error) {
    redirect('/error')
  }

  revalidatePath('/', 'layout')
  redirect('/')
}
```

----------------------------------------

TITLE: Creating Related Tables with Foreign Keys
DESCRIPTION: Creates a categories table and adds a foreign key reference in the movies table to establish a one-to-many relationship.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create table categories (
  id bigint generated always as identity primary key,
  name text -- category name
);

alter table movies
  add column category_id bigint references categories;
```

----------------------------------------

TITLE: Using EXPLAIN for Query Plan Analysis in SQL
DESCRIPTION: This snippet demonstrates how to use the EXPLAIN keyword to view the query execution plan in Postgres, which is useful for understanding index usage and query optimization.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-postgres-chooses-which-index-to-use-_JHrf4.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
EXPLAIN <your query>
```

----------------------------------------

TITLE: Signing In with LinkedIn using Supabase JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to authenticate a user with LinkedIn OAuth using Supabase's `signInWithOAuth` function. It requires the `@supabase/supabase-js` library and a Supabase project URL with an anonymous key. Parameters include the `provider` set to `linkedin_oidc`, returning the user's authentication data upon success.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-linkedin.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('<your-project-url>', '<your-anon-key>')

// ---cut---
async function signInWithLinkedIn() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'linkedin_oidc',
  })
}
```

----------------------------------------

TITLE: Signing Out Users in Supabase JavaScript
DESCRIPTION: This JavaScript code demonstrates how to log out users and clear session data using the `signOut` method in a Supabase environment. The client must be pre-configured with project-specific details. It is a straightforward logout operation removing the authentication token from the session.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-gitlab.mdx#2025-04-21_snippet_3

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')

// ---cut---
async function signOut() {
  const { error } = await supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Installing Supabase CLI
DESCRIPTION: Install the Supabase Command Line Interface (CLI) globally or as a dev dependency using your preferred package manager (npm, yarn, pnpm) or Homebrew. The CLI is necessary to manage local Supabase projects and services.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development.mdx#_snippet_0

LANGUAGE: sh
CODE:
```
npm install supabase --save-dev
```

LANGUAGE: sh
CODE:
```
yarn add supabase --dev
```

LANGUAGE: sh
CODE:
```
pnpm add supabase --save-dev
```

LANGUAGE: sh
CODE:
```
brew install supabase/tap/supabase
```

----------------------------------------

TITLE: Initializing Supabase Client with AsyncStorage
DESCRIPTION: TypeScript code to configure the Supabase client with AsyncStorage for session persistence in a React Native app.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-expo-react-native.mdx#2025-04-22_snippet_2

LANGUAGE: typescript
CODE:
```
import AsyncStorage from '@react-native-async-storage/async-storage'
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = YOUR_REACT_NATIVE_SUPABASE_URL
const supabaseAnonKey = YOUR_REACT_NATIVE_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    storage: AsyncStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false,
  },
})
```

----------------------------------------

TITLE: Creating Authenticated Users RLS Policy
DESCRIPTION: SQL policy to allow access to the profiles table for authenticated users only.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/api-keys.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create policy "Allow access to authenticated users" on profiles to authenticated for
select
  using (true);
```

----------------------------------------

TITLE: Starting Supabase Locally
DESCRIPTION: This command starts Supabase locally using the Supabase CLI, which is required to run the development database for the project.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/caching/with-nextjs-13/README.md#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
supabase start
```

----------------------------------------

TITLE: Signing in with Magic Link using JavaScript
DESCRIPTION: Demonstrates signing in a user via a magic link using Supabase JavaScript client. Requires Supabase JS library and a valid Supabase URL and key. Inputs: a user's email. Automatically signs up an unsigned user unless specified otherwise.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('url', 'anonKey')

// ---cut---
async function signInWithEmail() {
  const { data, error } = await supabase.auth.signInWithOtp({
    email: 'valid.email@supabase.io',
    options: {
      // set this to false if you do not want the user to be automatically signed up
      shouldCreateUser: false,
      emailRedirectTo: 'https://example.com/welcome',
    },
  })
}
```

----------------------------------------

TITLE: Creating Database Schema Tables in Supabase
DESCRIPTION: Defines the core database tables for a content management application with user profiles, organizations, membership roles, posts, and comments. Includes foreign key relationships, constraints, and default values.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/pgtap-extended.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create table public.profiles (
  id uuid references auth.users(id) primary key,
  username text unique not null,
  full_name text,
  bio text,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table public.organizations (
  id bigint primary key generated always as identity,
  name text not null,
  slug text unique not null,
  plan_type text not null check (plan_type in ('free', 'pro', 'enterprise')),
  max_posts int not null default 5,
  created_at timestamptz default now()
);

create table public.org_members (
  org_id bigint references public.organizations(id) on delete cascade,
  user_id uuid references auth.users(id) on delete cascade,
  role text not null check (role in ('owner', 'admin', 'editor', 'viewer')),
  created_at timestamptz default now(),
  primary key (org_id, user_id)
);

create table public.posts (
  id bigint primary key generated always as identity,
  title text not null,
  content text not null,
  author_id uuid references public.profiles(id) not null,
  org_id bigint references public.organizations(id),
  status text not null check (status in ('draft', 'published', 'archived')),
  is_premium boolean default false,
  scheduled_for timestamptz,
  category text,
  view_count int default 0,
  published_at timestamptz,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table public.comments (
  id bigint primary key generated always as identity,
  post_id bigint references public.posts(id) on delete cascade,
  author_id uuid references public.profiles(id),
  content text not null,
  is_deleted boolean default false,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);
```

----------------------------------------

TITLE: Using Supabase in Next.js TypeScript Server Components
DESCRIPTION: TypeScript implementation for using Supabase in a Next.js Server Component. This approach provides type safety when fetching data server-side using the createServerComponentClient function with database type definitions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_19

LANGUAGE: tsx
CODE:
```
import { cookies } from 'next/headers'
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs'

import type { Database } from '@/lib/database.types'

export default async function ServerComponent() {
  const cookieStore = cookies()
  const supabase = createServerComponentClient<Database>({ cookies: () => cookieStore })
  const { data } = await supabase.from('todos').select()
  return <pre>{JSON.stringify(data, null, 2)}</pre>
}
```

----------------------------------------

TITLE: Supabase Auth Sign Up Example
DESCRIPTION: This JavaScript code snippet shows an example of how to use the `signUp` function from the Supabase auth client. It demonstrates how to sign up a user with an email and password, including setting the `emailRedirectTo` option.  The `emailRedirectTo` option specifies the URL where the user will be redirected after confirming their email.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/remix.mdx#2025-04-21_snippet_10

LANGUAGE: jsx
CODE:
```
supabaseClient.auth.signUp({
  email: 'valid.email@supabase.io',
  password: 'sup3rs3cur3',
  options: {
    emailRedirectTo: 'http://localhost:3000/auth/callback',
  },
})
```

----------------------------------------

TITLE: Initializing Supabase Client and Fetching Data in Swift
DESCRIPTION: This snippet demonstrates how to initialize a Supabase client in Swift and use it to fetch data from a 'countries' table. It shows the basic pattern for connecting to Supabase and executing a query that returns typed results.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-15-supabase-swift.mdx#2025-04-21_snippet_0

LANGUAGE: swift
CODE:
```
let url = URL(string: "...")!
let anonKey = "public-anon-key"
let client = SupabaseClient(supabaseURL: url, supabaseKey: anonKey)

struct Country: Decodable {
  let id: Int
  let name: String
}

let countries: [Country] = try await supabase.from("countries")
  .select()
  .execute()
  .value
```

----------------------------------------

TITLE: Creating Instruments Table and Inserting Sample Data in SQL
DESCRIPTION: This SQL snippet creates an 'instruments' table with an auto-incrementing ID and a name column. It then inserts sample data for violin, viola, and cello. Finally, it enables row-level security on the table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/quickstart_db_setup.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Create the table
create table instruments (
  id bigint primary key generated always as identity,
  name text not null
);
-- Insert some sample data into the table
insert into instruments (name)
values
  ('violin'),
  ('viola'),
  ('cello');

alter table instruments enable row level security;
```

----------------------------------------

TITLE: Creating Database Schema for User Profiles in Supabase
DESCRIPTION: SQL script to set up the complete backend structure for user profiles in Supabase, including table creation, row-level security policies, realtime publication setup, and storage bucket configuration for avatar images.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/vue3-user-management/README.md#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- Create a table for public "profiles"
create table profiles (
  id uuid references auth.users not null,
  updated_at timestamp with time zone,
  username text unique,
  avatar_url text,
  website text,

  primary key (id),
  unique(username),
  constraint username_length check (char_length(username) >= 3)
);

alter table profiles enable row level security;

create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );

create policy "Users can insert their own profile."
  on profiles for insert
  with check ( (select auth.uid()) = id );

create policy "Users can update own profile."
  on profiles for update
  using ( (select auth.uid()) = id );

-- Set up Realtime!
begin;
  drop publication if exists supabase_realtime;
  create publication supabase_realtime;
commit;
alter publication supabase_realtime add table profiles;

-- Set up Storage!
insert into storage.buckets (id, name)
values ('avatars', 'avatars');

create policy "Avatar images are publicly accessible."
  on storage.objects for select
  using ( bucket_id = 'avatars' );

create policy "Anyone can upload an avatar."
  on storage.objects for insert
  with check ( bucket_id = 'avatars' );
```

----------------------------------------

TITLE: Starting Local Supabase Stack
DESCRIPTION: Start the local Supabase services, including the database, authentication, and storage. This command spins up the necessary Docker containers to run the Supabase stack locally on your machine, allowing you to develop without a network connection.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development.mdx#_snippet_2

LANGUAGE: sh
CODE:
```
npx supabase start
```

LANGUAGE: sh
CODE:
```
yarn supabase start
```

LANGUAGE: sh
CODE:
```
pnpx supabase start
```

LANGUAGE: sh
CODE:
```
supabase start
```

----------------------------------------

TITLE: Initializing and Starting Supabase Locally with CLI
DESCRIPTION: Commands to initialize and start the Supabase stack on a local machine using the CLI. These commands set up the project and launch the entire Supabase infrastructure locally.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/cli.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase init
supabase start
```

----------------------------------------

TITLE: Install Supabase Client Library (Bash)
DESCRIPTION: Navigates into the newly created 'my-app' directory and installs the `@supabase/supabase-js` package using npm, adding it as a project dependency.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/reactjs.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
cd my-app && npm install @supabase/supabase-js
```

----------------------------------------

TITLE: Installing Supabase Package for Dart
DESCRIPTION: Command to install the Supabase package for regular Dart projects using pub package manager.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v1/installing.mdx#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
dart pub add supabase
```

----------------------------------------

TITLE: Initializing Supabase Client and Querying 'todos' Table in JavaScript
DESCRIPTION: JavaScript code to initialize the Supabase client using the API URL and anonymous key, then perform a SELECT query on the 'todos' table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/creating-routes.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// Initialize the JS client
import { createClient } from '@supabase/supabase-js'
const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY)

// Make a request
const { data: todos, error } = await supabase.from('todos').select('*')
```

----------------------------------------

TITLE: Creating and Configuring Profiles Table with Row Level Security in PostgreSQL
DESCRIPTION: This SQL snippet creates a 'profiles' table, sets up row level security policies, and creates a trigger for automatically creating profile entries for new users. It also configures storage buckets and policies for avatar images.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/nextjs-user-management/README.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Create a table for public profiles
create table profiles (
  id uuid references auth.users not null primary key,
  updated_at timestamp with time zone,
  username text unique,
  full_name text,
  avatar_url text,
  website text,

  constraint username_length check (char_length(username) >= 3)
);
-- Set up Row Level Security (RLS)
-- See https://supabase.com/docs/guides/auth/row-level-security for more details.
alter table profiles
  enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

create policy "Users can insert their own profile." on profiles
  for insert with check ((select auth.uid()) = id);

create policy "Users can update own profile." on profiles
  for update using ((select auth.uid()) = id);

-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.
-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.
create function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();

-- Set up Storage!
insert into storage.buckets (id, name)
  values ('avatars', 'avatars');

-- Set up access controls for storage.
-- See https://supabase.com/docs/guides/storage#policy-examples for more details.
create policy "Avatar images are publicly accessible." on storage.objects
  for select using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects
  for insert with check (bucket_id = 'avatars');

create policy "Anyone can update their own avatar." on storage.objects
  for update using ( auth.uid() = owner ) with check (bucket_id = 'avatars');
```

----------------------------------------

TITLE: Creating User Profiles Table with Row Level Security in SQL
DESCRIPTION: Creates a 'profiles' table with user details and implements Row Level Security policies for viewing, inserting, and updating profiles. Includes constraints and references to auth.users.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/user_management_quickstart_sql_template.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Create a table for public profiles
create table profiles (
  id uuid references auth.users not null primary key,
  updated_at timestamp with time zone,
  username text unique,
  full_name text,
  avatar_url text,
  website text,

  constraint username_length check (char_length(username) >= 3)
);
-- Set up Row Level Security (RLS)
-- See https://supabase.com/docs/guides/database/postgres/row-level-security for more details.
alter table profiles
  enable row level security;

create policy "Public profiles are viewable by everyone." on profiles
  for select using (true);

create policy "Users can insert their own profile." on profiles
  for insert with check ((select auth.uid()) = id);

create policy "Users can update own profile." on profiles
  for update using ((select auth.uid()) = id);
```

----------------------------------------

TITLE: Creating and Securing User Profiles with PostgreSQL Row Level Security in Supabase
DESCRIPTION: SQL script for setting up a profiles table with proper row-level security policies. It creates a table linked to auth.users, adds security policies for viewing, inserting, and updating profiles, configures Supabase Realtime, and sets up Storage for avatar images.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/sveltekit-user-management/README.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Create a table for Public Profiles
create table profiles (
  id uuid references auth.users not null,
  updated_at timestamp with time zone,
  username text unique,
  avatar_url text,
  website text,
  primary key (id),
  unique(username),
  constraint username_length check (char_length(username) >= 3)
);
alter table profiles enable row level security;
create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );
create policy "Users can insert their own profile."
  on profiles for insert
  with check ( (select auth.uid()) = id );
create policy "Users can update own profile."
  on profiles for update
  using ( (select auth.uid()) = id );
-- Set up Realtime!
begin;
  drop publication if exists supabase_realtime;
  create publication supabase_realtime;
commit;
alter publication supabase_realtime add table profiles;
-- Set up Storage!
insert into storage.buckets (id, name)
values ('avatars', 'avatars');
create policy "Avatar images are publicly accessible."
  on storage.objects for select
  using ( bucket_id = 'avatars' );
create policy "Anyone can upload an avatar."
  on storage.objects for insert
  with check ( bucket_id = 'avatars' );
```

----------------------------------------

TITLE: Initializing Supabase Client
DESCRIPTION: Creates a Supabase client instance using project URL and anonymous key for authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-11-using-supabase-replit.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
const supabase = createClient(
  'https://ajsstlnzcmdmzbtcgbbd.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
)
```

----------------------------------------

TITLE: Implementing Row Level Security Policy
DESCRIPTION: Creates a Row Level Security policy that restricts users to only insert their own messages using auth.uid() function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-02-27-cracking-postgres-interview.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
CREATE POLICY "Individuals can only write their own messages." ON messages FOR
    INSERT WITH CHECK ((select auth.uid()) = user_id);
```

----------------------------------------

TITLE: Next.js Middleware for Supabase Auth
DESCRIPTION: Implementation of Next.js middleware function for handling Supabase Auth token refreshing and authentication state, including path protection and proper request/response handling.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/nextjs-supabase-auth.md#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
import { createServerClient } from '@supabase/ssr'
import { NextResponse, type NextRequest } from 'next/server'

export async function middleware(request: NextRequest) {
    let supabaseResponse = NextResponse.next({
    request,
  })

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll()
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) => request.cookies.set(name, value))
          supabaseResponse = NextResponse.next({
            request,
          })
          cookiesToSet.forEach(({ name, value, options }) =>
            supabaseResponse.cookies.set(name, value, options)
          )
        },
      },
    }
  )

  // Do not run code between createServerClient and
  // supabase.auth.getUser(). A simple mistake could make it very hard to debug
  // issues with users being randomly logged out.

  // IMPORTANT: DO NOT REMOVE auth.getUser()

  const {
    data: { user },
  } = await supabase.auth.getUser()

  if (
    !user &&
    !request.nextUrl.pathname.startsWith('/login') &&
    !request.nextUrl.pathname.startsWith('/auth')
  ) {
    // no user, potentially respond by redirecting the user to the login page
    const url = request.nextUrl.clone()
    url.pathname = '/login'
    return NextResponse.redirect(url)
  }

  // IMPORTANT: You *must* return the supabaseResponse object as it is.
  // If you're creating a new response object with NextResponse.next() make sure to:
  // 1. Pass the request in it, like so:
  //    const myNewResponse = NextResponse.next({ request })
  // 2. Copy over the cookies, like so:
  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())
  // 3. Change the myNewResponse object to fit your needs, but avoid changing
  //    the cookies!
  // 4. Finally:
  //    return myNewResponse
  // If this is not done, you may be causing the browser and server to go out
  // of sync and terminate the user's session prematurely!

  return supabaseResponse
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * Feel free to modify this pattern to include more paths.
     */
    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
}
```

----------------------------------------

TITLE: Creating a Supabase Client with JavaScript
DESCRIPTION: This JavaScript code snippet sets up the Supabase client by using environment variables and injects it into the SvelteKit server event for authentication. It includes safe session retrieval logic by validating the JWT via `getUser`.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_2

LANGUAGE: JavaScript
CODE:
```
// src/hooks.server.js
import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public'
import { createSupabaseServerClient } from '@supabase/auth-helpers-sveltekit'

export const handle = async ({ event, resolve }) => {
  event.locals.supabase = createSupabaseServerClient({
    supabaseUrl: PUBLIC_SUPABASE_URL,
    supabaseKey: PUBLIC_SUPABASE_ANON_KEY,
    event,
  })

  /**
   * Unlike `supabase.auth.getSession`, which is unsafe on the server because it
   * doesn't validate the JWT, this function validates the JWT by first calling
   * `getUser` and aborts early if the JWT signature is invalid.
   */
  event.locals.safeGetSession = async () => {
    const {
      data: { user },
      error,
    } = await supabase.auth.getUser()
    if (error) {
      return { session: null, user: null }
    }

    const {
      data: { session },
    } = await event.locals.supabase.auth.getSession()
    return { session, user }
  }

  return resolve(event, {
    filterSerializedResponseHeaders(name) {
      return name === 'content-range' || name === 'x-supabase-api-version'
    },
  })
}
```

----------------------------------------

TITLE: Setting Up Supabase Environment Variables
DESCRIPTION: Configuration of environment variables in .env.local file to connect the Next.js application to Supabase by setting the Supabase URL and anonymous key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/nextjs.mdx#2025-04-21_snippet_1

LANGUAGE: text
CODE:
```
NEXT_PUBLIC_SUPABASE_URL=<SUBSTITUTE_SUPABASE_URL>
NEXT_PUBLIC_SUPABASE_ANON_KEY=<SUBSTITUTE_SUPABASE_ANON_KEY>
```

----------------------------------------

TITLE: Setting Up Notes Table in SQL
DESCRIPTION: SQL script to create a notes table with row-level security and appropriate permissions for authenticated users.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_15

LANGUAGE: sql
CODE:
```
-- Run this SQL against your database to create a `notes` table.

create table notes (
  id bigint primary key generated always as identity,
  created_at timestamp with time zone not null default now(),
  user_id uuid references auth.users on delete cascade not null default auth.uid(),
  note text not null
);

alter table notes enable row level security;

revoke all on table notes from authenticated;
revoke all on table notes from anon;

grant all (note) on table notes to authenticated;
grant select (id) on table notes to authenticated;
grant delete on table notes to authenticated;

create policy "Users can access and modify their own notes"
on notes
for all
to authenticated
using ((select auth.uid()) = user_id);
```

----------------------------------------

TITLE: Creating Login Route Handler in TypeScript
DESCRIPTION: This TypeScript code sample demonstrates creating a server-side route handler for user login in a Next.js application utilizing Supabase. It handles a POST request by reading form data, authenticating via a type-safe Supabase client, and redirecting the user afterward. The snippet relies on @supabase/auth-helpers-nextjs and next/headers, with type definitions enhancing the development process.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_11

LANGUAGE: TypeScript
CODE:
```
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { NextResponse } from 'next/server'

import type { Database } from '@/lib/database.types'

export async function POST(request: Request) {
  const requestUrl = new URL(request.url)
  const formData = await request.formData()
  const email = String(formData.get('email'))
  const password = String(formData.get('password'))
  const cookieStore = cookies()
  const supabase = createRouteHandlerClient<Database>({ cookies: () => cookieStore })

  await supabase.auth.signInWithPassword({
    email,
    password,
  })

  return NextResponse.redirect(requestUrl.origin, {
    status: 301,
  })
}

```

----------------------------------------

TITLE: Using Realtime Channels in Supabase.js v2
DESCRIPTION: Examples of using the new channel() method for Realtime functionality in Supabase.js v2, including presence and postgres changes subscriptions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/release-notes.mdx#2025-04-21_snippet_10

LANGUAGE: ts
CODE:
```
supabase
  .channel('any_string_you_want')
  .on('presence', { event: 'track' }, (payload) => {
    console.log(payload)
  })
  .subscribe()

supabase
  .channel('any_string_you_want')
  .on(
    'postgres_changes',
    {
      event: 'INSERT',
      schema: 'public',
      table: 'movies',
    },
    (payload) => {
      console.log(payload)
    }
  )
  .subscribe()
```

----------------------------------------

TITLE: Installing Supabase via Deno
DESCRIPTION: Command to install Supabase using Deno's 'add' command. This adds the Supabase dependency to your Deno project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-16-supabase-js-on-jsr.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
deno add @supabase/supabase-js
```

----------------------------------------

TITLE: Configuring Supabase Client with Custom Storage (Cookies) in Typescript
DESCRIPTION: This code snippet demonstrates how to override the default storage mechanism of the Supabase client to use a custom storage object, typically for storing tokens in cookies on the server-side. It uses the `createClient` function from `@supabase/supabase-js` and configures the `auth.storage` option with a custom object that implements `getItem`, `setItem`, and `removeItem` methods, mimicking the `Storage` interface. This is suitable for server-side applications where HTTP-only cookies are desired.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/sessions.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { createClient } from '@supabase/supabase-js'

const supabase = createClient('SUPABASE_URL', 'SUPABASE_ANON_KEY', {
  auth: {
    storage: {
      getItem: () => {
        return Promise.resolve('FETCHED_COOKIE')
      },
      setItem: () => {},
      removeItem: () => {},
    },
  },
})
```

----------------------------------------

TITLE: Creating SQL schema for user profiles with row level security
DESCRIPTION: SQL script that sets up the profiles table with proper references to auth.users, constraints, and row level security policies to control access based on user authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/expo-user-management/README.md#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
-- Create a table for Public Profiles
create table
  profiles (
    id uuid references auth.users not null,
    updated_at timestamp
    with
      time zone,
      username text unique,
      avatar_url text,
      website text,
      primary key (id),
      unique (username),
      constraint username_length check (char_length(username) >= 3)
  );

alter table
  profiles enable row level security;

create policy "Public profiles are viewable by everyone." on profiles for
select
  using (true);

create policy "Users can insert their own profile." on profiles for insert
with
  check ((select auth.uid()) = id);

create policy "Users can update own profile." on profiles for
update
  using ((select auth.uid()) = id);

-- Set up Realtime!
begin;

drop
  publication if exists supabase_realtime;

create publication supabase_realtime;

commit;

alter
  publication supabase_realtime add table profiles;

-- Set up Storage!
insert into
  storage.buckets (id, name)
values
  ('avatars', 'avatars');

create policy "Avatar images are publicly accessible." on storage.objects for
select
  using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects for insert
with
  check (bucket_id = 'avatars');
```

----------------------------------------

TITLE: Create Supabase Server-Side Props Client (Pages Router) - TypeScript
DESCRIPTION: Defines a utility function `createClient` for use within Next.js `getServerSideProps`. It creates a Supabase client instance configured to read cookies from the incoming request and set cookies on the outgoing response, enabling session management in server-side rendering contexts.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#_snippet_12

LANGUAGE: ts
CODE:
```
import { type GetServerSidePropsContext } from 'next'
import { createServerClient, serializeCookieHeader } from '@supabase/ssr'

export function createClient({ req, res }: GetServerSidePropsContext) {
  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return Object.keys(req.cookies).map((name) => ({ name, value: req.cookies[name] || '' }))
        },
        setAll(cookiesToSet) {
          res.setHeader(
            'Set-Cookie',
            cookiesToSet.map(({ name, value, options }) =>
              serializeCookieHeader(name, value, options)
            )
          )
        }
      }
    }
  )

  return supabase
}
```

----------------------------------------

TITLE: Deploying Edge Function
DESCRIPTION: Command to deploy the Edge Function to Supabase
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/routing.mdx#2025-04-21_snippet_5

LANGUAGE: bash
CODE:
```
supabase functions deploy hello-world
```

----------------------------------------

TITLE: Implementing Auth Callback Route Handler in TypeScript
DESCRIPTION: TypeScript version of the route handler for processing authentication code exchange with type safety.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { NextResponse } from 'next/server'

import type { NextRequest } from 'next/server'
import type { Database } from '@/lib/database.types'

export async function GET(request: NextRequest) {
  const requestUrl = new URL(request.url)
  const code = requestUrl.searchParams.get('code')

  if (code) {
    const cookieStore = await cookies()
    const supabase = createRouteHandlerClient<Database>({ cookies: () => cookieStore })
    await supabase.auth.exchangeCodeForSession(code)
  }

  return NextResponse.redirect(requestUrl.origin)
}
```

----------------------------------------

TITLE: Creating Storage Policy for Public Uploads in SQL
DESCRIPTION: SQL statement to create a storage policy that allows public uploads to a specific bucket. This policy is required to permit uploads from the client side.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/storage/resumable-upload-uppy/README.md#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
CREATE POLICY "allow uploads" ON storage.objects FOR INSERT TO public WITH CHECK (bucket_id = 'your-bucket-name');
```

----------------------------------------

TITLE: Creating and seeding the Supabase Vector collection
DESCRIPTION: Python function to initialize a vector collection in Supabase, generate embeddings for sample images, and store them in the database with metadata.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-03-26-semantic-image-search-amazon-bedrock.mdx#2025-04-22_snippet_7

LANGUAGE: python
CODE:
```
def seed():
    # create vector store client
    vx = vecs.create_client(DB_CONNECTION)

    # get or create a collection of vectors with 1024 dimensions
    images = vx.get_or_create_collection(name="image_vectors", dimension=1024)

    # Generate image embeddings with Amazon Titan Model
    img_emb1 = encode_image('./images/one.jpg')
    img_emb2 = encode_image('./images/two.jpg')
    img_emb3 = encode_image('./images/three.jpg')
    img_emb4 = encode_image('./images/four.jpg')

    # add records to the *images* collection
    images.upsert(
        records=[
            (
                "one.jpg",       # the vector's identifier
                img_emb1,        # the vector. list or np.array
                {"type": "jpg"}  # associated  metadata
            ), (
                "two.jpg",
                img_emb2,
                {"type": "jpg"}
            ), (
                "three.jpg",
                img_emb3,
                {"type": "jpg"}
            ), (
                "four.jpg",
                img_emb4,
                {"type": "jpg"}
            )
        ]
    )
    print("Inserted images")

    # index the collection for fast search performance
    images.create_index()
    print("Created index")
```

----------------------------------------

TITLE: Creating a POST Route Handler with Supabase in Next.js (JavaScript)
DESCRIPTION: Implements a Next.js route handler that creates a Supabase client to insert a todo item. It uses createRouteHandlerClient to initialize Supabase with cookie-based authentication, processes the POST request data, and returns the inserted record.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_22

LANGUAGE: jsx
CODE:
```
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { NextResponse } from 'next/server'
import { cookies } from 'next/headers'

export async function POST(request) {
  const { title } = await request.json()
  const cookieStore = cookies()
  const supabase = createRouteHandlerClient({ cookies: () => cookieStore })
  const { data } = await supabase.from('todos').insert({ title }).select()
  return NextResponse.json(data)
}
```

----------------------------------------

TITLE: Listening to Database Changes with New Channel Interface in TypeScript
DESCRIPTION: Shows the new method for listening to PostgreSQL database changes using the channel() interface in supabase-js v2, compared to the old method.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-16-supabase-js-v2.mdx#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
// v2
supabase
  .channel('any_string_you_want')
  .on(
    'postgres_changes',
    {
      event: 'INSERT',
      schema: 'public',
      table: 'movies',
    },
    (payload) => {
      console.log(payload)
    }
  )
  .subscribe()

// v1
supabase
  .from('movies')
  .on('INSERT', (payload) => {
    console.log(payload)
  })
  .subscribe()
```

----------------------------------------

TITLE: Generate migration file from schema diff (Bash)
DESCRIPTION: Use the Supabase CLI to compare the declared schema files (`supabase/schemas`) against the current database state and generate a versioned migration file in the `supabase/migrations` directory. The `-f` flag names the generated file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
supabase db diff -f create_employees_table
```

----------------------------------------

TITLE: Initializing Supabase Realtime Channel with JavaScript
DESCRIPTION: This snippet demonstrates how to initialize a Supabase Realtime client and create a channel with a specific topic.  The channel object can then be used to send and receive messages. The code imports the `createClient` function from `@supabase/supabase-js` to establish a connection with your Supabase project using the project URL and anon key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/concepts.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'

const supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')

const roomOne = supabase.channel('room-one') // set your topic here
```

----------------------------------------

TITLE: Query Data in Nuxt App (Vue)
DESCRIPTION: Sets up the Supabase client in `app.vue` using environment variables, fetches data from the 'instruments' table asynchronously, and displays the instrument names in a list upon component mount.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/nuxtjs.mdx#_snippet_3

LANGUAGE: vue
CODE:
```
<script setup>
import { createClient } from '@supabase/supabase-js'
const config = useRuntimeConfig()
const supabase = createClient(config.public.supabaseUrl, config.public.supabaseAnonKey)
const instruments = ref([])

async function getInstruments() {
  const { data } = await supabase.from('instruments').select()
  instruments.value = data
}

onMounted(() => {
  getInstruments()
})
</script>

<template>
  <ul>
    <li v-for="instrument in instruments" :key="instrument.id">{{ instrument.name }}</li>
  </ul>
</template>
```

----------------------------------------

TITLE: Importing and initializing Supabase client
DESCRIPTION: JavaScript code to import the Supabase client from the JSR package and create a Supabase instance. This demonstrates how to set up and use Supabase in a JavaScript file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-16-supabase-js-on-jsr.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'

const supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key')

console.log('Supabase Instance: ', supabase)
```

----------------------------------------

TITLE: Implementing Row Level Security Policies in Supabase
DESCRIPTION: Sets up Row Level Security for the database schema including helper functions for role checking and post limit verification. Defines policies for profiles, organizations, org members, posts, and comments based on user roles and membership status.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/testing/pgtap-extended.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
-- Create a private schema to store all security definer functions utils
-- As such functions should never be in a API exposed schema
create schema if not exists private;
-- Helper function for role checks
create or replace function private.get_user_org_role(org_id bigint, user_id uuid)
returns text
set search_path = ''
as $$
  select role from public.org_members
  where org_id = $1 and user_id = $2;
-- Note the use of security definer to avoid RLS checking recursion issue
-- see: https://supabase.com/docs/guides/database/postgres/row-level-security#use-security-definer-functions
$$ language sql security definer;
-- Helper utils to check if an org is below the max post limit
create or replace function private.can_add_post(org_id bigint)
returns boolean
set search_path = ''
as $$
  select (select count(*)
          from public.posts p
          where p.org_id = $1) < o.max_posts
  from public.organizations o
  where o.id = $1
$$ language sql security definer;


-- Enable RLS for all tables
alter table public.profiles enable row level security;
alter table public.organizations enable row level security;
alter table public.org_members enable row level security;
alter table public.posts enable row level security;
alter table public.comments enable row level security;

-- Profiles policies
create policy "Public profiles are viewable by everyone"
  on public.profiles for select using (true);

create policy "Users can insert their own profile"
  on public.profiles for insert with check ((select auth.uid()) = id);

create policy "Users can update their own profile"
  on public.profiles for update using ((select auth.uid()) = id)
  with check ((select auth.uid()) = id);

-- Organizations policies
create policy "Public org info visible to all"
  on public.organizations for select using (true);

create policy "Org management restricted to owners"
  on public.organizations for all using (
    private.get_user_org_role(id, (select auth.uid())) = 'owner'
  );

-- Org Members policies
create policy "Members visible to org members"
  on public.org_members for select using (
    private.get_user_org_role(org_id, (select auth.uid())) is not null
  );

create policy "Member management restricted to admins and owners"
  on public.org_members for all using (
    private.get_user_org_role(org_id, (select auth.uid())) in ('owner', 'admin')
  );

-- Posts policies
create policy "Complex post visibility"
  on public.posts for select using (
    -- Published non-premium posts are visible to all
    (status = 'published' and not is_premium)
    or
    -- Premium posts visible to org members only
    (status = 'published' and is_premium and
    private.get_user_org_role(org_id, (select auth.uid())) is not null)
    or
    -- All posts visible to editors and above
    private.get_user_org_role(org_id, (select auth.uid())) in ('owner', 'admin', 'editor')
  );

create policy "Post creation rules"
  on public.posts for insert with check (
    -- Must be org member with appropriate role
    private.get_user_org_role(org_id, (select auth.uid())) in ('owner', 'admin', 'editor')
    and
    -- Check org post limits for free plans
    (
      (select o.plan_type != 'free'
      from organizations o
      where o.id = org_id)
      or
      (select private.can_add_post(org_id))
    )
  );

create policy "Post update rules"
  on public.posts for update using (
    exists (
      select 1
      where
        -- Editors can update non-published posts
        (private.get_user_org_role(org_id, (select auth.uid())) = 'editor' and status != 'published')
        or
        -- Admins and owners can update any post
        private.get_user_org_role(org_id, (select auth.uid())) in ('owner', 'admin')
    )
  );

-- Comments policies
create policy "Comments on published posts are viewable by everyone"
  on public.comments for select using (
    exists (
      select 1 from public.posts
      where id = post_id
      and status = 'published'
    )
    and not is_deleted
  );

create policy "Authenticated users can create comments"
  on public.comments for insert with check ((select auth.uid()) = author_id);

create policy "Users can update their own comments"
  on public.comments for update using (author_id = (select auth.uid()));
```

----------------------------------------

TITLE: Updating user data for logged-in user in TypeScript
DESCRIPTION: Example of how to update the method to update user data for a logged-in user in supabase-js v2. The new version uses updateUser.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
const {
  data: { user },
  error,
} = await supabase.auth.updateUser({ attributes })
```

----------------------------------------

TITLE: Resetting Local Database with Migrations
DESCRIPTION: Resets the local database and reapplies all migration files, including any manual edits, to reflect the latest schema changes in the local environment.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/branching.mdx#_snippet_6

LANGUAGE: bash
CODE:
```
supabase db reset
```

----------------------------------------

TITLE: Initialize Supabase Server Client (API Routes)
DESCRIPTION: Creates a Supabase client instance tailored for Next.js API routes. It handles reading and setting cookies from the incoming request and outgoing response for server-side authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#_snippet_16

LANGUAGE: TypeScript
CODE:
```
import { createServerClient, serializeCookieHeader } from '@supabase/ssr'
import { type NextApiRequest, type NextApiResponse } from 'next'

export default function createClient(req: NextApiRequest, res: NextApiResponse) {
  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return Object.keys(req.cookies).map((name) => ({ name, value: req.cookies[name] || '' }))
        },
        setAll(cookiesToSet) {
          res.setHeader(
            'Set-Cookie',
            cookiesToSet.map(({ name, value, options }) =>
              serializeCookieHeader(name, value, options)
            )
          )
        }
      }
    }
  )

  return supabase
}
```

----------------------------------------

TITLE: Supabase Environment Variables Configuration
DESCRIPTION: Environment variables setup for Supabase URL and anonymous key in the .env.local file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
NEXT_PUBLIC_SUPABASE_URL=your-supabase-url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-supabase-anon-key
```

----------------------------------------

TITLE: Creating a PostgreSQL Function for RPC
DESCRIPTION: SQL code to create a database function that can be called via RPC. This function accepts an array of UUIDs, logs the array size, and returns the array.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/fixing-520-errors-in-the-database-rest-api-Ur5-B2.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create or replace function example(id uuid[])
returns uuid[]
language plpgsql
as $$
begin
 raise log 'the function example was called with an array size of: %', (select array_length(id, 1));
 return id;
end;
$$;
```

----------------------------------------

TITLE: Implementing Account Form Component in Next.js with Supabase
DESCRIPTION: A React component for managing user profile data using Supabase. It retrieves profile information from the 'profiles' table and allows users to update their full name, username, website, and avatar URL. The component also includes form validation and error handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_13

LANGUAGE: jsx
CODE:
```
'use client'
import { useCallback, useEffect, useState } from 'react'
import { createClient } from '@/utils/supabase/client'

export default function AccountForm({ user }) {
  const supabase = createClient()
  const [loading, setLoading] = useState(true)
  const [fullname, setFullname] = useState(null)
  const [username, setUsername] = useState(null)
  const [website, setWebsite] = useState(null)
  const [avatar_url, setAvatarUrl] = useState(null)

  const getProfile = useCallback(async () => {
    try {
      setLoading(true)

      const { data, error, status } = await supabase
        .from('profiles')
        .select(`full_name, username, website, avatar_url`)
        .eq('id', user?.id)
        .single()

      if (error && status !== 406) {
        throw error
      }

      if (data) {
        setFullname(data.full_name)
        setUsername(data.username)
        setWebsite(data.website)
        setAvatarUrl(data.avatar_url)
      }
    } catch (error) {
      alert('Error loading user data!')
    } finally {
      setLoading(false)
    }
  }, [user, supabase])

  useEffect(() => {
    getProfile()
  }, [user, getProfile])

  async function updateProfile({ username, website, avatar_url }) {
    try {
      setLoading(true)

      const { error } = await supabase.from('profiles').upsert({
        id: user?.id,
        full_name: fullname,
        username,
        website,
        avatar_url,
        updated_at: new Date().toISOString(),
      })
      if (error) throw error
      alert('Profile updated!')
    } catch (error) {
      alert('Error updating the data!')
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="form-widget">
      <div>
        <label htmlFor="email">Email</label>
        <input id="email" type="text" value={user?.email} disabled />
      </div>
      <div>
        <label htmlFor="fullName">Full Name</label>
        <input
          id="fullName"
          type="text"
          value={fullname || ''}
          onChange={(e) => setFullname(e.target.value)}
        />
      </div>
      <div>
        <label htmlFor="username">Username</label>
        <input
          id="username"
          type="text"
          value={username || ''}
          onChange={(e) => setUsername(e.target.value)}
        />
      </div>
      <div>
        <label htmlFor="website">Website</label>
        <input
          id="website"
          type="url"
          value={website || ''}
          onChange={(e) => setWebsite(e.target.value)}
        />
      </div>

      <div>
        <button
          className="button primary block"
          onClick={() => updateProfile({ fullname, username, website, avatar_url })}
          disabled={loading}
        >
          {loading ? 'Loading ...' : 'Update'}
        </button>
      </div>

      <div>
        <form action="/auth/signout" method="post">
          <button className="button block" type="submit">
            Sign out
          </button>
        </form>
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Implementing Login and Signup Actions with Supabase in Next.js
DESCRIPTION: This code snippet shows the implementation of login and signup actions using Supabase in a Next.js application. It handles form submission, authenticates users, and manages redirects based on the authentication result.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_10

LANGUAGE: js
CODE:
```
'use server'

import { revalidatePath } from 'next/cache'
import { redirect } from 'next/navigation'

import { createClient } from '@/utils/supabase/server'

export async function login(formData) {
  const supabase = await createClient()

  // type-casting here for convenience
  // in practice, you should validate your inputs
  const data = {
    email: formData.get('email'),
    password: formData.get('password'),
  }

  const { error } = await supabase.auth.signInWithPassword(data)

  if (error) {
    redirect('/error')
  }

  revalidatePath('/', 'layout')
  redirect('/account')
}

export async function signup(formData) {
  const supabase = await createClient()

  const data = {
    email: formData.get('email'),
    password: formData.get('password'),
  }

  const { error } = await supabase.auth.signUp(data)

  if (error) {
    redirect('/error')
  }

  revalidatePath('/', 'layout')
  redirect('/account')
}
```

----------------------------------------

TITLE: Protected Route Implementation with Supabase Auth
DESCRIPTION: Implementation of protected routes using Supabase authentication, including server-side data fetching with Row Level Security (RLS).
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_30

LANGUAGE: svelte
CODE:
```
<script lang="ts" context="module">
  import { supabaseServerClient, withPageAuth } from '@supabase/auth-helpers-sveltekit'
  import type { Load } from './__types/protected-page'

  export const load: Load = async ({ session }) =>
    withPageAuth(
      {
        redirectTo: '/',
        user: session.user,
      },
      async () => {
        const { data } = await supabaseServerClient(session.accessToken).from('test').select('*')
        return { props: { data, user: session.user } }
      }
    )
</script>

<script>
  export let data
  export let user
</script>

<div>Protected content for {user.email}</div>
<p>server-side fetched data with RLS:</p>
<pre>{JSON.stringify(data, null, 2)}</pre>
<p>user:</p>
<pre>{JSON.stringify(user, null, 2)}</pre>
```

LANGUAGE: typescript
CODE:
```
import { withAuth } from '@supabase/auth-helpers-sveltekit'
import { redirect } from '@sveltejs/kit'
import type { PageLoad } from './$types'

export const load: PageLoad = withAuth(async ({ session, getSupabaseClient }) => {
  if (!session.user) {
    redirect(303, '/')
  }

  const { data: tableData } = await getSupabaseClient().from('test').select('*')
  return { tableData, user: session.user }
})
```

----------------------------------------

TITLE: Installing Supabase JavaScript Client
DESCRIPTION: Command to install the Supabase JavaScript client library as a dependency.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-solidjs.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @supabase/supabase-js
```

----------------------------------------

TITLE: Installing Supabase JavaScript Client
DESCRIPTION: Command to install the Supabase JavaScript client library as a dependency for the Ionic Vue project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-vue.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @supabase/supabase-js
```

----------------------------------------

TITLE: Integrating OpenAI API in Edge Function
DESCRIPTION: This code snippet shows how to use the OpenAI API within an Edge Function. It sets up a Deno server, initializes an OpenAI client with an API key, and creates a chat completion using the GPT-3.5-turbo model.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-12-edge-functions-faster-smaller.mdx#2025-04-21_snippet_1

LANGUAGE: jsx
CODE:
```
import OpenAI from 'npm:openai@4.57.3'

const client = new OpenAI({
  apiKey: Deno.env.get('OPEN_AI_KEY'),
})

Deno.serve(async (req) => {
  const { query } = await req.json()

  const chatCompletion = await client.chat.completions.create({
    messages: [{ role: 'user', content: 'Say this is a test' }],
    model: 'gpt-3.5-turbo',
  })

  return new Response(chatCompletion)
})
```

----------------------------------------

TITLE: Implementing Advanced Search with OpenAI Embeddings and GPT-3 in Supabase Edge Function
DESCRIPTION: This Edge Function extends the simple search by using OpenAI embeddings to find relevant documents, then using GPT-3 to generate a comprehensive answer based on the matched documents. It includes token counting to manage context size within OpenAI's limits.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-03-openai-embeddings-postgres-vector.mdx#2025-04-21_snippet_6

LANGUAGE: tsx
CODE:
```
import { serve } from 'https://deno.land/std@0.170.0/http/server.ts'
import 'https://deno.land/x/xhr@0.2.1/mod.ts'
import { createClient } from 'jsr:@supabase/supabase-js@2'
import GPT3Tokenizer from 'https://esm.sh/gpt3-tokenizer@1.1.5'
import { Configuration, OpenAIApi } from 'https://esm.sh/openai@3.1.0'
import { oneLine, stripIndent } from 'https://esm.sh/common-tags@1.8.2'
import { supabaseClient } from './lib/supabase'

export const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

serve(async (req) => {
  // Handle CORS
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  // Search query is passed in request payload
  const { query } = await req.json()

  // OpenAI recommends replacing newlines with spaces for best results
  const input = query.replace(/\n/g, ' ')

  const configuration = new Configuration({ apiKey: '<YOUR_OPENAI_API_KEY>' })
  const openai = new OpenAIApi(configuration)

  // Generate a one-time embedding for the query itself
  const embeddingResponse = await openai.createEmbedding({
    model: 'text-embedding-ada-002',
    input,
  })

  const [{ embedding }] = embeddingResponse.data.data

  // Fetching whole documents for this simple example.
  //
  // Ideally for context injection, documents are chunked into
  // smaller sections at earlier pre-processing/embedding step.
  const { data: documents } = await supabaseClient.rpc('match_documents', {
    query_embedding: embedding,
    match_threshold: 0.78, // Choose an appropriate threshold for your data
    match_count: 10, // Choose the number of matches
  })

  const tokenizer = new GPT3Tokenizer({ type: 'gpt3' })
  let tokenCount = 0
  let contextText = ''

  // Concat matched documents
  for (let i = 0; i < documents.length; i++) {
    const document = documents[i]
    const content = document.content
    const encoded = tokenizer.encode(content)
    tokenCount += encoded.text.length

    // Limit context to max 1500 tokens (configurable)
    if (tokenCount > 1500) {
      break
    }

    contextText += `${content.trim()}\n---\n`
  }

  const prompt = stripIndent`${oneLine`
    You are a very enthusiastic Supabase representative who loves
    to help people! Given the following sections from the Supabase
    documentation, answer the question using only that information,
    outputted in markdown format. If you are unsure and the answer
    is not explicitly written in the documentation, say
    "Sorry, I don't know how to help with that."`}

    Context sections:
    ${contextText}

    Question: """
    ${query}
    """

    Answer as markdown (including related code snippets if available):
  `

  // In production we should handle possible errors
  const completionResponse = await openai.createCompletion({
    model: 'text-davinci-003',
    prompt,
    max_tokens: 512, // Choose the max allowed tokens in completion
    temperature: 0, // Set to 0 for deterministic results
  })

  const {
    id,
    choices: [{ text }],
  } = completionResponse.data

  return new Response(JSON.stringify({ id, text }), {
    headers: { ...corsHeaders, 'Content-Type': 'application/json' },
  })
})
```

----------------------------------------

TITLE: Generating UUIDv4 in PostgreSQL
DESCRIPTION: Demonstrates how to generate a version 4 UUID in PostgreSQL using the gen_random_uuid() function. UUIDv4 uses 122 bits of randomness, making it highly unlikely to produce collisions and ideal for globally unique identifiers.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-09-08-choosing-a-postgres-primary-key.mdx#2025-04-21_snippet_8

LANGUAGE: sql
CODE:
```
SELECT gen_random_uuid();

           uuid_generate_v4
--------------------------------------
 6ca93dde-81d4-4ea0-bfe1-92ecb4d81ee4

(1 row)
```

----------------------------------------

TITLE: Setting Up Row Level Security Policies in Supabase
DESCRIPTION: SQL script to enable Row Level Security on tables and define policies for user access. It allows unauthenticated users to read group data while restricting other actions to authenticated users only.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-08-authentication-in-ionic-angular.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- Secure tables
alter table users enable row level security;
alter table groups enable row level security;
alter table messages enable row level security;

-- User Policies
create policy "Users can read the user email." on users
  for select using (true);

-- Group Policies
create policy "Groups are viewable by everyone." on groups
  for select using (true);

create policy "Authenticated users can create groups." on groups for
  insert to authenticated with check (true);

create policy "The owner can delete a group." on groups for
    delete using ((select auth.uid()) = creator);

-- Message Policies
create policy "Authenticated users can read messages." on messages
  for select to authenticated using (true);

create policy "Authenticated users can create messages." on messages
  for insert to authenticated with check (true);
```

----------------------------------------

TITLE: Implementing Authentication Component
DESCRIPTION: React component that handles user authentication using Supabase magic link login.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-react.mdx#2025-04-21_snippet_3

LANGUAGE: jsx
CODE:
```
import { useState } from 'react'
import { supabase } from './supabaseClient'

export default function Auth() {
  const [loading, setLoading] = useState(false)
  const [email, setEmail] = useState('')

  const handleLogin = async (event) => {
    event.preventDefault()

    setLoading(true)
    const { error } = await supabase.auth.signInWithOtp({ email })

    if (error) {
      alert(error.error_description || error.message)
    } else {
      alert('Check your email for the login link!')
    }
    setLoading(false)
  }

  return (
    <div className="row flex flex-center">
      <div className="col-6 form-widget">
        <h1 className="header">Supabase + React</h1>
        <p className="description">Sign in via magic link with your email below</p>
        <form className="form-widget" onSubmit={handleLogin}>
          <div>
            <input
              className="inputField"
              type="email"
              placeholder="Your email"
              value={email}
              required={true}
              onChange={(e) => setEmail(e.target.value)}
            />
          </div>
          <div>
            <button className={'button block'} disabled={loading}>
              {loading ? <span>Loading</span> : <span>Send magic link</span>}
            </button>
          </div>
        </form>
      </div>
    </div>
  )
```

----------------------------------------

TITLE: Creating Todos Table in SQL
DESCRIPTION: Creates a new table called 'todos' with id and task columns to store tasks.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/quickstart.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table todos (
  id serial primary key,
  task text
);
```

----------------------------------------

TITLE: Export Postgres Database using pg_dump
DESCRIPTION: This command exports a Postgres database to a file (dump.sql) using pg_dump. The command includes options to clean existing objects, handle identifier quoting, exclude ownership information and privileges, and connects to the database using host, user, and database credentials. The output is redirected to a dump file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/postgres.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
"pg_dump --clean --if-exists --quote-all-identifiers \
-h $HOST -U $USER -d $DATABASE \
--no-owner --no-privileges > dump.sql"
```

----------------------------------------

TITLE: Making a Supabase API request with Service Role Key
DESCRIPTION: This bash code snippet demonstrates how to make a request to a Supabase database using the `service role key`.  The `service role key` must be passed as both the `apikey` and the `Authorization` header. The authorization header has a Bearer token.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/jwts.mdx#2025-04-21_snippet_11

LANGUAGE: bash
CODE:
```
curl "$YOUR_PROJECT_URL/rest/v1/colors?select=name" \
 -H "apikey: $YOUR_SERVICE_ROLE_KEY" \
 -H "authorization: Bearer $YOUR_SERVICE_ROLE_KEY"
```

----------------------------------------

TITLE: Implementing Sign In and Sign Out Actions in SvelteKit
DESCRIPTION: This snippet shows how to implement sign in and sign out actions in SvelteKit using Supabase authentication. It includes error handling and redirection after successful authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_18

LANGUAGE: typescript
CODE:
```
import { fail, redirect } from '@sveltejs/kit'
import { AuthApiError } from '@supabase/supabase-js'

export const actions = {
  signin: async ({ request, locals: { supabase } }) => {
    const formData = await request.formData()

    const email = formData.get('email') as string
    const password = formData.get('password') as string

    const { error } = await supabase.auth.signInWithPassword({
      email,
      password,
    })

    if (error) {
      if (error instanceof AuthApiError && error.status === 400) {
        return fail(400, {
          error: 'Invalid credentials.',
          values: {
            email,
          },
        })
      }
      return fail(500, {
        error: 'Server error. Try again later.',
        values: {
          email,
        },
      })
    }

    redirect(303, '/dashboard')
  },

  signout: async ({ locals: { supabase } }) => {
    await supabase.auth.signOut()
    redirect(303, '/')
  },
}
```

----------------------------------------

TITLE: Setting Up Public Profiles Table with RLS
DESCRIPTION: Complete example of creating a profiles table with RLS and a public access policy.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
-- 1. Create table
create table profiles (
  id uuid primary key,
  user_id references auth.users,
  avatar_url text
);

-- 2. Enable RLS
alter table profiles enable row level security;

-- 3. Create Policy
create policy "Public profiles are visible to everyone."
on profiles for select
to anon         -- the Postgres Role (recommended)
using ( true ); -- the actual Policy
```

----------------------------------------

TITLE: Creating SQL Function to Test Authorization Header in Supabase
DESCRIPTION: This SQL function creates a database function that returns the JWT payload, which can be used to verify the user's authentication status and role during database calls.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/why-is-my-select-returning-an-empty-data-array-and-i-have-data-in-the-table-xvOPgx.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create function test_authorization_header() returns json
    language SQL
    as
$$
    select auth.jwt();
$$;
```

----------------------------------------

TITLE: Creating Supabase Server-Side Utility in JavaScript
DESCRIPTION: JavaScript utility to create a Supabase client for server-side operations with cookie handling for session management.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_6

LANGUAGE: jsx
CODE:
```
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export async function createClient() {
  const cookieStore = await cookies()

  // Create a server's supabase client with newly configured cookie,
  // which could be used to maintain user's session
  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll()
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {
            // The `setAll` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    }
  )
}
```

----------------------------------------

TITLE: Subscribing to Realtime Events in Supabase with TypeScript
DESCRIPTION: Code examples demonstrating how to subscribe to realtime events from a Supabase table. The older version uses the .from().on() pattern, while the newer version uses the channel API with postgres_changes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_16

LANGUAGE: typescript
CODE:
```
const userListener = supabase
  .from('users')
  .on('*', (payload) => handleAllEventsPayload(payload.new))
  .subscribe()
```

LANGUAGE: typescript
CODE:
```
const userListener = supabase
  .channel('public:user')
  .on('postgres_changes', { event: '*', schema: 'public', table: 'user' }, (payload) =>
    handleAllEventsPayload()
  )
  .subscribe()
```

----------------------------------------

TITLE: Starting Function Server in Debug Mode - Shell Command
DESCRIPTION: Command to start the Supabase Functions server in inspection mode with breakpoint at first line. This enables debugging through Chrome DevTools.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/debugging-tools.mdx#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
supabase functions serve --inspect-mode brk
```

----------------------------------------

TITLE: Initiating Password Reset in JavaScript with Supabase
DESCRIPTION: JavaScript function that uses Supabase client to initiate a password reset flow by sending a reset password email to the user's email address.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_31

LANGUAGE: JavaScript
CODE:
```
async function resetPassword() {
  const { data, error } = await supabase.auth.resetPasswordForEmail(email)
}
```

----------------------------------------

TITLE: Deploy Supabase DB Changes (Bash)
DESCRIPTION: Pushes the local database schema changes (represented by migration files) to the linked remote Supabase project's database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#_snippet_10

LANGUAGE: bash
CODE:
```
supabase db push
```

----------------------------------------

TITLE: Initializing Supabase Client in Flutter Main Function
DESCRIPTION: Dart code to initialize the Supabase client in the main function of a Flutter app, setting up the connection with the Supabase project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-flutter.mdx#2025-04-21_snippet_3

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

Future<void> main() async {
  await Supabase.initialize(
    url: 'YOUR_SUPABASE_URL',
    anonKey: 'YOUR_SUPABASE_ANON_KEY',
  );
  runApp(const MyApp());
}

final supabase = Supabase.instance.client;

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return const MaterialApp(title: 'Supabase Flutter');
  }
}

extension ContextExtension on BuildContext {
  void showSnackBar(String message, {bool isError = false}) {
    ScaffoldMessenger.of(this).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: isError
            ? Theme.of(this).colorScheme.error
            : Theme.of(this).snackBarTheme.backgroundColor,
      ),
    );
  }
}
```

----------------------------------------

TITLE: Implementing Real-Time Chat Page in Flutter with Supabase
DESCRIPTION: This code snippet creates a ChatPage widget that displays real-time messages using Supabase's stream() method. It includes functionality for loading user profiles, displaying chat bubbles, and sending new messages. The widget uses StreamBuilder to handle real-time updates and implements a message input bar.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-30-flutter-tutorial-building-a-chat-app.mdx#2025-04-21_snippet_12

LANGUAGE: dart
CODE:
```
import 'dart:async';

import 'package:flutter/material.dart';

import 'package:my_chat_app/models/message.dart';
import 'package:my_chat_app/models/profile.dart';
import 'package:my_chat_app/utils/constants.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:timeago/timeago.dart';

/// Page to chat with someone.
///
/// Displays chat bubbles as a ListView and TextField to enter new chat.
class ChatPage extends StatefulWidget {
  const ChatPage({Key? key}) : super(key: key);

  static Route<void> route() {
    return MaterialPageRoute(
      builder: (context) => const ChatPage(),
    );
  }

  @override
  State<ChatPage> createState() => _ChatPageState();
}

class _ChatPageState extends State<ChatPage> {
  late final Stream<List<Message>> _messagesStream;
  final Map<String, Profile> _profileCache = {};

  @override
  void initState() {
    final myUserId = supabase.auth.currentUser!.id;
    _messagesStream = supabase
        .from('messages')
        .stream(primaryKey: ['id'])
        .order('created_at')
        .map((maps) => maps
            .map((map) => Message.fromMap(map: map, myUserId: myUserId))
            .toList());
    super.initState();
  }

  Future<void> _loadProfileCache(String profileId) async {
    if (_profileCache[profileId] != null) {
      return;
    }
    final data =
        await supabase.from('profiles').select().eq('id', profileId).single();
    final profile = Profile.fromMap(data);
    setState(() {
      _profileCache[profileId] = profile;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Chat')),
      body: StreamBuilder<List<Message>>(
        stream: _messagesStream,
        builder: (context, snapshot) {
          if (snapshot.hasData) {
            final messages = snapshot.data!;
            return Column(
              children: [
                Expanded(
                  child: messages.isEmpty
                      ? const Center(
                          child: Text('Start your conversation now :)'),
                        )
                      : ListView.builder(
                          reverse: true,
                          itemCount: messages.length,
                          itemBuilder: (context, index) {
                            final message = messages[index];

                            /// I know it's not good to include code that is not related
                            /// to rendering the widget inside build method, but for
                            /// creating an app quick and dirty, it's fine 😂
                            _loadProfileCache(message.profileId);

                            return _ChatBubble(
                              message: message,
                              profile: _profileCache[message.profileId],
                            );
                          },
                        ),
                ),
                const _MessageBar(),
              ],
            );
          } else {
            return preloader;
          }
        },
      ),
    );
  }
}

/// Set of widget that contains TextField and Button to submit message
class _MessageBar extends StatefulWidget {
  const _MessageBar({
    Key? key,
  }) : super(key: key);

  @override
  State<_MessageBar> createState() => _MessageBarState();
}

class _MessageBarState extends State<_MessageBar> {
  late final TextEditingController _textController;

  @override
  Widget build(BuildContext context) {
    return Material(
      color: Colors.grey[200],
      child: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(8.0),
          child: Row(
            children: [
              Expanded(
                child: TextFormField(
                  keyboardType: TextInputType.text,
                  maxLines: null,
                  autofocus: true,
                  controller: _textController,
                  decoration: const InputDecoration(
                    hintText: 'Type a message',
                    border: InputBorder.none,
                    focusedBorder: InputBorder.none,
                    contentPadding: EdgeInsets.all(8),
                  ),
                ),
              ),
              TextButton(
                onPressed: () => _submitMessage(),
                child: const Text('Send'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  @override
  void initState() {
    _textController = TextEditingController();
    super.initState();
  }

  @override
  void dispose() {
    _textController.dispose();
    super.dispose();
  }

  void _submitMessage() async {
    final text = _textController.text;
    final myUserId = supabase.auth.currentUser!.id;
    if (text.isEmpty) {
      return;
    }
    _textController.clear();
    try {
      await supabase.from('messages').insert({
        'profile_id': myUserId,
        'content': text,
      });
    } on PostgrestException catch (error) {
      context.showErrorSnackBar(message: error.message);
    } catch (_) {
      context.showErrorSnackBar(message: unexpectedErrorMessage);
    }
  }
}

class _ChatBubble extends StatelessWidget {
  const _ChatBubble({
    Key? key,
    required this.message,
    required this.profile,
  }) : super(key: key);

  final Message message;
  final Profile? profile;

  @override
  Widget build(BuildContext context) {
    List<Widget> chatContents = [
      if (!message.isMine)
        CircleAvatar(
          child: profile == null
              ? preloader
              : Text(profile!.username.substring(0, 2)),
        ),
      const SizedBox(width: 12),
      Flexible(
        child: Container(
          padding: const EdgeInsets.symmetric(
            vertical: 8,
            horizontal: 12,
          ),
          decoration: BoxDecoration(
            color: message.isMine
                ? Theme.of(context).primaryColor
                : Colors.grey[300],
            borderRadius: BorderRadius.circular(8),
          ),
          child: Text(message.content),
        ),
      ),
      const SizedBox(width: 12),
      Text(format(message.createdAt, locale: 'en_short')),
      const SizedBox(width: 60),
    ];
    if (message.isMine) {
      chatContents = chatContents.reversed.toList();
    }
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 18),
      child: Row(
        mainAxisAlignment:
            message.isMine ? MainAxisAlignment.end : MainAxisAlignment.start,
        children: chatContents,
      ),
    );
  }
}
```

----------------------------------------

TITLE: Updating get logged-in user in TypeScript
DESCRIPTION: Example of how to update the method to get the logged-in user in supabase-js v2. The new version uses an async getUser method.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_9

LANGUAGE: typescript
CODE:
```
const {
  data: { user },
} = await supabase.auth.getUser()
```

----------------------------------------

TITLE: Signing Out with Supabase JavaScript
DESCRIPTION: This JavaScript code provides a method for signing out users from a Supabase project using the `signOut` function. It clears the user session from the browser and localStorage. Ensure the `@supabase/supabase-js` library is installed and configured.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-linkedin.mdx#2025-04-21_snippet_3

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('<your-project-url>', '<your-anon-key>')

// ---cut---
async function signOut() {
  const { error } = await supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Creating Singleton Supabase Client in Next.js Client Component
DESCRIPTION: Demonstrates how to create a Supabase client instance in a Next.js client component using createClientComponentClient. The function automatically handles singleton instance management across components.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_33

LANGUAGE: jsx
CODE:
```
"use client";

import { createClientComponentClient } from "@supabase/auth-helpers-nextjs";

export default function() {
  const supabase = createClientComponentClient();
  return ...
}
```

----------------------------------------

TITLE: Creating Tables for Many-to-Many Relationships in PostgreSQL
DESCRIPTION: SQL commands to create tables representing users, teams, and a many-to-many joining table for team members.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_9

LANGUAGE: sql
CODE:
```
create table users (
  "id" serial primary key,
  "name" text
);

create table teams (
  "id" serial primary key,
  "team_name" text
);

create table members (
  "user_id" int references users,
  "team_id" int references teams,
  primary key (user_id, team_id)
);
```

----------------------------------------

TITLE: Creating Authorize Function for RLS Policies
DESCRIPTION: SQL function to authorize user permissions based on their role for use in Row Level Security policies.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/custom-claims-and-role-based-access-control-rbac.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create or replace function public.authorize(
  requested_permission app_permission
)
returns boolean as $$
declare
  bind_permissions int;
  user_role public.app_role;
begin
  -- Fetch user role once and store it to reduce number of calls
  select (auth.jwt() ->> 'user_role')::public.app_role into user_role;

  select count(*)
  into bind_permissions
  from public.role_permissions
  where role_permissions.permission = requested_permission
    and role_permissions.role = user_role;

  return bind_permissions > 0;
end;
$$ language plpgsql stable security definer set search_path = '';
```

----------------------------------------

TITLE: Implementing Authentication Middleware in TypeScript
DESCRIPTION: TypeScript version of the Next.js middleware for Supabase authentication with type safety.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
import { NextResponse } from 'next/server'

import type { NextRequest } from 'next/server'
import type { Database } from '@/lib/database.types'

export async function middleware(req: NextRequest) {
  const res = NextResponse.next()

  // Create a Supabase client configured to use cookies
  const supabase = createMiddlewareClient<Database>({ req, res })

  // Refresh session if expired - required for Server Components
  await supabase.auth.getSession()

  return res
}

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico).*)',
  ],
}
```

----------------------------------------

TITLE: Signing In with Password Using New Auth Methods in TypeScript
DESCRIPTION: Demonstrates the new explicit signInWithPassword() method in supabase-js v2 for authenticating users with email and password.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-16-supabase-js-v2.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
// v2
const { data } = await supabase.auth.signInWithPassword({
  email: 'hello@example',
  password: 'pass',
})

// v1
const { data } = await supabase.auth.signIn({
  email: 'hello@example',
  password: 'pass',
})
```

----------------------------------------

TITLE: Creating a Table with Foreign Key in Postgres SQL
DESCRIPTION: Demonstrates proper table creation with an identity-generated primary key, non-null columns, and a foreign key reference. Includes a table comment describing its purpose.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/code-format-sql.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table books (
  id bigint generated always as identity primary key,
  title text not null,
  author_id bigint references authors (id)
);
comment on table books is 'A list of all the books in the library.';
```

----------------------------------------

TITLE: Implementing an Edge Function for Vector Embedding Generation with OpenAI
DESCRIPTION: Complete implementation of an Edge Function that processes embedding generation jobs. It connects to OpenAI's API to generate embeddings for database content and updates the corresponding rows in the database. The function handles multiple jobs, tracks successes and failures, and manages a job queue.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_8

LANGUAGE: typescript
CODE:
```
// Setup type definitions for built-in Supabase Runtime APIs
import 'jsr:@supabase/functions-js/edge-runtime.d.ts'

// We'll use the OpenAI API to generate embeddings
import OpenAI from 'jsr:@openai/openai'

import { z } from 'npm:zod'

// We'll make a direct Postgres connection to update the document
import postgres from 'https://deno.land/x/postgresjs@v3.4.5/mod.js'

// Initialize OpenAI client
const openai = new OpenAI({
  // We'll need to manually set the `OPENAI_API_KEY` environment variable
  apiKey: Deno.env.get('OPENAI_API_KEY'),
})

// Initialize Postgres client
const sql = postgres(
  // `SUPABASE_DB_URL` is a built-in environment variable
  Deno.env.get('SUPABASE_DB_URL')!
)

const jobSchema = z.object({
  jobId: z.number(),
  id: z.number(),
  schema: z.string(),
  table: z.string(),
  contentFunction: z.string(),
  embeddingColumn: z.string(),
})

const failedJobSchema = jobSchema.extend({
  error: z.string(),
})

type Job = z.infer<typeof jobSchema>
type FailedJob = z.infer<typeof failedJobSchema>

type Row = {
  id: string
  content: unknown
}

const QUEUE_NAME = 'embedding_jobs'

// Listen for HTTP requests
Deno.serve(async (req) => {
  if (req.method !== 'POST') {
    return new Response('expected POST request', { status: 405 })
  }

  if (req.headers.get('content-type') !== 'application/json') {
    return new Response('expected json body', { status: 400 })
  }

  // Use Zod to parse and validate the request body
  const parseResult = z.array(jobSchema).safeParse(await req.json())

  if (parseResult.error) {
    return new Response(`invalid request body: ${parseResult.error.message}`, {
      status: 400,
    })
  }

  const pendingJobs = parseResult.data

  // Track jobs that completed successfully
  const completedJobs: Job[] = []

  // Track jobs that failed due to an error
  const failedJobs: FailedJob[] = []

  async function processJobs() {
    let currentJob: Job | undefined

    while ((currentJob = pendingJobs.shift()) !== undefined) {
      try {
        await processJob(currentJob)
        completedJobs.push(currentJob)
      } catch (error) {
        failedJobs.push({
          ...currentJob,
          error: error instanceof Error ? error.message : JSON.stringify(error),
        })
      }
    }
  }

  try {
    // Process jobs while listening for worker termination
    await Promise.race([processJobs(), catchUnload()])
  } catch (error) {
    // If the worker is terminating (e.g. wall clock limit reached),
    // add pending jobs to fail list with termination reason
    failedJobs.push(
      ...pendingJobs.map((job) => ({
        ...job,
        error: error instanceof Error ? error.message : JSON.stringify(error),
      }))
    )
  }

  // Log completed and failed jobs for traceability
  console.log('finished processing jobs:', {
    completedJobs: completedJobs.length,
    failedJobs: failedJobs.length,
  })

  return new Response(
    JSON.stringify({
      completedJobs,
      failedJobs,
    }),
    {
      // 200 OK response
      status: 200,

      // Custom headers to report job status
      headers: {
        'content-type': 'application/json',
        'x-completed-jobs': completedJobs.length.toString(),
        'x-failed-jobs': failedJobs.length.toString(),
      },
    }
  )
})

/**
 * Generates an embedding for the given text.
 */
async function generateEmbedding(text: string) {
  const response = await openai.embeddings.create({
    model: 'text-embedding-3-small',
    input: text,
  })
  const [data] = response.data

  if (!data) {
    throw new Error('failed to generate embedding')
  }

  return data.embedding
}

/**
 * Processes an embedding job.
 */
async function processJob(job: Job) {
  const { jobId, id, schema, table, contentFunction, embeddingColumn } = job

  // Fetch content for the schema/table/row combination
  const [row]: [Row] = await sql`
    select
      id,
      ${sql(contentFunction)}(t) as content
    from
      ${sql(schema)}.${sql(table)} t
    where
      id = ${id}
  `

  if (!row) {
    throw new Error(`row not found: ${schema}.${table}/${id}`)
  }

  if (typeof row.content !== 'string') {
    throw new Error(`invalid content - expected string: ${schema}.${table}/${id}`)
  }

  const embedding = await generateEmbedding(row.content)

  await sql`
    update
      ${sql(schema)}.${sql(table)}
    set
      ${sql(embeddingColumn)} = ${JSON.stringify(embedding)}
    where
      id = ${id}
  `

  await sql`
    select pgmq.delete(${QUEUE_NAME}, ${jobId}::bigint)
  `
}

/**
 * Returns a promise that rejects if the worker is terminating.
 */
function catchUnload() {
  return new Promise((reject) => {
    addEventListener('beforeunload', (ev: any) => {
      reject(new Error(ev.detail?.reason))
    })
  })
}
```

----------------------------------------

TITLE: Configure Supabase Middleware in Next.js
DESCRIPTION: This snippet defines the main middleware function in `middleware.ts` which calls the `updateSession` utility function and configures the matcher to specify which paths the middleware should run on, excluding static files and specific image types.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
import { type NextRequest } from 'next/server'
import { updateSession } from '@/utils/supabase/middleware'

export async function middleware(request: NextRequest) {
  return await updateSession(request)
}

export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * Feel free to modify this pattern to include more paths.
     */
    '/((?!_next/static|_next/image|favicon.ico|.*\.(?:svg|png|jpg|jpeg|gif|webp)$).*)'
  ]
}
```

----------------------------------------

TITLE: Updating signIn with phone OTP in TypeScript
DESCRIPTION: Example of how to update the signIn method for phone OTP authentication in supabase-js v2. The new version uses signInWithOtp and verifyOtp.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
const { data, error } = await supabase
  .auth
  .signInWithOtp({ phone })

// After receiving a SMS with a OTP.
const { data, error } = await supabase
.auth
.verifyOtp({ phone, token })
```

----------------------------------------

TITLE: Initializing Supabase Client in Dart
DESCRIPTION: This snippet shows how to initialize the Supabase client in a Dart application using the project URL and anonymous API key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
void main() {
  Supabase.initialize(
    url: 'https://<project>.supabase.co',
    anonKey: '<your-anon-key>',
  );

  runApp(MyApp());
}

final supabase = Supabase.instance.client;
```

----------------------------------------

TITLE: Creating Logout Route Handler in TypeScript
DESCRIPTION: This TypeScript code provides an example of setting up a server-side route handler for user logout in a Next.js application with Supabase. By calling signOut on a typed Supabase client, it signs out the user and subsequently redirects them to a login page. Required dependencies are @supabase/auth-helpers-nextjs and next/headers, using TypeScript type support for enhanced safety.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_13

LANGUAGE: TypeScript
CODE:
```
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { NextResponse } from 'next/server'

import type { Database } from '@/lib/database.types'

export async function POST(request: Request) {
  const requestUrl = new URL(request.url)
  const cookieStore = cookies()
  const supabase = createRouteHandlerClient<Database>({ cookies: () => cookieStore })

  await supabase.auth.signOut()

  return NextResponse.redirect(`${requestUrl.origin}/login`, {
    status: 301,
  })
}

```

----------------------------------------

TITLE: Code Exchange API Route Implementation
DESCRIPTION: Server-side authentication code exchange route for handling OAuth callbacks.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { NextApiHandler } from 'next'
import { createPagesServerClient } from '@supabase/auth-helpers-nextjs'

const handler: NextApiHandler = async (req, res) => {
  const { code } = req.query

  if (code) {
    const supabase = createPagesServerClient({ req, res })
    await supabase.auth.exchangeCodeForSession(String(code))
  }

  res.redirect('/')
}

export default handler
```

----------------------------------------

TITLE: Creating Basic RLS Policy Structure in SQL
DESCRIPTION: Basic example of creating a Row Level Security policy for books table with proper syntax
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/database-rls-policies.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
CREATE POLICY "My descriptive policy." ON books FOR INSERT to authenticated USING ( (select auth.uid()) = author_id ) WITH ( true );
```

----------------------------------------

TITLE: Setting Up Supabase Database Schema with RLS Policies
DESCRIPTION: SQL schema for creating profiles table with Row Level Security policies, including user authentication, storage configuration, and realtime subscriptions.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/react-user-management/README.md#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- Create a table for Public Profiles
create table
  profiles (
    id uuid references auth.users not null,
    updated_at timestamp
    with
      time zone,
      username text unique,
      avatar_url text,
      website text,
      primary key (id),
      unique (username),
      constraint username_length check (char_length(username) >= 3)
  );

alter table
  profiles enable row level security;

create policy "Public profiles are viewable by everyone." on profiles for
select
  using (true);

create policy "Users can insert their own profile." on profiles for insert
with
  check ((select auth.uid()) = id);

create policy "Users can update own profile." on profiles for
update
  using ((select auth.uid()) = id);

-- Set up Realtime!
begin;

drop
  publication if exists supabase_realtime;

create publication supabase_realtime;

commit;

alter
  publication supabase_realtime add table profiles;

-- Set up Storage!
insert into
  storage.buckets (id, name)
values
  ('avatars', 'avatars');

create policy "Avatar images are publicly accessible." on storage.objects for
select
  using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects for insert
with
  check (bucket_id = 'avatars');
```

----------------------------------------

TITLE: Creating Postgres Schema with Row Level Security for User Profiles
DESCRIPTION: SQL script to set up a user profiles table with Postgres Row Level Security policies. This creates the profiles table, sets up security policies, configures Realtime, and initializes Storage for avatar images.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/svelte-user-management/README.md#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
-- Create a table for Public Profiles
create table
	profiles (
		id uuid references auth.users not null,
		updated_at timestamp
		with
			time zone,
			username text unique,
			avatar_url text,
			website text,
			primary key (id),
			unique (username),
			constraint username_length check (char_length(username) >= 3)
	);

alter table
	profiles enable row level security;

create policy "Public profiles are viewable by everyone." on profiles for
select
	using (true);

create policy "Users can insert their own profile." on profiles for insert
with
	check ((select auth.uid()) = id);

create policy "Users can update own profile." on profiles for
update
	using ((select auth.uid()) = id);

-- Set up Realtime!
begin;

drop
	publication if exists supabase_realtime;

create publication supabase_realtime;

commit;

alter
	publication supabase_realtime add table profiles;

-- Set up Storage!
insert into
	storage.buckets (id, name)
values
	('avatars', 'avatars');

create policy "Avatar images are publicly accessible." on storage.objects for
select
	using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects for insert
with
	check (bucket_id = 'avatars');
```

----------------------------------------

TITLE: Implementing RESTful Tasks with Edge Functions in TypeScript
DESCRIPTION: This snippet demonstrates how to create a RESTful API for tasks using Supabase Edge Functions. It supports GET, POST, PUT, PATCH, and DELETE HTTP methods.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-02-supabase-beta-update-october-2022.mdx#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
// Example code mentioned but not provided in the text:
// https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/restful-tasks/index.ts
```

----------------------------------------

TITLE: Initializing Local Supabase Environment with CLI
DESCRIPTION: Basic commands to initialize and link a local Supabase project with a remote instance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase init
supabase login
supabase link --project-ref $PROJECT_ID
```

----------------------------------------

TITLE: Creating a Postgres Trigger Function for Broadcast in SQL
DESCRIPTION: This SQL code defines a function that broadcasts changes to a specific topic when a record is created, updated, or deleted in a table. It utilizes Postgres's native trigger variables and the `realtime.broadcast_changes()` function provided by Supabase Realtime.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/subscribing-to-database-changes.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create or replace function public.your_table_changes()
returns trigger
language plpgsql
as $$
begin
  perform realtime.broadcast_changes(
    'topic:' || coalesce(NEW.topic, OLD.topic) ::text, -- topic - the topic to which we're broadcasting
    TG_OP,                                             -- event - the event that triggered the function
    TG_OP,                                             -- operation - the operation that triggered the function
    TG_TABLE_NAME,                                     -- table - the table that caused the trigger
    TG_TABLE_SCHEMA,                                   -- schema - the schema of the table that caused the trigger
    NEW,                                               -- new record - the record after the change
    OLD                                                -- old record - the record before the change
  );
  return null;
end;
$$;
```

----------------------------------------

TITLE: Initializing Supabase Client with PKCE Configuration - JavaScript
DESCRIPTION: This snippet demonstrates how to initialize the Supabase client for PKCE flow. It shows the configuration of authentication options including automatic session detection in the URL and specifying a custom storage approach.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/sessions/pkce-flow.mdx#2025-04-21_snippet_1

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'

// ---cut---
const supabase = createClient('https://xyzcompany.supabase.co', 'public-anon-key', {
  // ...
  auth: {
    // ...
    detectSessionInUrl: true,
    flowType: 'pkce',
    storage: {
      getItem: () => Promise.resolve('FETCHED_TOKEN'),
      setItem: () => {},
      removeItem: () => {},
    },
  },
  // ...
})
```

----------------------------------------

TITLE: Implementing Email Signup with Python
DESCRIPTION: Python code snippet for signing up a new user with email and password authentication in Supabase. This example includes an optional email_redirect_to parameter for after confirmation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_4

LANGUAGE: python
CODE:
```
data = await supabase.auth.sign_up({
  'email': 'valid.email@supabase.io',
  'password': 'example-password',
  'options': {
    'email_redirect_to': 'https://example.com/welcome',
  },
})
```

----------------------------------------

TITLE: Creating Profiles Table with Row Level Security in PostgreSQL
DESCRIPTION: SQL script to create a profiles table with Row Level Security policies for user management. Includes table creation, security policies for viewing, inserting, and updating profiles, and setup for Supabase Realtime and Storage features.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/angular-user-management/README.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Create a table for Public Profiles
create table profiles (
  id uuid references auth.users not null,
  updated_at timestamp with time zone,
  username text unique,
  avatar_url text,
  website text,
  primary key (id),
  unique(username),
  constraint username_length check (char_length(username) >= 3)
);
alter table profiles enable row level security;
create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );
create policy "Users can insert their own profile."
  on profiles for insert
  with check ( (select auth.uid()) = id );
create policy "Users can update own profile."
  on profiles for update
  using ( (select auth.uid()) = id );
-- Set up Realtime!
begin;
  drop publication if exists supabase_realtime;
  create publication supabase_realtime;
commit;
alter publication supabase_realtime add table profiles;
-- Set up Storage!
insert into storage.buckets (id, name)
values ('avatars', 'avatars');
create policy "Avatar images are publicly accessible."
  on storage.objects for select
  using ( bucket_id = 'avatars' );
create policy "Anyone can upload an avatar."
  on storage.objects for insert
  with check ( bucket_id = 'avatars' );
```

----------------------------------------

TITLE: Updating getServerSideProps with createPagesServerClient in Next.js
DESCRIPTION: This snippet shows how to replace the deprecated withPageAuth function with createPagesServerClient in a Next.js page's getServerSideProps. It demonstrates creating an authenticated Supabase client, checking for an active session, and redirecting if no user is found.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_13

LANGUAGE: typescript
CODE:
```
import { createPagesServerClient, User } from '@supabase/auth-helpers-nextjs'
import { GetServerSidePropsContext } from 'next'

export default function Profile({ user }: { user: User }) {
  return <pre>{JSON.stringify(user, null, 2)}</pre>
}

export const getServerSideProps = async (ctx: GetServerSidePropsContext) => {
  // Create authenticated Supabase Client
  const supabase = createPagesServerClient(ctx)
  // Check if we have a session
  const {
    data: { user },
  } = await supabase.auth.getUser()

  if (!user)
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    }

  return {
    props: {
      initialSession: session,
      user: session.user,
    },
  }
}
```

----------------------------------------

TITLE: Implementing Trigger for New User Profile Creation in SQL
DESCRIPTION: Creates a function and trigger to automatically generate a profile entry when a new user signs up via Supabase Auth. Extracts full name and avatar URL from user metadata.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/user_management_quickstart_sql_template.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- This trigger automatically creates a profile entry when a new user signs up via Supabase Auth.
-- See https://supabase.com/docs/guides/auth/managing-user-data#using-triggers for more details.
create function public.handle_new_user()
returns trigger
set search_path = ''
as $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$ language plpgsql security definer;
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();
```

----------------------------------------

TITLE: Creating RLS Policy for UPDATE Operations
DESCRIPTION: Shows how to create an RLS policy for UPDATE operations using both USING and WITH CHECK clauses. This policy ensures that users can only update their own records in the database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/rls-simplified-BJTcS8.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
create policy "Allow user to edit their stuff"
on "public"."<SOME TABLE NAME>"
as RESTRICTIVE
for UPDATE
to authenticated
using (
  (select auth.uid()) = user_id
)
with check(
  (select auth.uid()) = user_id
);
```

----------------------------------------

TITLE: Creating Basic SELECT Policy
DESCRIPTION: Example of creating a simple RLS policy for allowing users to view their own todos.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create policy "Individuals can view their own todos."
on todos for select
using ( (select auth.uid()) = user_id );
```

----------------------------------------

TITLE: Initializing Supabase Client in Kotlin
DESCRIPTION: This snippet demonstrates the initialization of a Supabase client in Kotlin, using the project URL and anonymous API key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/presence.mdx#2025-04-21_snippet_3

LANGUAGE: kotlin
CODE:
```
val supabaseUrl = "https://<project>.supabase.co"
val supabaseKey = "<your-anon-key>"
val supabase = createSupabaseClient(supabaseUrl, supabaseKey) {
    install(Realtime)
}
```

----------------------------------------

TITLE: MFA Verification Hook Implementation
DESCRIPTION: SQL function implementing the MFA verification hook with rate limiting logic for failed attempts.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/mfa-verification-hook.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create function public.hook_mfa_verification_attempt(event jsonb)
  returns jsonb
  language plpgsql
as $$
  declare
    last_failed_at timestamp;
  begin
    if event->'valid' is true then
      -- code is valid, accept it
      return jsonb_build_object('decision', 'continue');
    end if;

    select last_failed_at into last_failed_at
      from public.mfa_failed_verification_attempts
      where
        user_id = event->'user_id'
          and
        factor_id = event->'factor_id';

    if last_failed_at is not null and now() - last_failed_at < interval '2 seconds' then
      -- last attempt was done too quickly
      return jsonb_build_object(
        'error', jsonb_build_object(
          'http_code', 429,
          'message',   'Please wait a moment before trying again.'
        )
      );
    end if;

    -- record this failed attempt
    insert into public.mfa_failed_verification_attempts
      (
        user_id,
        factor_id,
        last_refreshed_at
      )
      values
      (
        event->'user_id',
        event->'factor_id',
        now()
      )
      on conflict do update
        set last_refreshed_at = now();

    -- finally let Supabase Auth do the default behavior for a failed attempt
    return jsonb_build_object('decision', 'continue');
  end;
$$;
```

----------------------------------------

TITLE: Creating an HNSW Index for Vector Similarity Search with pgvector
DESCRIPTION: SQL command to create a Hierarchical Navigable Small World (HNSW) index on a vector column for improved performance with inner product distance function. This index type is available in pgvector v0.5.0 and later.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-09-06-increase-performance-pgvector-hnsw.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Add a HNSW index for the inner product distance function
CREATE INDEX ON documents
USING hnsw (embedding vector_ip_ops);
```

----------------------------------------

TITLE: Updating insert and return data in TypeScript
DESCRIPTION: Example of how to update the insert method to return data in supabase-js v2. The new version requires an explicit select() call to return the inserted data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_12

LANGUAGE: typescript
CODE:
```
const { data, error } = await supabase
  .from('my_table')
  .insert({ new_data })
  .select()
```

----------------------------------------

TITLE: Using Supabase in Next.js Server Components
DESCRIPTION: Example of using Supabase within a Next.js Server Component. This approach allows for server-side data fetching using the createServerComponentClient function, which requires cookies from the request.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_18

LANGUAGE: jsx
CODE:
```
import { cookies } from 'next/headers'
import { createServerComponentClient } from '@supabase/auth-helpers-nextjs'

export default async function Page() {
  const cookieStore = cookies()
  const supabase = createServerComponentClient({ cookies: () => cookieStore })
  const { data } = await supabase.from('todos').select()
  return <pre>{JSON.stringify(data, null, 2)}</pre>
}
```

----------------------------------------

TITLE: Initializing Supabase in a Flutter Application
DESCRIPTION: Main application file setup with Supabase initialization. It configures the Supabase client with project credentials and sets up the application's MaterialApp with proper theming and initial route to the login screen.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-18-flutter-authentication.mdx#2025-04-21_snippet_3

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:myauthapp/screens/login_screen.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

void main() async {
  /// TODO: update Supabase credentials with your own
  await Supabase.initialize(
    url: 'YOUR_SUPABASE_URL',
    anonKey: 'YOUR_ANON_KEY',
  );
  runApp(const MyApp());
}

final supabase = Supabase.instance.client;

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Flutter Auth',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const LoginScreen(),
    );
  }
}
```

----------------------------------------

TITLE: Creating Client-Side Layout Load Function with Supabase
DESCRIPTION: Sets up a client-side layout load function that creates the appropriate Supabase client (browser or server) and ensures session data is available throughout the application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
// src/routes/+layout.ts
import { createBrowserClient, createServerClient, isBrowser } from '@supabase/ssr'
import { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from '$env/static/public'
import type { LayoutLoad } from './$types'

export const load: LayoutLoad = async ({ fetch, data, depends }) => {
  depends('supabase:auth')

  const supabase = isBrowser()
    ? createBrowserClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
        global: {
          fetch,
        },
      })
    : createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
        global: {
          fetch,
        },
        cookies: {
          getAll() {
            return data.cookies
          },
        },
      })

  /**
   * It's fine to use `getSession` here, because on the client, `getSession` is
   * safe, and on the server, it reads `session` from the `LayoutData`, which
   * safely checked the session using `safeGetSession`.
   */
  const {
    data: { session },
  } = await supabase.auth.getSession()

  return { supabase, session }
}
```

----------------------------------------

TITLE: Creating a Login Component in React
DESCRIPTION: A React component that renders a login form with email and password fields, along with buttons for signing in, signing up, and signing out. The form submits to authentication endpoints.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_14

LANGUAGE: jsx
CODE:
```
export default function Login() {
  return (
    <form action="/auth/login" method="post">
      <label htmlFor="email">Email</label>
      <input name="email" />
      <label htmlFor="password">Password</label>
      <input type="password" name="password" />
      <button>Sign In</button>
      <button formAction="/auth/sign-up">Sign Up</button>
      <button formAction="/auth/logout">Sign Out</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Creating a Supabase Server Client for Next.js
DESCRIPTION: Utility function to create a Supabase server client with cookie handling for authentication in a Next.js application. This handles cookie operations for server-side rendering and server components.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/nextjs.mdx#2025-04-21_snippet_3

LANGUAGE: ts
CODE:
```
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export async function createClient() {
  const cookieStore = await cookies()

  return createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return cookieStore.getAll()
        },
        setAll(cookiesToSet) {
          try {
            cookiesToSet.forEach(({ name, value, options }) =>
              cookieStore.set(name, value, options)
            )
          } catch {
            // The `setAll` method was called from a Server Component.
            // This can be ignored if you have middleware refreshing
            // user sessions.
          }
        },
      },
    }
  )
}
```

----------------------------------------

TITLE: Enabling Required PostgreSQL Extensions
DESCRIPTION: SQL commands to enable necessary PostgreSQL extensions for vector operations, queueing, HTTP requests, scheduling, and data management.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create extension if not exists vector with schema extensions;
create extension if not exists pgmq;
create extension if not exists pg_net with schema extensions;
create extension if not exists pg_cron;
create extension if not exists hstore with schema extensions;
```

----------------------------------------

TITLE: Initializing Films Database Schema with Vector Support
DESCRIPTION: Creates a films table with vector support using pgvector extension, includes columns for movie details and embeddings, and sets up row level security policies.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-26-content-recommendation-with-flutter.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Enable pgvector extension
create extension vector
with
  schema extensions;

-- Create table
create table public.films (
  id integer primary key,
  title text,
  overview text,
  release_date date,
  backdrop_path text,
  embedding vector(1536)
);

-- Enable row level security
alter table public.films enable row level security;

-- Create policy to allow anyone to read the films table
create policy "Fils are public." on public.films for select using (true);
```

----------------------------------------

TITLE: Running Supabase Edge Functions locally
DESCRIPTION: Commands to start Supabase locally and serve the Edge Function without JWT verification, using the local environment file for configuration.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/send-email-resend/README.md#2025-04-21_snippet_1

LANGUAGE: sh
CODE:
```
supabase start
supabase functions serve --no-verify-jwt --env-file ./supabase/.env.local
```

----------------------------------------

TITLE: Initializing Supabase with Simplified Auth State Management
DESCRIPTION: Shows the simplified initialization process in version 1.0 which automatically handles auth state persistence without requiring SupabaseAuthState classes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-08-02-supabase-flutter-sdk-1-developer-preview.mdx#2025-04-21_snippet_0

LANGUAGE: dart
CODE:
```
// Before
await Supabase.initialize(
  url: 'SUPABASE_URL',
  anonKey: 'SUPABASE_ANON_KEY',
);
...

class AuthState<T extends StatefulWidget> extends SupabaseAuthState<T> {
  ...
}

// After
await Supabase.initialize(
  url: 'SUPABASE_URL',
  anonKey: 'SUPABASE_ANON_KEY',
);
```

----------------------------------------

TITLE: Upserting and Returning Data in Supabase with TypeScript
DESCRIPTION: Code examples demonstrating how to upsert (insert or update) data in a Supabase table with and without returning the affected records. The newer version adds a .select() method to return the upserted data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_14

LANGUAGE: typescript
CODE:
```
const { data, error } = await supabase
  .from('my_table')
  .upsert({ new_data })
```

LANGUAGE: typescript
CODE:
```
const { data, error } = await supabase
  .from('my_table')
  .upsert({ new_data })
  .select()
```

----------------------------------------

TITLE: Creating Database Function and Trigger for User Profile in SQL
DESCRIPTION: SQL commands to create a database function and trigger that automatically adds an entry to public.profiles whenever a new user is created. This ensures that user profiles are maintained alongside user authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/realtime/nextjs-authorization-demo/README.md#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
CREATE OR REPLACE FUNCTION insert_user() RETURNS TRIGGER AS
$$
  BEGIN
    INSERT INTO public.profiles (id, email) VALUES (NEW.id, NEW.email); RETURN NEW;
  END;
$$ LANGUAGE plpgsql
   SECURITY DEFINER
   SET search_path = public;

CREATE OR REPLACE TRIGGER "on_new_auth_create_profile"
AFTER INSERT ON auth.users FOR EACH ROW
EXECUTE FUNCTION insert_user();

GRANT EXECUTE ON FUNCTION insert_user () TO supabase_auth_admin;
GRANT INSERT ON TABLE public.profiles TO supabase_auth_admin;
```

----------------------------------------

TITLE: Handling Supabase Authentication State in React Native App TSX
DESCRIPTION: This code defines the main `App` component for a React Native application. It uses React hooks (`useState`, `useEffect`) and the Supabase client to manage the user's authentication session state. It fetches the initial session and listens for auth state changes, rendering the `Auth` component or the user's ID based on the session status.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/react-native.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import 'react-native-url-polyfill/auto'
import { useState, useEffect } from 'react'
import { supabase } from './lib/supabase'
import Auth from './components/Auth'
import { View, Text } from 'react-native'
import { Session } from '@supabase/supabase-js'

export default function App() {
  const [session, setSession] = useState<Session | null>(null)

  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session)
    })

    supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session)
    })
  }, [])

  return (
    <View>
      <Auth />
      {session && session.user && <Text>{session.user.id}</Text>}
    </View>
  )
}
```

----------------------------------------

TITLE: Creating a has_role() Function in SQL
DESCRIPTION: This security definer function checks if the current user has a specific role. It's designed to be used in RLS policies to bypass RLS on the roles table for better performance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/rls-performance-and-best-practices-Z5Jjwv.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
CREATE OR REPLACE FUNCTION has_role()
    RETURNS boolean as
$$
begin
    return exists (select 1 from roles_table where auth.uid() = user_id and role = 'good_role')
end;
$$ language plpgsql security definer;
```

----------------------------------------

TITLE: Building an Infinite Scroll Component with React, Supabase, and Framer Motion
DESCRIPTION: A complete React component that implements infinite scrolling for tickets data from Supabase. It uses useRef to track container position, debounce from lodash to optimize scroll performance, and Framer Motion for animated entries. The component includes server-side data fetching with pagination support.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-04-infinite-scroll-with-nextjs-framer-motion.mdx#2025-04-21_snippet_7

LANGUAGE: jsx
CODE:
```
import { useEffect, useState, useRef } from 'react'
import { createClient } from '@supabase/supabase-js'
import { debounce } from 'lodash'
import { motion } from 'framer-motion'

const supabase = createClient('supabase-url', 'supabase-key')

export default function TicketsPage({ tickets }) {
  const PAGE_COUNT = 20
  const containerRef = useRef(null)
  const [loadedTickets, setLoadedTickets] = useState(tickets)
  const [offset, setOffset] = useState(1)
  const [isLoading, setIsLoading] = useState(false)
  const [isInView, setIsInView] = useState(false)

  const handleScroll = (container) => {
    if (containerRef.current && typeof window !== 'undefined') {
      const container = containerRef.current
      const { bottom } = container.getBoundingClientRect()
      const { innerHeight } = window
      setIsInView((prev) => bottom <= innerHeight)
    }
  }

  useEffect(() => {
    const handleDebouncedScroll = debounce(() => !isLast && handleScroll(), 200)
    window.addEventListener('scroll', handleScroll)
    return () => {
      window.removeEventListener('scroll', handleScroll)
    }
  }, [])

  useEffect(() => {
    if (isInView) {
      loadMoreTickets(offset)
    }
  }, [isInView])

  const loadMoreTickets = async (offset: number) => {
    setIsLoading(true)
    setOffset((prev) => prev + 1)
    const { data: newTickets } = await fetchTickets(offset, PAGE_COUNT)
    setLoadedTickets((prevTickets) => [...prevTickets, ...newTickets])
    setIsLoading(false)
  }

  const fetchTickets = async (offset) => {
    const from = offset * PAGE_COUNT
    const to = from + PAGE_COUNT - 1

    const { data } = await supabase!
        .from('my_tickets_table')
        .select('*')
        .range(from, to)
        .order('createdAt', { ascending: false })

    return data
  }

  return (
    <div ref={containerRef}>
      {
        loadedTickets.map((ticket, index) => {
          const recalculatedDelay =
            i >= PAGE_COUNT * 2 ? (i - PAGE_COUNT * (offset - 1)) / 15 : i / 15

          return (
            <motion.div
              key={ticket.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{
                duration: 0.4,
                ease: [0.25, 0.25, 0, 1],
                delay: recalculatedDelay,
              }}
            >
              {/* Actual ticket component */}
            </motion.div>
          )
        })
      }
    </div>
  )

export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
  const { data: tickets } = await supabase!
    .from('my_tickets_table')
    .select('*')
    .order('createdAt', { ascending: false })
    .limit(20)

  return {
    props: {
      tickets,
    },
  }
}
```

----------------------------------------

TITLE: Creating a Table with JSONB Fields in PostgreSQL
DESCRIPTION: Creates a calendar table with standard SQL fields and JSONB fields for more complex data structures. The table includes fields for basic information like date and weight, plus JSONB fields for storing food, water, and exercise logs as structured data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-24-sql-or-nosql-both-with-postgresql.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
CREATE TABLE calendar (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    date date,
    user_id uuid NOT NULL,
    weight numeric,
    notes text,
    food_log jsonb,
    water_log jsonb,
    exercise_log jsonb
);
-- (Optional) - create a foreign key relationship for the user_id field
ALTER TABLE ONLY calendar
    ADD CONSTRAINT calendar_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id);
```

----------------------------------------

TITLE: Initializing Supabase Auth UI in Flutter
DESCRIPTION: Basic setup code to initialize the Supabase client with environment variables for authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/flutter-auth-ui.mdx#2025-04-21_snippet_1

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:supabase_auth_ui/supabase_auth_ui.dart';

void main() async {
  await Supabase.initialize(
    url: dotenv.get('SUPABASE_URL'),
    anonKey: dotenv.get('SUPABASE_ANON_KEY'),
  );

  runApp(const MyApp());
}
```

----------------------------------------

TITLE: Next.js Middleware for Supabase Session Management
DESCRIPTION: Implements middleware to handle session refreshes, authentication checks, and potential redirects for protected routes
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_15

LANGUAGE: typescript
CODE:
```
import { type NextRequest } from 'next/server'
import { updateSession } from '@/utils/supabase/middleware'

export async function middleware(request: NextRequest) {
  return await updateSession(request)
}

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico|.*\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
}
```

----------------------------------------

TITLE: Creating Supabase SSR Client in Next.js
DESCRIPTION: Sets up a Supabase client for server-side rendering in Next.js, handling cookie management for authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_18

LANGUAGE: typescript
CODE:
```
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'

export default async function Page() {
  const cookieStore = cookies()

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value
        },
      },
    }
  )

  const { data } = await supabase.from('countries').select()

  return <pre>{JSON.stringify(data, null, 2)}</pre>
}
```

----------------------------------------

TITLE: Implementing Restrictive RLS Policy for Universal MFA Enforcement in SQL
DESCRIPTION: SQL policy that enforces MFA for all authenticated users by checking if the JWT's 'aal' claim equals 'aal2'. This restrictive policy ensures that only users who have completed MFA verification can access the table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-14-mfa-auth-via-rls.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create policy "Enforce MFA for all end users."
  on table_name
  as restrictive
  to authenticated
  using ( (select auth.jwt()->>'aal') = 'aal2' );
```

----------------------------------------

TITLE: Starting Local Development Stack (Bash)
DESCRIPTION: Provides the bash commands required to start the local Supabase development stack and the Next.js frontend application. This sets up the necessary services and the web server for testing locally.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/slack-clone/nextjs-slack-clone-dotenvx/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npx supabase start
npm run dev
```

----------------------------------------

TITLE: Creating Middleware Utility Function
DESCRIPTION: Implementation of a middleware utility function that creates a server client and handles session updates in Next.js middleware, including authentication flow redirects.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-migrate-from-supabase-auth-helpers-to-ssr-package-5NRunM.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
// utils/supabase/middleware.ts
import { createServerClient } from '@supabase/ssr';
import { NextResponse, type NextRequest } from 'next/server';

export async function updateSession(request: NextRequest) {
  let supabaseResponse = NextResponse.next({
    request,
  });

  const supabase = createServerClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        getAll() {
          return request.cookies.getAll()
        },
        setAll(cookiesToSet) {
          cookiesToSet.forEach(({ name, value, options }) => request.cookies.set(name, value))
          supabaseResponse = NextResponse.next({
            request,
          })
          cookiesToSet.forEach(({ name, value, options }) =>
            supabaseResponse.cookies.set(name, value, options)
          )
        },
      },
    }
  );

  // IMPORTANT: Avoid writing any logic between createServerClient and
  // supabase.auth.getUser(). A simple mistake could make it very hard to debug
  // issues with users being randomly logged out.

  const {
    data: { user },
  } = await supabase.auth.getUser();

  if (
    !user &&
    !request.nextUrl.pathname.startsWith('/login') &&
    !request.nextUrl.pathname.startsWith('/auth')
  ) {
    // no user, potentially respond by redirecting the user to the login page
    const url = request.nextUrl.clone();
    url.pathname = '/login';
    return NextResponse.redirect(url);
  }

  // IMPORTANT: You *must* return the supabaseResponse object as it is. If you're
  // creating a new response object with NextResponse.next() make sure to:
  // 1. Pass the request in it, like so:
  //    const myNewResponse = NextResponse.next({ request })
  // 2. Copy over the cookies, like so:
  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())
  // 3. Change the myNewResponse object to fit your needs, but avoid changing
  //    the cookies!
  // 4. Finally:
  //    return myNewResponse
  // If this is not done, you may be causing the browser and server to go out
  // of sync and terminate the user's session prematurely!

  return supabaseResponse;
}
```

----------------------------------------

TITLE: Auth Confirmation Route Handler - Next.js/TypeScript
DESCRIPTION: Creates a Next.js Route Handler (`app/auth/confirm/route.ts`) to process email confirmation links. It extracts the token hash and type from the URL, verifies the OTP with Supabase Auth, and redirects the user.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#_snippet_8

LANGUAGE: TypeScript
CODE:
```
import { type EmailOtpType } from '@supabase/supabase-js'
import { type NextRequest } from 'next/server'

import { createClient } from '@/utils/supabase/server'
import { redirect } from 'next/navigation'

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url)
  const token_hash = searchParams.get('token_hash')
  const type = searchParams.get('type') as EmailOtpType | null
  const next = searchParams.get('next') ?? '/'

  if (token_hash && type) {
    const supabase = await createClient()

    const { error } = await supabase.auth.verifyOtp({
      type,
      token_hash,
    })
    if (!error) {
      // redirect user to specified redirect URL or root of app
      redirect(next)
    } else {
      // redirect the user to an error page with some instructions
      redirect('/error')
    }
  }

  // redirect the user to an error page with some instructions
  redirect('/error')
}
```

----------------------------------------

TITLE: Setting Up the App Component with Supabase Authentication
DESCRIPTION: Implements the main App component with Supabase authentication integration. Handles session retrieval on mount and subscribes to auth state changes to keep the user state up to date.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-vue.mdx#2025-04-21_snippet_7

LANGUAGE: html
CODE:
```
<template>
  <ion-app>
    <ion-router-outlet />
  </ion-app>
</template>

<script lang="ts">
  import { IonApp, IonRouterOutlet, useIonRouter } from '@ionic/vue'
  import { defineComponent, ref, onMounted } from 'vue'
  import { supabase } from './supabase'

  export default defineComponent({
    name: 'App',
    components: {
      IonApp,
      IonRouterOutlet,
    },
    setup() {
      const router = useIonRouter()
      const user = ref(null)

      onMounted(() => {
        supabase.auth
          .getSession()
          .then((resp) => {
            user.value = resp.data.session?.user ?? null
          })
          .catch((err) => {
            console.log('Error fetching session', err)
          })

        supabase.auth.onAuthStateChange((_event, session) => {
          user.value = session?.user ?? null
        })
      })

      return { user }
    },
  })
</script>
```

----------------------------------------

TITLE: Creating a Profile Avatar Component with Supabase Storage
DESCRIPTION: Implements an avatar component that allows users to upload and display profile photos using the device camera and Supabase Storage. Handles image upload, download, and display with proper UI feedback.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-vue.mdx#2025-04-21_snippet_11

LANGUAGE: html
CODE:
```
<template>
  <div class="avatar">
    <div class="avatar_wrapper" @click="uploadAvatar">
      <img v-if="avatarUrl" :src="avatarUrl" />
      <ion-icon v-else name="person" class="no-avatar"></ion-icon>
    </div>
  </div>
</template>

<script lang="ts">
  import { ref, toRefs, watch, defineComponent } from 'vue'
  import { supabase } from '../supabase'
  import { Camera, CameraResultType } from '@capacitor/camera'
  import { IonIcon } from '@ionic/vue'
  import { person } from 'ionicons/icons'
  export default defineComponent({
    name: 'AppAvatar',
    props: { path: String },
    emits: ['upload', 'update:path'],
    components: { IonIcon },
    setup(prop, { emit }) {
      const { path } = toRefs(prop)
      const avatarUrl = ref('')

      const downloadImage = async () => {
        try {
          const { data, error } = await supabase.storage.from('avatars').download(path.value)
          if (error) throw error
          avatarUrl.value = URL.createObjectURL(data!)
        } catch (error: any) {
          console.error('Error downloading image: ', error.message)
        }
      }

      const uploadAvatar = async () => {
        try {
          const photo = await Camera.getPhoto({
            resultType: CameraResultType.DataUrl,
          })
          if (photo.dataUrl) {
            const file = await fetch(photo.dataUrl)
              .then((res) => res.blob())
              .then((blob) => new File([blob], 'my-file', { type: `image/${photo.format}` }))

            const fileName = `${Math.random()}-${new Date().getTime()}.${photo.format}`
            const { error: uploadError } = await supabase.storage
              .from('avatars')
              .upload(fileName, file)
            if (uploadError) {
              throw uploadError
            }
            emit('update:path', fileName)
            emit('upload')
          }
        } catch (error) {
          console.log(error)
        }
      }

      watch(path, () => {
        if (path.value) downloadImage()
      })

      return { avatarUrl, uploadAvatar, person }
    },
  })
</script>
<style>
  .avatar {
    display: block;
    margin: auto;
    min-height: 150px;
  }
  .avatar .avatar_wrapper {
    margin: 16px auto 16px;
    border-radius: 50%;
    overflow: hidden;
    height: 150px;
    aspect-ratio: 1;
    background: var(--ion-color-step-50);
    border: thick solid var(--ion-color-step-200);
  }
  .avatar .avatar_wrapper:hover {
    cursor: pointer;
  }
  .avatar .avatar_wrapper ion-icon.no-avatar {
    width: 100%;
    height: 115%;
  }
  .avatar img {
    display: block;
    object-fit: cover;
    width: 100%;
    height: 100%;
  }
</style>
```

----------------------------------------

TITLE: Enabling pgvector Extension in PostgreSQL
DESCRIPTION: SQL command to enable the pgvector extension in PostgreSQL for vector operations
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/semantic-search.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create extension vector
with
  schema extensions;
```

----------------------------------------

TITLE: Implementing Flutter Login Screen with Google Sign-In
DESCRIPTION: Creates a login screen with Google authentication using Supabase and Google Sign-In package. Handles auth state changes and token management for sign-in flow.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-07-18-flutter-authentication.mdx#2025-04-21_snippet_4

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:google_sign_in/google_sign_in.dart';
import 'package:myauthapp/main.dart';
import 'package:myauthapp/screens/profile_screen.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({super.key});

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  @override
  void initState() {
    _setupAuthListener();
    super.initState();
  }

  void _setupAuthListener() {
    supabase.auth.onAuthStateChange.listen((data) {
      final event = data.event;
      if (event == AuthChangeEvent.signedIn) {
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(
            builder: (context) => const ProfileScreen(),
          ),
        );
      }
    });
  }

  Future<AuthResponse> _googleSignIn() async {
    const webClientId = 'my-web.apps.googleusercontent.com';
    const iosClientId = 'my-ios.apps.googleusercontent.com';

    final GoogleSignIn googleSignIn = GoogleSignIn(
      clientId: iosClientId,
      serverClientId: webClientId,
    );
    final googleUser = await googleSignIn.signIn();
    final googleAuth = await googleUser!.authentication;
    final accessToken = googleAuth.accessToken;
    final idToken = googleAuth.idToken;

    if (accessToken == null) {
      throw 'No Access Token found.';
    }
    if (idToken == null) {
      throw 'No ID Token found.';
    }

    return supabase.auth.signInWithIdToken(
      provider: OAuthProvider.google,
      idToken: idToken,
      accessToken: accessToken,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Login'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _googleSignIn,
          child: const Text('Google login'),
        ),
      ),
    );
  }
}
```

----------------------------------------

TITLE: Implementing Account Management Component in React Native with TypeScript
DESCRIPTION: A React Native component for managing user account details including username, website, and avatar. Uses Supabase for data storage and includes profile fetching and updating functionality.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-expo-react-native.mdx#2025-04-22_snippet_5

LANGUAGE: tsx
CODE:
```
import { useState, useEffect } from 'react'
import { supabase } from '../lib/supabase'
import { StyleSheet, View, Alert } from 'react-native'
import { Button, Input } from '@rneui/themed'
import { Session } from '@supabase/supabase-js'

export default function Account({ session }: { session: Session }) {
  const [loading, setLoading] = useState(true)
  const [username, setUsername] = useState('')
  const [website, setWebsite] = useState('')
  const [avatarUrl, setAvatarUrl] = useState('')

  useEffect(() => {
    if (session) getProfile()
  }, [session])

  async function getProfile() {
    try {
      setLoading(true)
      if (!session?.user) throw new Error('No user on the session!')

      const { data, error, status } = await supabase
        .from('profiles')
        .select(`username, website, avatar_url`)
        .eq('id', session?.user.id)
        .single()
      if (error && status !== 406) {
        throw error
      }

      if (data) {
        setUsername(data.username)
        setWebsite(data.website)
        setAvatarUrl(data.avatar_url)
      }
    } catch (error) {
      if (error instanceof Error) {
        Alert.alert(error.message)
      }
    } finally {
      setLoading(false)
    }
  }

  async function updateProfile({
    username,
    website,
    avatar_url,
  }: {
    username: string
    website: string
    avatar_url: string
  }) {
    try {
      setLoading(true)
      if (!session?.user) throw new Error('No user on the session!')

      const updates = {
        id: session?.user.id,
        username,
        website,
        avatar_url,
        updated_at: new Date(),
      }

      const { error } = await supabase.from('profiles').upsert(updates)

      if (error) {
        throw error
      }
    } catch (error) {
      if (error instanceof Error) {
        Alert.alert(error.message)
      }
    } finally {
      setLoading(false)
    }
  }

  return (
    <View style={styles.container}>
      <View style={[styles.verticallySpaced, styles.mt20]}>
        <Input label="Email" value={session?.user?.email} disabled />
      </View>
      <View style={styles.verticallySpaced}>
        <Input label="Username" value={username || ''} onChangeText={(text) => setUsername(text)} />
      </View>
      <View style={styles.verticallySpaced}>
        <Input label="Website" value={website || ''} onChangeText={(text) => setWebsite(text)} />
      </View>

      <View style={[styles.verticallySpaced, styles.mt20]}>
        <Button
          title={loading ? 'Loading ...' : 'Update'}
          onPress={() => updateProfile({ username, website, avatar_url: avatarUrl })}
          disabled={loading}
        />
      </View>

      <View style={styles.verticallySpaced}>
        <Button title="Sign Out" onPress={() => supabase.auth.signOut()} />
      </View>
    </View>
  )
}

const styles = StyleSheet.create({
  container: {
    marginTop: 40,
    padding: 12,
  },
  verticallySpaced: {
    paddingTop: 4,
    paddingBottom: 4,
    alignSelf: 'stretch',
  },
  mt20: {
    marginTop: 20,
  },
})
```

----------------------------------------

TITLE: Creating Todo Table with Row Level Security Policies in PostgreSQL
DESCRIPTION: SQL schema for creating a todos table with user authentication and row level security policies. This schema defines the table structure, enables row level security, and creates policies for insert, select, update, and delete operations based on user authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/todo-list/sveltejs-todo-list/README.md#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table todos (
  id bigint generated by default as identity primary key,
  user_id uuid references auth.users not null,
  task text check (char_length(task) > 3),
  is_complete boolean default false,
  inserted_at timestamp with time zone default timezone('utc'::text, now()) not null
);

alter table todos enable row level security;

create policy "Individuals can create todos." on todos for
    insert with check ((select auth.uid()) = user_id);

create policy "Individuals can view their own todos. " on todos for
    select using ((select auth.uid()) = user_id);

create policy "Individuals can update their own todos." on todos for
    update using ((select auth.uid()) = user_id);

create policy "Individuals can delete their own todos." on todos for
    delete using ((select auth.uid()) = user_id);
```

----------------------------------------

TITLE: Fetching Data Client-Side with React Query and Supabase in Next.js
DESCRIPTION: This code demonstrates how to fetch data on the client side using React Query and Supabase in a Next.js client component. It handles loading and error states, and renders the fetched country data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-12-react-query-nextjs-app-router-cache-helpers.mdx#2025-04-21_snippet_11

LANGUAGE: tsx
CODE:
```
'use client'

import useSupabaseBrowser from '@/utils/supabase-browser'
import { getCountryById } from '@/queries/get-country-by-id'
import { useQuery } from '@supabase-cache-helpers/postgrest-react-query'

export default function CountryPage({ params }: { params: { id: number } }) {
  const supabase = useSupabaseBrowser()
  const { data: country, isLoading, isError } = useQuery(getCountryById(supabase, params.id))

  if (isLoading) {
    return <div>Loading...</div>
  }

  if (isError || !country) {
    return <div>Error</div>
  }

  return (
    <div>
      <h1>{country.name}</h1>
    </div>
  )
}
```

----------------------------------------

TITLE: Selecting Data from PostgreSQL Table with Granted Privileges
DESCRIPTION: This snippet demonstrates how a role (senior_dev) can now select data from a table after being granted the select privilege.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_14

LANGUAGE: sql
CODE:
```
postgres=> select * from public.apps;
┌────┬──────────┐
│ id │   name   │
├────┼──────────┤
│  1 │ next app │
└────┴──────────┘
(1 row)
```

----------------------------------------

TITLE: Implementing InfiniteList Component with Supabase in React
DESCRIPTION: A reusable component that handles infinite scrolling for Supabase tables. It uses the Intersection Observer API to detect when the user has scrolled to the bottom and automatically fetches the next page of data. The component includes customizable renderers for items, loading states, empty states, and end-of-list messages.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/infinite-query-hook.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
'use client'

import { cn } from '@/lib/utils'
import {
  SupabaseQueryHandler,
  SupabaseTableData,
  SupabaseTableName,
  useInfiniteQuery,
} from '@/hooks/use-infinite-query'
import * as React from 'react'

interface InfiniteListProps<TableName extends SupabaseTableName> {
  tableName: TableName
  columns?: string
  pageSize?: number
  trailingQuery?: SupabaseQueryHandler<TableName>
  renderItem: (item: SupabaseTableData<TableName>, index: number) => React.ReactNode
  className?: string
  renderNoResults?: () => React.ReactNode
  renderEndMessage?: () => React.ReactNode
  renderSkeleton?: (count: number) => React.ReactNode
}

const DefaultNoResults = () => (
  <div className="text-center text-muted-foreground py-10">No results.</div>
)

const DefaultEndMessage = () => (
  <div className="text-center text-muted-foreground py-4 text-sm">You&apos;ve reached the end.</div>
)

const defaultSkeleton = (count: number) => (
  <div className="flex flex-col gap-2 px-4">
    {Array.from({ length: count }).map((_, index) => (
      <div key={index} className="h-4 w-full bg-muted animate-pulse" />
    ))}
  </div>
)

export function InfiniteList<TableName extends SupabaseTableName>({
  tableName,
  columns = '*',
  pageSize = 20,
  trailingQuery,
  renderItem,
  className,
  renderNoResults = DefaultNoResults,
  renderEndMessage = DefaultEndMessage,
  renderSkeleton = defaultSkeleton,
}: InfiniteListProps<TableName>) {
  const { data, isFetching, hasMore, fetchNextPage, isSuccess } = useInfiniteQuery({
    tableName,
    columns,
    pageSize,
    trailingQuery,
  })

  // Ref for the scrolling container
  const scrollContainerRef = React.useRef<HTMLDivElement>(null)

  // Intersection observer logic - target the last rendered *item* or a dedicated sentinel
  const loadMoreSentinelRef = React.useRef<HTMLDivElement>(null)
  const observer = React.useRef<IntersectionObserver | null>(null)

  React.useEffect(() => {
    if (observer.current) observer.current.disconnect()

    observer.current = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting && hasMore && !isFetching) {
          fetchNextPage()
        }
      },
      {
        root: scrollContainerRef.current, // Use the scroll container for scroll detection
        threshold: 0.1, // Trigger when 10% of the target is visible
        rootMargin: '0px 0px 100px 0px', // Trigger loading a bit before reaching the end
      }
    )

    if (loadMoreSentinelRef.current) {
      observer.current.observe(loadMoreSentinelRef.current)
    }

    return () => {
      if (observer.current) observer.current.disconnect()
    }
  }, [isFetching, hasMore, fetchNextPage])

  return (
    <div ref={scrollContainerRef} className={cn('relative h-full overflow-auto', className)}>
      <div>
        {isSuccess && data.length === 0 && renderNoResults()}

        {data.map((item, index) => renderItem(item, index))}

        {isFetching && renderSkeleton && renderSkeleton(pageSize)}

        <div ref={loadMoreSentinelRef} style={{ height: '1px' }} />

        {!hasMore && data.length > 0 && renderEndMessage()}
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Creating Trigger for New User - SQL
DESCRIPTION: Sets up a trigger function to automatically insert new user details into the public.profiles table when a user is created in auth.users.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/managing-user-data.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- inserts a row into public.profiles
create function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = ''
as $$
begin
  insert into public.profiles (id, first_name, last_name)
  values (new.id, new.raw_user_meta_data ->> 'first_name', new.raw_user_meta_data ->> 'last_name');
  return new;
end;
$$;

-- trigger the function every time a user is created
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();
```

----------------------------------------

TITLE: Creating Profiles Table - SQL
DESCRIPTION: Defines a new table in the public schema to store user profiles, referencing the auth.users table with cascading deletions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/managing-user-data.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table public.profiles (
  id uuid not null references auth.users on delete cascade,
  first_name text,
  last_name text,

  primary key (id)
);

alter table public.profiles enable row level security;
```

----------------------------------------

TITLE: Text Embeddings Generation with GTE-Small Model
DESCRIPTION: Demonstrates how to generate text embeddings using the gte-small model in an Edge Function. Handles request parameters and returns normalized embeddings.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/ai-models.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const model = new Supabase.ai.Session('gte-small')

Deno.serve(async (req: Request) => {
  const params = new URL(req.url).searchParams
  const input = params.get('input')
  const output = await model.run(input, { mean_pool: true, normalize: true })
  return new Response(JSON.stringify(output), {
    headers: {
      'Content-Type': 'application/json',
      Connection: 'keep-alive',
    },
  })
})
```

----------------------------------------

TITLE: Sign Out using Supabase
DESCRIPTION: This Swift snippet demonstrates how to sign out a user using Supabase's `signOut` method. It calls the `signOut` function to remove the user's session and local storage data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-facebook.mdx#2025-04-21_snippet_6

LANGUAGE: swift
CODE:
```
func signOut() async throws {
  try await supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Streaming Updates using Postgres Changes in JavaScript
DESCRIPTION: This JavaScript code demonstrates how to stream updated rows in a table using Postgres Changes with the Supabase client. It initializes the Supabase client, creates a channel, and subscribes to 'postgres_changes' events with the 'UPDATE' event type and a specified schema. Whenever a row is updated, the payload is logged to the console.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/subscribing-to-database-changes.mdx#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
// @noImplicitAny: false
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

// ---cut---
const channel = supabase
  .channel('schema-db-changes')
  .on(
    'postgres_changes',
    {
      event: 'UPDATE',
      schema: 'public',
    },
    (payload) => console.log(payload)
  )
  .subscribe()
```

----------------------------------------

TITLE: Private Bucket Access with JWT
DESCRIPTION: Demonstrates downloading a file from a private bucket using an authorization header with user's JWT, which allows fine-grained access control through RLS policies
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/buckets/fundamentals.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
// Download method for private bucket
const { data, error } = await supabase.storage
  .from('private-bucket')
  .download('path/to/file', {
    headers: { Authorization: 'Bearer ' + userJwt }
  })
```

----------------------------------------

TITLE: Next.js Middleware for Authentication
DESCRIPTION: This TypeScript snippet shows how to implement Next.js middleware to protect routes. It checks if a user is signed in and redirects to the home page if not, while allowing requests from users whose email ends with '@gmail.com'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_11

LANGUAGE: typescript
CODE:
```
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export async function middleware(req: NextRequest) {
  // We need to create a response and hand it to the supabase client to be able to modify the response headers.
  const res = NextResponse.next()
  // Create authenticated Supabase Client.
  const supabase = createMiddlewareClient({ req, res })
  // Check if we have a session
  const {
    data: { user },
  } = await supabase.auth.getUser()

  // Check auth condition
  if (user?.email?.endsWith('@gmail.com')) {
    // Authentication successful, forward request to protected route.
    return res
  }

  // Auth condition not met, redirect to home page.
  const redirectUrl = req.nextUrl.clone()
  redirectUrl.pathname = '/' 
  redirectUrl.searchParams.set(`redirectedFrom`, req.nextUrl.pathname)
  return NextResponse.redirect(redirectUrl)
}

export const config = {
  matcher: '/middleware-protected/:path*',
}
```

----------------------------------------

TITLE: Create Employees Table (SQL)
DESCRIPTION: This SQL code creates the `employees` table with columns for `id`, `name`, `email`, and `created_at`. The `id` column is the primary key and is auto-generated.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_1

LANGUAGE: sql
CODE:
```
create table if not exists employees (
  id bigint primary key generated always as identity,
  name text not null,
  email text,
  created_at timestamptz default now()
);
```

----------------------------------------

TITLE: Enabling RLS with JWT Authentication for REST API
DESCRIPTION: Sets up Row Level Security on a document_sections table with a policy that uses Supabase's auth.uid() function to get the user ID from a JWT token. This approach works with the auto-generated REST API and external auth providers.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/rag-with-permissions.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
-- enable row level security
alter table document_sections enable row level security;

-- setup RLS for select operations
create policy "Users can query their own document sections"
on document_sections for select to authenticated using (
  document_id in (
    select id
    from documents
    where (owner_id = (select auth.uid()))
  )
);
```

----------------------------------------

TITLE: Configuring Environment Variables for Supabase in React
DESCRIPTION: Sets up the necessary environment variables for Supabase URL and anonymous key in a .env file for a React project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react/password-based-auth.mdx#2025-04-21_snippet_0

LANGUAGE: env
CODE:
```
VITE_SUPABASE_URL=
VITE_SUPABASE_ANON_KEY=
```

----------------------------------------

TITLE: Environment Variables Setup for Supabase
DESCRIPTION: Instructions for configuring environment variables in a .env file for Supabase integration in a React application. These variables are essential for connecting to the Supabase backend.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react/social-auth.mdx#2025-04-21_snippet_0

LANGUAGE: env
CODE:
```
VITE_SUPABASE_URL=
VITE_SUPABASE_ANON_KEY=
```

----------------------------------------

TITLE: PostgreSQL Schema for User Profiles with Row Level Security
DESCRIPTION: SQL script that creates a profiles table with row level security policies for user management. The script sets up table constraints, access policies, realtime publication, and storage bucket for avatars.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/solid-user-management/README.md#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- Create a table for Public Profiles
create table
	profiles (
		id uuid references auth.users not null,
		updated_at timestamp
		with
			time zone,
			username text unique,
			avatar_url text,
			website text,
			primary key (id),
			unique (username),
			constraint username_length check (char_length(username) >= 3)
	);

alter table
	profiles enable row level security;

create policy "Public profiles are viewable by everyone." on profiles for
select
	using (true);

create policy "Users can insert their own profile." on profiles for insert
with
	check ((select auth.uid()) = id);

create policy "Users can update own profile." on profiles for
update
	using ((select auth.uid()) = id);

-- Set up Realtime!
begin;

drop
	publication if exists supabase_realtime;

create publication supabase_realtime;

commit;

alter
	publication supabase_realtime add table profiles;

-- Set up Storage!
insert into
	storage.buckets (id, name)
values
	('avatars', 'avatars');

create policy "Avatar images are publicly accessible." on storage.objects for
select
	using (bucket_id = 'avatars');

create policy "Anyone can upload an avatar." on storage.objects for insert
with
	check (bucket_id = 'avatars');
```

----------------------------------------

TITLE: Decoded Supabase User JWT Payload
DESCRIPTION: This JavaScript code snippet shows the decoded payload of a Supabase user-specific JWT.  It includes claims about the user, such as `aud` (audience), `exp` (expiration time), `sub` (subject), `email`, `app_metadata`, `user_metadata`, and `role`. The `sub` claim represents the user's UUID, and the `role` is typically set to `authenticated`.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/jwts.mdx#2025-04-21_snippet_10

LANGUAGE: javascript
CODE:
```
{
  "aud": "authenticated",
  "exp": 1615824388,
  "sub": "0334744a-f2a2-4aba-8c8a-6e748f62a172",
  "email": "valid.email@supabase.io",
  "app_metadata": {
    "provider": "email"
  },
  "user_metadata": null,
  "role": "authenticated"
}
```

----------------------------------------

TITLE: Using Supabase in Next.js TypeScript Client Components
DESCRIPTION: TypeScript implementation for using Supabase in a Next.js Client Component. This example shows how to fetch todos with proper TypeScript types for the database, providing type safety throughout the component.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_17

LANGUAGE: tsx
CODE:
```
'use client'

import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { useEffect, useState } from 'react'

import type { Database } from '@/lib/database.types'

type Todo = Database['public']['Tables']['todos']['Row']

export default function Page() {
  const [todos, setTodos] = useState<Todo[] | null>(null)
  const supabase = createClientComponentClient<Database>()

  useEffect(() => {
    const getData = async () => {
      const { data } = await supabase.from('todos').select()
      setTodos(data)
    }

    getData()
  }, [])

  return todos ? <pre>{JSON.stringify(todos, null, 2)}</pre> : <p>Loading todos...</p>
}
```

----------------------------------------

TITLE: Implementing OAuth and Magic Link Authentication in React Native
DESCRIPTION: This code snippet demonstrates how to implement OAuth (with GitHub) and magic link authentication in a React Native app using Supabase. It includes functions for handling deep linking and creating sessions from URL parameters.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-16-react-native-authentication.mdx#2025-04-22_snippet_7

LANGUAGE: tsx
CODE:
```
import { Button } from 'react-native'
import { makeRedirectUri } from 'expo-auth-session'
import * as QueryParams from 'expo-auth-session/build/QueryParams'
import * as WebBrowser from 'expo-web-browser'
import * as Linking from 'expo-linking'
import { supabase } from 'app/utils/supabase'

WebBrowser.maybeCompleteAuthSession() // required for web only
const redirectTo = makeRedirectUri()

const createSessionFromUrl = async (url: string) => {
  const { params, errorCode } = QueryParams.getQueryParams(url)

  if (errorCode) throw new Error(errorCode)
  const { access_token, refresh_token } = params

  if (!access_token) return

  const { data, error } = await supabase.auth.setSession({
    access_token,
    refresh_token,
  })
  if (error) throw error
  return data.session
}

const performOAuth = async () => {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'github',
    options: {
      redirectTo,
      skipBrowserRedirect: true,
    },
  })
  if (error) throw error

  const res = await WebBrowser.openAuthSessionAsync(data?.url ?? '', redirectTo)

  if (res.type === 'success') {
    const { url } = res
    await createSessionFromUrl(url)
  }
}

const sendMagicLink = async () => {
  const { error } = await supabase.auth.signInWithOtp({
    email: 'example@email.com',
    options: {
      emailRedirectTo: redirectTo,
    },
  })

  if (error) throw error
  // Email sent.
}

export default function Auth() {
  // Handle linking into app from email app.
  const url = Linking.useURL()
  if (url) createSessionFromUrl(url)

  return (
    <>
      <Button onPress={performOAuth} title="Sign in with Github" />
      <Button onPress={sendMagicLink} title="Send Magic Link" />
    </>
  )
}
```

----------------------------------------

TITLE: Revoking Public Execute Permission
DESCRIPTION: Shows the process of revoking execute permission from the public role, which effectively prevents junior_dev from executing the function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-11-postgres-roles-and-privileges.mdx#2025-04-21_snippet_30

LANGUAGE: bash
CODE:
```
# as postgres
postgres=> revoke execute on function add(integer, integer) from public;
REVOKE
postgres=> \df+ add
┌────────┬──────┬──────────────────┬─────────────────────┬──────┬────────────┬──────────┬──────────┬──────────┬──────────────────────────┬──────────┐
│ Schema │ Name │ Result data type │ Argument data types │ Type │ Volatility │ Parallel │   Owner  │ Security │     Access privileges    │ Language │
├────────┼──────┼──────────────────┼─────────────────────┼──────┼────────────┼──────────┼──────────┼──────────┼──────────────────────────┼──────────│
│ public │ add  │ integer          │ integer, integer    │ func │ volatile   │ unsafe   │ postgres │ invoker  │ postgres=X/postgres     ↵│ sql      │
│        │      │                  │                     │      │            │          │          │          │ anon=X/postgres         ↵│          │
│        │      │                  │                     │      │            │          │          │          │ authenticated=X/postgres↵│          │
│        │      │                  │                     │      │            │          │          │          │ service_role=X/postgres  │          │
│        │      │                  │                     │      │            │          │          │          │                          │          │
└────────┴──────┴──────────────────┴─────────────────────┴──────┴────────────┴──────────┴──────────┴──────────┴──────────────────────────┴──────────┘
(1 row)
```

----------------------------------------

TITLE: Setting Auth Context in Edge Function
DESCRIPTION: Demonstrates how to set up authentication context in a Supabase Edge Function by extracting and using the Authorization header token.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/auth.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { createClient } from 'jsr:@supabase/supabase-js@2'

Deno.serve(async (req: Request) => {

  const supabaseClient = createClient(
    Deno.env.get('SUPABASE_URL') ?? '',
    Deno.env.get('SUPABASE_ANON_KEY') ?? '',
  );

  // Get the session or user object
  const authHeader = req.headers.get('Authorization')!;
  const token = authHeader.replace('Bearer ', '');
  const { data } = await supabaseClient.auth.getUser(token);

})
```

----------------------------------------

TITLE: Creating Login Route Handler in JavaScript
DESCRIPTION: This JavaScript snippet shows how to create a server-side route handler for user login in a Next.js application using Supabase. It extracts form data from a POST request to authenticate the user with Supabase, and then redirects the user using Next.js utilities. Dependencies include @supabase/auth-helpers-nextjs and next/headers.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_10

LANGUAGE: JavaScript
CODE:
```
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { cookies } from 'next/headers'
import { NextResponse } from 'next/server'

export async function POST(request) {
  const requestUrl = new URL(request.url)
  const formData = await request.formData()
  const email = formData.get('email')
  const password = formData.get('password')
  const cookieStore = cookies()
  const supabase = createRouteHandlerClient({ cookies: () => cookieStore })

  await supabase.auth.signInWithPassword({
    email,
    password,
  })

  return NextResponse.redirect(requestUrl.origin, {
    status: 301,
  })
}

```

----------------------------------------

TITLE: Using Supabase in Next.js Client Components
DESCRIPTION: Example showing how to use the Supabase client in a Next.js Client Component to fetch todos. This approach utilizes the createClientComponentClient function and React hooks to manage state and fetch data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_16

LANGUAGE: jsx
CODE:
```
'use client'

import { createClientComponentClient } from '@supabase/auth-helpers-nextjs'
import { useEffect, useState } from 'react'

export default function Page() {
  const [todos, setTodos] = useState()
  const supabase = createClientComponentClient()

  useEffect(() => {
    const getData = async () => {
      const { data } = await supabase.from('todos').select()
      setTodos(data)
    }

    getData()
  }, [])

  return todos ? <pre>{JSON.stringify(todos, null, 2)}</pre> : <p>Loading todos...</p>
}
```

----------------------------------------

TITLE: Using Supabase in Next.js TypeScript Server Actions
DESCRIPTION: TypeScript implementation for using Supabase within Next.js Server Actions. This example demonstrates how to create and insert a new todo with proper type safety using the createServerActionClient function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_21

LANGUAGE: tsx
CODE:
```
import { cookies } from 'next/headers'
import { createServerActionClient } from '@supabase/auth-helpers-nextjs'
import { revalidatePath } from 'next/cache'

import type { Database } from '@/lib/database.types'

export default async function NewTodo() {
  const addTodo = async (formData: FormData) => {
    'use server'

    const title = formData.get('title')
    const cookieStore = cookies()
    const supabase = createServerActionClient<Database>({ cookies: () => cookieStore })
    await supabase.from('todos').insert({ title })
    revalidatePath('/')
  }

  return (
    <form action={addTodo}>
      <input name="title" />
    </form>
  )
}
```

----------------------------------------

TITLE: Starting Local Supabase Database
DESCRIPTION: Command to initialize and start a local Supabase database instance for development purposes.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/database/employees/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npx supabase db start
```

----------------------------------------

TITLE: Enabling pgvector Extension in PostgreSQL
DESCRIPTION: This SQL snippet enables the pgvector extension in the PostgreSQL database, which is required for vector operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-02-13-matryoshka-embeddings.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create extension vector
with
  schema extensions;
```

----------------------------------------

TITLE: Implementing Phone-based MFA with Supabase Auth in TypeScript
DESCRIPTION: This code snippet shows how to implement phone-based multi-factor authentication using Supabase Auth. It includes sending an SMS or WhatsApp message challenge and verifying the received code. The user's 'aal' claim in the JWT is upgraded to aal2 upon successful verification.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-14-third-party-auth-mfa-phone-send-hooks.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// Send an SMS or WhatsApp message to the user
const { data: { challengeId } } = await supabase.auth.mfa.challenge({
  factorId,
})

// To verify the code received by the user
await supabase.auth.mfa.verify({
  factorId,
  challengeId,
  code: '123456',
})

// The user's `aal` claim in the JWT 
// will be upgraded to aal2
```

----------------------------------------

TITLE: Protected API Route Implementation with Supabase Auth
DESCRIPTION: Server-side API route implementation with authentication protection and database queries using Supabase client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_31

LANGUAGE: typescript
CODE:
```
import { supabaseServerClient, withApiAuth } from '@supabase/auth-helpers-sveltekit'
import type { RequestHandler } from './__types/protected-route'

interface TestTable {
  id: string
  created_at: string
}

interface GetOutput {
  data: TestTable[]
}

export const GET: RequestHandler<GetOutput> = async ({ locals, request }) =>
  withApiAuth({ user: locals.user }, async () => {
    // Run queries with RLS on the server
    const { data } = await supabaseServerClient(request).from('test').select('*')

    return {
      status: 200,
      body: { data },
    }
  })
```

LANGUAGE: typescript
CODE:
```
import type { RequestHandler } from './$types';
import { withAuth } from '@supabase/auth-helpers-sveltekit';
import { json, redirect } from '@sveltejs/kit';

interface TestTable {
  id: string;
  created_at: string;
}

export const GET: RequestHandler = withAuth(async ({ session, getSupabaseClient }) => {
  if (!session.user) {
    redirect(303, '/');
  }

  const { data } = await getSupabaseClient()
    .from<TestTable>('test')
    .select('*');

  return json({ data });
);
```

----------------------------------------

TITLE: Implement Login/Signup Page (Next.js)
DESCRIPTION: Provides a React component for user authentication. It handles email and password input, calls Supabase `signInWithPassword` and `signUp` methods, and redirects the user upon success or logs errors.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#_snippet_17

LANGUAGE: TSX
CODE:
```
import { useRouter } from 'next/router'
import { useState } from 'react'

import { createClient } from '@/utils/supabase/component'

export default function LoginPage() {
  const router = useRouter()
  const supabase = createClient()

  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')

  async function logIn() {
    const { error } = await supabase.auth.signInWithPassword({ email, password })
    if (error) {
      console.error(error)
    }
    router.push('/')
  }

  async function signUp() {
    const { error } = await supabase.auth.signUp({ email, password })
    if (error) {
      console.error(error)
    }
    router.push('/')
  }

  return (
    <main>
      <form>
        <label htmlFor="email">Email:</label>
        <input id="email" type="email" value={email} onChange={(e) => setEmail(e.target.value)} />
        <label htmlFor="password">Password:</label>
        <input
          id="password"
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
        />
        <button type="button" onClick={logIn}>
          Log in
        </button>
        <button type="button" onClick={signUp}>
          Sign up
        </button>
      </form>
    </main>
  )
}
```

----------------------------------------

TITLE: Basic Supabase Queries with Promise and Async/Await
DESCRIPTION: Demonstrates two different syntax approaches for querying data from Supabase: Promise-based (.then) and async/await.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-03-11-using-supabase-replit.mdx#2025-04-21_snippet_2

LANGUAGE: jsx
CODE:
```
// .then() syntax
supabase.
  .from('countries')
  .select('*')
  .limit(5)
  .then(console.log)
  .catch(console.error)

// or...
// async/await syntax
const main = async() => {
  const { data, error } = supabase
    .from('countries')
    .select('*')
    .limit(5)

  if (error) {
    console.log(error)
    return
  }

  console.log(data)
}
main()
```

----------------------------------------

TITLE: RLS Policy Role Assignment for Authenticated Users
DESCRIPTION: Examples of creating policies with different role assignments for authenticated and anonymous users
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/database-rls-policies.md#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create policy "Profiles are viewable by everyone"
on profiles
for select
to authenticated, anon
using ( true );

create policy "Public profiles are viewable only by authenticated users"
on profiles
for select
to authenticated
using ( true );
```

----------------------------------------

TITLE: Full Text Search on Description Using JavaScript
DESCRIPTION: JavaScript implementation using Supabase client to perform a full text search on the books table, searching the description column for the word 'big'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_14

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.from('books').select().textSearch('description', `'big'`)
```

----------------------------------------

TITLE: Fetching User Data with Supabase in TypeScript
DESCRIPTION: This TypeScript snippet demonstrates the same functionality as the JavaScript version, but with type annotations for better type safety. It retrieves user information and related data, ensuring session validation before querying.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
import { User, createPagesServerClient } from '@supabase/auth-helpers-nextjs'
import { GetServerSidePropsContext } from 'next'

export default function ProtectedPage({ user, data }: { user: User; data: any }) {
  return (
    <>
      <div>Protected content for {user.email}</div>
      <pre>{JSON.stringify(data, null, 2)}</pre>
      <pre>{JSON.stringify(user, null, 2)}</pre>
    </>
  )
}

export const getServerSideProps = async (ctx: GetServerSidePropsContext) => {
  // Create authenticated Supabase Client
  const supabase = createPagesServerClient(ctx)
  // Check if we have a session
  const {
    data: { user },
  } = await supabase.auth.getUser()

  if (!user)
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    }

  // Run queries with RLS on the server
  const { data } = await supabase.from('users').select('*')

  return {
    props: {
      user,
      data: data ?? [],
    },
  }
}
```

----------------------------------------

TITLE: Creating Auto-Update Trigger Function
DESCRIPTION: Implements an auto-updating updated_at column using a PL/pgSQL function and trigger combination.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-02-27-cracking-postgres-interview.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
CREATE FUNCTION set_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  new.updated_at = now();
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER handle_updated_at
  BEFORE UPDATE ON students
  FOR EACH ROW
  EXECUTE PROCEDURE set_updated_at();
```

----------------------------------------

TITLE: Handling Supabase OAuth Callback and Token Exchange in TypeScript
DESCRIPTION: This code snippet shows how to handle the OAuth callback from Supabase, exchange the authorization code for access and refresh tokens, and store them. It uses the PKCE flow and handles the callback securely.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/integrations/build-a-supabase-integration.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
router.get('/connect-supabase/oauth2/callback', async (ctx) => {
  // Make sure the codeVerifier is present for the user's session.
  const codeVerifier = ctx.state.session.get('codeVerifier') as string
  if (!codeVerifier) throw new Error('No codeVerifier!')

  // Exchange the authorization code for an access token.
  const tokens = await fetch(config.tokenUri, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded',
      Accept: 'application/json',
      Authorization: `Basic ${btoa(`${config.clientId}:${config.clientSecret}`)}`,
    },
    body: new URLSearchParams({
      grant_type: 'authorization_code',
      code: ctx.request.url.searchParams.get('code') || '',
      redirect_uri: config.redirectUri,
      code_verifier: codeVerifier,
    }),
  }).then((res) => res.json())
  console.log('tokens', tokens)

  // Store the tokens in your DB for future use.

  ctx.response.body = 'Success'
})
```

----------------------------------------

TITLE: Analyzing Index Usage Statistics in PostgreSQL
DESCRIPTION: SQL query to analyze how frequently indexes are used when accessing tables, showing percentage of index usage and table sizes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/steps-to-improve-query-performance-with-indexes-q8PoC9.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select
  relname,
  100 * idx_scan / (seq_scan + idx_scan) as percent_of_times_index_used,
  n_live_tup as rows_in_table
from pg_stat_user_tables
where seq_scan + idx_scan > 0
order by n_live_tup desc;
```

----------------------------------------

TITLE: Creating Login Page with Supabase Authentication in Flutter
DESCRIPTION: This snippet defines a LoginPage widget that allows users to sign in with their email and password using Supabase authentication. Upon successful login, users are redirected to the MFA verification page.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_9

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:mfa_app/main.dart';
import 'package:mfa_app/pages/mfa/verify_page.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class LoginPage extends StatefulWidget {
  static const route = '/auth/login';

  const LoginPage({super.key});

  @override
  State<LoginPage> createState() => _LoginPageState();
}

class _LoginPageState extends State<LoginPage> {
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();

  @override
  void dispose() {
    _emailController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Login')),
      body: ListView(
        padding: const EdgeInsets.symmetric(horizontal: 20, vertical: 24),
        children: [
          TextFormField(
            controller: _emailController,
            decoration: const InputDecoration(
              label: Text('Email'),
            ),
          ),
          const SizedBox(height: 16),
          TextFormField(
            controller: _passwordController,
            decoration: const InputDecoration(
              label: Text('Password'),
            ),
            obscureText: true,
          ),
          const SizedBox(height: 16),
          ElevatedButton(
            onPressed: () async {
              try {
                final email = _emailController.text.trim();
                final password = _passwordController.text.trim();
                await supabase.auth.signInWithPassword(
                  email: email,
                  password: password,
                );
                if (mounted) {
                  context.go(MFAVerifyPage.route);
                }
              } on AuthException catch (error) {
                ScaffoldMessenger.of(context)
                    .showSnackBar(SnackBar(content: Text(error.message)));
              } catch (error) {
                ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(content: Text('Unexpected error occurred')));
              }
            },
            child: const Text('Login'),
          ),
        ],
      ),
    );
  }
}
```

----------------------------------------

TITLE: Implementing an is_admin() Function in SQL
DESCRIPTION: This function checks if the current user has an admin role. It's designed to be used in RLS policies and is implemented as a security definer function for better performance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/rls-performance-and-best-practices-Z5Jjwv.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
CREATE OR REPLACE FUNCTION is_admin()
  RETURNS boolean as
$$
begin
  return exists(select from rlstest_roles where auth.uid() = user_id and role = 'admin');
end;
$$ language plpgsql security definer;
```

----------------------------------------

TITLE: Main App Component Implementation
DESCRIPTION: React component that manages authentication state and renders either the Auth or Account component.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-react.mdx#2025-04-21_snippet_5

LANGUAGE: jsx
CODE:
```
import './App.css'
import { useState, useEffect } from 'react'
import { supabase } from './supabaseClient'
import Auth from './Auth'
import Account from './Account'

function App() {
  const [session, setSession] = useState(null)

  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session)
    })

    supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session)
    })
  }, [])

  return (
    <div className="container" style={{ padding: '50px 0 100px 0' }}>
      {!session ? <Auth /> : <Account key={session.user.id} session={session} />}
    </div>
  )
}

export default App
```

----------------------------------------

TITLE: Granting Service Role Table Access
DESCRIPTION: SQL command to grant select privileges on auth.users table to the service_role for administrative tasks.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/api-keys.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
grant
select
  on table auth.users to service_role;
```

----------------------------------------

TITLE: Creating React Query Client Provider Component in Next.js
DESCRIPTION: TypeScript React component that creates and provides a React Query client for the application, with default options for stale time to optimize SSR behavior.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-12-react-query-nextjs-app-router-cache-helpers.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
'use client'

import { QueryClient, QueryClientProvider } from '@tanstack/react-query'
import { useState } from 'react'

export const ReactQueryClientProvider = ({ children }: { children: React.ReactNode }) => {
  const [queryClient] = useState(
    () =>
      new QueryClient({
        defaultOptions: {
          queries: {
            // With SSR, we usually want to set some default staleTime
            // above 0 to avoid refetching immediately on the client
            staleTime: 60 * 1000,
          },
        },
      })
  )
  return <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>
}
```

----------------------------------------

TITLE: Setting Up Environment Variables for Supabase
DESCRIPTION: Configuration of environment variables in a .env.local file to store Supabase URL and anonymous key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
NEXT_PUBLIC_SUPABASE_URL=YOUR_SUPABASE_URL
NEXT_PUBLIC_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY
```

----------------------------------------

TITLE: Direct Postgres Connection String
DESCRIPTION: This snippet shows an example of a direct connection string to a Supabase Postgres database. It's intended for persistent servers and requires IPv6 support by default. Replace `[YOUR-PASSWORD]` with the actual password.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/connecting-to-postgres.mdx#_snippet_0

LANGUAGE: text
CODE:
```
postgresql://postgres:[YOUR-PASSWORD]@db.apbkobhfnmcqqzqeeqss.supabase.co:5432/postgres
```

----------------------------------------

TITLE: Setting Supabase Environment Variables
DESCRIPTION: This snippet defines the environment variables required to connect your React Router project to a Supabase instance. These variables include the Supabase URL and the Supabase anon key, which are essential for authenticating and authorizing your application's access to the Supabase backend. The values for these variables can be found in the Supabase dashboard or by running `supabase start` or `supabase status` for local instances.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react-router/client.mdx#2025-04-21_snippet_0

LANGUAGE: env
CODE:
```
"VITE_SUPABASE_URL=
VITE_SUPABASE_ANON_KEY="
```

----------------------------------------

TITLE: Querying Supabase Data with Immutable Query Builder (Dart)
DESCRIPTION: Demonstrates the change in the Supabase query builder from version 1 to version 2 regarding immutability. In v1, chained filters on a query object persisted across calls, while in v2, each filter is independent, requiring you to re-apply filters if needed. This example illustrates how to declare and reuse a query in both versions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_10

LANGUAGE: dart
CODE:
```
// If you declare a query and chain filters on it
final myQuery = supabase.from('my_table').select();

final foo = await myQuery.eq('some_col', 'foo');

// The `eq` filter above is applied in addition to the following filter
final bar = await myQuery.eq('another_col', 'bar');
```

LANGUAGE: dart
CODE:
```
// Now you can declare a query and reuse it.
final myQuery = supabase.from('my_table').select();

final foo = await myQuery.eq('some_col', 'foo');

// The `eq` filter above is not applied to the following result
final bar = await myQuery.eq('another_col', 'bar');
```

----------------------------------------

TITLE: Implementing Supabase Auth in React
DESCRIPTION: React component implementation showing Supabase authentication setup with session management and Auth UI component integration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/react.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import './index.css'
import { useState, useEffect } from 'react'
import { createClient } from '@supabase/supabase-js'
import { Auth } from '@supabase/auth-ui-react'
import { ThemeSupa } from '@supabase/auth-ui-shared'

const supabase = createClient('https://<project>.supabase.co', '<your-anon-key>')

export default function App() {
  const [session, setSession] = useState(null)

  useEffect(() => {
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session)
    })

    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session)
    })

    return () => subscription.unsubscribe()
  }, [])

  if (!session) {
    return (<Auth supabaseClient={supabase} appearance={{ theme: ThemeSupa }} />)
  }
  else {
    return (<div>Logged in!</div>)
  }
}
```

----------------------------------------

TITLE: Creating a Route Handler with Edge Runtime in Next.js (TypeScript)
DESCRIPTION: TypeScript implementation of a Next.js route handler running on the Edge runtime that inserts a todo in Supabase. It uses typed createRouteHandlerClient for type safety, configures the handler for edge runtime, and returns the inserted data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_27

LANGUAGE: tsx
CODE:
```
import { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs'
import { NextResponse } from 'next/server'
import { cookies } from 'next/headers'

import type { Database } from '@/lib/database.types'

export const runtime = 'edge'
export const dynamic = 'force-dynamic'

export async function POST(request: Request) {
  const { title } = await request.json()
  const cookieStore = cookies()

  const supabase = createRouteHandlerClient<Database>({
    cookies: () => cookieStore,
  })

  const { data } = await supabase.from('todos').insert({ title }).select()
  return NextResponse.json(data)
}
```

----------------------------------------

TITLE: Supabase Database Schema Setup
DESCRIPTION: SQL schema definition for creating and configuring user profiles table with row level security policies, realtime functionality, and storage bucket setup for avatars.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/flutter-user-management/README.md#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
-- Create a table for public "profiles"
create table profiles (
  id uuid references auth.users not null,
  updated_at timestamp with time zone,
  username text unique,
  avatar_url text,
  website text,

  primary key (id),
  unique(username),
  constraint username_length check (char_length(username) >= 3)
);

alter table profiles enable row level security;

create policy "Public profiles are viewable by everyone."
  on profiles for select
  using ( true );

create policy "Users can insert their own profile."
  on profiles for insert
  with check ( (select auth.uid()) = id );

create policy "Users can update own profile."
  on profiles for update
  using ( (select auth.uid()) = id );

-- Set up Realtime!
begin;
  drop publication if exists supabase_realtime;
  create publication supabase_realtime;
commit;
alter publication supabase_realtime add table profiles;

-- Set up Storage!
insert into storage.buckets (id, name)
values ('avatars', 'avatars');

create policy "Avatar images are publicly accessible."
  on storage.objects for select
  using ( bucket_id = 'avatars' );

create policy "Anyone can upload an avatar."
  on storage.objects for insert
  with check ( bucket_id = 'avatars' );
```

----------------------------------------

TITLE: Server-side Data Fetching with Row Level Security in SvelteKit
DESCRIPTION: This snippet demonstrates server-side data fetching with Supabase Row Level Security (RLS) in SvelteKit. It includes both the Svelte component and the corresponding page.ts file for loading data.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_17

LANGUAGE: svelte
CODE:
```
<!-- src/routes/profile/+page.svelte -->
<script lang="ts">
  export let data

  let { user, tableData } = data
  $: ({ user, tableData } = data)
</script>

<div>Protected content for {user.email}</div>
<pre>{JSON.stringify(tableData, null, 2)}</pre>
<pre>{JSON.stringify(user, null, 2)}</pre>
```

LANGUAGE: typescript
CODE:
```
// src/routes/profile/+page.ts
import { redirect } from '@sveltejs/kit'

export const load = async ({ parent }) => {
  const { supabase, session } = await parent()
  if (!session) {
    redirect(303, '/')
  }
  const { data: tableData } = await supabase.from('test').select('*')

  return {
    user: session.user,
    tableData,
  }
}
```

----------------------------------------

TITLE: Invoking Semantic Search from TypeScript
DESCRIPTION: Example of calling the semantic search function using Supabase JavaScript client
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/semantic-search.mdx#2025-04-21_snippet_4

LANGUAGE: typescript
CODE:
```
const { data: documents } = await supabase.rpc('match_documents', {
  query_embedding: embedding, // pass the query embedding
  match_threshold: 0.78, // choose an appropriate threshold for your data
  match_count: 10, // choose the number of matches
})
```

----------------------------------------

TITLE: Signing in with Email and Password using Supabase in JavaScript
DESCRIPTION: This snippet demonstrates how to sign in a user with their email and password using the Supabase JavaScript client. It uses the signInWithPassword() method from the auth module.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_16

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project.supabase.co', 'your-anon-key')

async function signInWithEmail() {
  const { data, error } = await supabase.auth.signInWithPassword({
    email: 'valid.email@supabase.io',
    password: 'example-password',
  })
}
```

----------------------------------------

TITLE: Implementing Row Level Security for MFA
DESCRIPTION: SQL code to enable row-level security and create a policy that only allows access to authenticated users with MFA (aal2 level).
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-05-04-flutter-multi-factor-authentication.mdx#2025-04-21_snippet_12

LANGUAGE: sql
CODE:
```
-- Enable RLS for private_posts table
alter table
  public.private_posts enable row level security;

-- Create a policy that only allows read if they user has signed in via MFA
create policy "Users can view private_posts if they have signed in via MFA" on public.private_posts for
select
  to authenticated using ((select auth.jwt() - >> 'aal') = 'aal2');
```

----------------------------------------

TITLE: Using Typed Supabase Client with useSupabaseClient in Next.js
DESCRIPTION: This snippet shows how to use the useSupabaseClient hook with TypeScript in Next.js to get a typed Supabase client. It demonstrates how to pass CLI-generated types for enhanced type safety.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_17

LANGUAGE: typescript
CODE:
```
import { useSupabaseClient } from '@supabase/auth-helpers-react'
import { Database } from '../database.types'

const supabaseClient = useSupabaseClient<Database>()
```

----------------------------------------

TITLE: Connecting to Postgres using supabase-js in Edge Functions
DESCRIPTION: Demonstrates how to connect to a Supabase database using the supabase-js client in an Edge Function. Includes error handling and authentication header forwarding.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/connect-to-postgres.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { createClient } from 'jsr:@supabase/supabase-js@2'

Deno.serve(async (req) => {
  try {
    const supabase = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_ANON_KEY') ?? '',
      { global: { headers: { Authorization: req.headers.get('Authorization')! } } }
    )

    const { data, error } = await supabase.from('countries').select('*')

    if (error) {
      throw error
    }

    return new Response(JSON.stringify({ data }), {
      headers: { 'Content-Type': 'application/json' },
      status: 200,
    })
  } catch (err) {
    return new Response(String(err?.message ?? err), { status: 500 })
  }
})
```

----------------------------------------

TITLE: Creating Time-Based RLS Policy in PostgreSQL
DESCRIPTION: SQL code that demonstrates creating an analytics table and implementing a Row Level Security policy that only allows access to recent data (within the last 2 months) for specific users.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-06-28-partial-postgresql-data-dumps-with-rls.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
-- A fake analytics table where we store actions a user takes
create table analytics (
  id serial primary key,
  ts timestamptz default now(),
  profile_id references profiles,
  event text
);
alter table profiles
  enable row level security;

-- Here is an "age" rule so that we only dump the most recent analytics
create policy "Data dump rule" on logs
  for select
  to exporter
  using (
    profile_id in (1, 2, 3) and
    ts > now() - interval '2 MONTHS' -- here's the magic
  );
```

----------------------------------------

TITLE: Signing in with Supabase Auth in JavaScript
DESCRIPTION: This JavaScript code snippet demonstrates how to sign in a user using Supabase Auth. It calls the `supabase.auth.signIn()` method with the user's email and password.  This function triggers the creation and issuance of a user-specific JWT.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/jwts.mdx#2025-04-21_snippet_8

LANGUAGE: javascript
CODE:
```
supabase.auth.signIn({
  email: 'valid.email@supabase.io',
  password: 'They_Live_1988!',
})
```

----------------------------------------

TITLE: Running Supabase Locally
DESCRIPTION: This snippet details how to start the Supabase local development environment and serve specific Supabase functions. Dependencies include Supabase CLI and access to the provided environment configuration file. The commands must be executed in a terminal. The expected outcome is a locally available Supabase function for testing, accessible via a web browser.
SOURCE: https://github.com/supabase/supabase/blob/master/supabase/functions/lw12-ticket-og/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase start
supabase functions serve lw12-ticket-og --no-verify-jwt --env-file ./supabase/.env.local
```

----------------------------------------

TITLE: Querying Related Tables with Resource Embedding in PostgREST
DESCRIPTION: Demonstrates how to query related tables using PostgREST resource embedding. The example shows querying films and their technical specifications using both HTTP and JavaScript approaches.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-12-16-postgrest-11-prerelease.mdx#2025-04-21_snippet_0

LANGUAGE: http
CODE:
```
GET /films?select=title,technical_specs(camera,laboratory,sound_mix)
```

LANGUAGE: jsx
CODE:
```
const { data, error } = await supabase.from('films').select(`
    title,
    technical_specs (
      camera, laboratory, duration
    )
  `)
```

LANGUAGE: json
CODE:
```
[
  {
    "title": "Pulp Fiction",
    "technical_specs": {
      "camera": "Arriflex 35-III",
      "laboratory": "DeLuxe, Hollywood (CA), USA (color)",
      "duration": "02:34:00"
    }
  },
  "..."
]
```

----------------------------------------

TITLE: Creating Logical Backup in PostgreSQL using pg_dump
DESCRIPTION: Command to create a logical backup of a single PostgreSQL database using pg_dump utility. The backup is saved to a SQL file that can be used for restoration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-07-17-postgresql-physical-logical-backups.mdx#2025-04-21_snippet_0

LANGUAGE: shell
CODE:
```
pg_dump db_name > file_name.sql
```

----------------------------------------

TITLE: Creating Employees Table - SQL
DESCRIPTION: SQL migration to create the employees table with id, name, email, and timestamp columns
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/overview.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create table employees (
  id bigint primary key generated always as identity,
  name text,
  email text,
  created_at timestamptz default now()
);
```

----------------------------------------

TITLE: Listening to Broadcast Events on Client Side in JavaScript
DESCRIPTION: This JavaScript code demonstrates how to listen to broadcast events on the client side using the Supabase client. It initializes the Supabase client, sets the authentication token, and subscribes to a channel with a specific topic. The code listens for 'INSERT', 'UPDATE', and 'DELETE' events on the channel and logs the payload to the console.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/subscribing-to-database-changes.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

// ---cut---
const gameId = 'id'
await supabase.realtime.setAuth() // Needed for Realtime Authorization
const changes = supabase
  .channel(`topic:${gameId}`, {
    config: { private: true },
  })
  .on('broadcast', { event: 'INSERT' }, (payload) => console.log(payload))
  .on('broadcast', { event: 'UPDATE' }, (payload) => console.log(payload))
  .on('broadcast', { event: 'DELETE' }, (payload) => console.log(payload))
  .subscribe()
```

----------------------------------------

TITLE: SvelteKit Server Hooks for Supabase Authentication
DESCRIPTION: Configures server hooks to handle Supabase client initialization, session validation, and secure authentication
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_16

LANGUAGE: typescript
CODE:
```
import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public'
import { createServerClient } from '@supabase/ssr'
import type { Handle } from '@sveltejs/kit'

export const handle: Handle = async ({ event, resolve }) => {
  event.locals.supabase = createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
    cookies: {
      getAll() {
        return event.cookies.getAll()
      },
      setAll(cookiesToSet) {
        cookiesToSet.forEach(({ name, value, options }) =>
          event.cookies.set(name, value, { ...options, path: '/' })
        )
      },
    },
  })

  return resolve(event)
}
```

----------------------------------------

TITLE: Starting Supabase locally using the CLI
DESCRIPTION: This command starts the Supabase environment locally, which is a prerequisite for running the og-images function locally. It uses the Supabase CLI tool.
SOURCE: https://github.com/supabase/supabase/blob/master/supabase/functions/og-images/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
"supabase start"
```

----------------------------------------

TITLE: Creating Authentication Server Actions
DESCRIPTION: Implementation of server actions for login and signup functionality using the new Supabase server client utility function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-migrate-from-supabase-auth-helpers-to-ssr-package-5NRunM.mdx#2025-04-21_snippet_5

LANGUAGE: typescript
CODE:
```
// app/login/actions.ts

'use server';

import { revalidatePath } from 'next/cache';
import { redirect } from 'next/navigation';

import { createClient } from '@/utils/supabase/server';

export async function login(formData: FormData) {
  const supabase = createClient();

  // type-casting here for convenience
  // in practice, you should validate your inputs
  const data = {
    email: formData.get('email') as string,
    password: formData.get('password') as string,
  };

  const { error } = await supabase.auth.signInWithPassword(data)

  if (error) {
    redirect('/error');
  }

  revalidatePath('/', 'layout');
  redirect('/');
}

export async function signup(formData: FormData) {
  const supabase = createClient();

  // type-casting here for convenience
  // in practice, you should validate your inputs
  const data = {
    email: formData.get('email') as string,
    password: formData.get('password') as string,
  };

  const { error } = await supabase.auth.signUp(data);

  if (error) {
    redirect('/error');
  }

  revalidatePath('/', 'layout');
  redirect('/');
}
```

----------------------------------------

TITLE: Protecting Pages Router Pages with Supabase getServerSideProps (TS)
DESCRIPTION: This snippet shows how to create a protected page in Next.js Pages Router using `getServerSideProps`. It initializes a server-side Supabase client (`@/utils/supabase/server-props`) and calls `supabase.auth.getUser()` to check for an authenticated user. If the user is not found or an error occurs, the user is redirected to the home page. The authenticated user data is passed as a prop to the page component.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#_snippet_19

LANGUAGE: ts
CODE:
```
import type { User } from '@supabase/supabase-js'
import type { GetServerSidePropsContext } from 'next'

import { createClient } from '@/utils/supabase/server-props'

export default function PrivatePage({ user }: { user: User }) {
  return <h1>Hello, {user.email || 'user'}!</h1>
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
  const supabase = createClient(context)

  const { data, error } = await supabase.auth.getUser()

  if (error || !data) {
    return {
      redirect: {
        destination: '/',
        permanent: false,
      },
    }
  }

  return {
    props: {
      user: data.user,
    },
  }
}
```

----------------------------------------

TITLE: Starting Supabase Local Stack
DESCRIPTION: Command to start the local Supabase development environment.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/mixpeek-video-search.mdx#2025-04-21_snippet_3

LANGUAGE: shell
CODE:
```
supabase start
```

----------------------------------------

TITLE: Querying Similar Images with CLIP Embeddings in Supabase
DESCRIPTION: Python code for semantic image search using CLIP text embeddings. It generates a text embedding for a search term and queries the vector database to find the most similar image.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/integrations/roboflow.mdx#2025-04-21_snippet_7

LANGUAGE: python
CODE:
```
infer_clip_payload = {
    "text": "cat",
}

res = requests.post(
    f"{SERVER_URL}/clip/embed_text?api_key={API_KEY}",
    json=infer_clip_payload,
)

embeddings = res.json()['embeddings']

result = images.query(
    data=embeddings[0],
    limit=1
)

print(result[0])
```

----------------------------------------

TITLE: Configuring Supabase client with environment variables
DESCRIPTION: TypeScript code that creates and configures the Supabase client using environment variables for the URL and anonymous key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-refine.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { createClient } from '@refinedev/supabase'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

export const supabaseClient = createClient(supabaseUrl, supabaseAnonKey, {
  db: {
    schema: 'public',
  },
  auth: {
    persistSession: true,
  },
})
```

----------------------------------------

TITLE: Setting Up Database Trigger
DESCRIPTION: SQL trigger that executes the broadcast function for INSERT, UPDATE, or DELETE operations on the specified table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-02-realtime-broadcast-from-database.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create trigger broadcast_changes_for_your_table_trigger
after insert or update or delete
on public.your_table
for each row
execute function your_table_changes();
```

----------------------------------------

TITLE: Sending Session to Client in TypeScript
DESCRIPTION: This TypeScript code snippet demonstrates how to forward session information to the client side in SvelteKit, utilizing async load functions for session retrieval.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_8

LANGUAGE: TypeScript
CODE:
```
// src/routes/+layout.server.ts
export const load = async ({ locals: { safeGetSession } }) => {
  const { session, user } = await safeGetSession()

  return {
    session,
    user,
  }
}
```

----------------------------------------

TITLE: Initialize Supabase Browser Client (component.ts)
DESCRIPTION: Initializes the Supabase client specifically for use within React components running in the browser. It retrieves Supabase configuration from environment variables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#_snippet_15

LANGUAGE: TypeScript
CODE:
```
import { createBrowserClient } from '@supabase/ssr'

export function createClient() {
  const supabase = createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )

  return supabase
}
```

----------------------------------------

TITLE: Implementing MFA Enrollment Component in React
DESCRIPTION: A React component that handles the MFA enrollment flow using Supabase Auth. It manages QR code display, verification code input, and the challenge-verify process. The component uses useState for state management and useEffect for initialization.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa/totp.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
/**
 * EnrollMFA shows a simple enrollment dialog. When shown on screen it calls
 * the `enroll` API. Each time a user clicks the Enable button it calls the
 * `challenge` and `verify` APIs to check if the code provided by the user is
 * valid.
 * When enrollment is successful, it calls `onEnrolled`. When the user clicks
 * Cancel the `onCancelled` callback is called.
 */
export function EnrollMFA({
  onEnrolled,
  onCancelled,
}: {
  onEnrolled: () => void
  onCancelled: () => void
}) {
  const [factorId, setFactorId] = useState('')
  const [qr, setQR] = useState('') // holds the QR code image SVG
  const [verifyCode, setVerifyCode] = useState('') // contains the code entered by the user
  const [error, setError] = useState('') // holds an error message

  const onEnableClicked = () => {
    setError('')
    ;(async () => {
      const challenge = await supabase.auth.mfa.challenge({ factorId })
      if (challenge.error) {
        setError(challenge.error.message)
        throw challenge.error
      }

      const challengeId = challenge.data.id

      const verify = await supabase.auth.mfa.verify({
        factorId,
        challengeId,
        code: verifyCode,
      })
      if (verify.error) {
        setError(verify.error.message)
        throw verify.error
      }

      onEnrolled()
    })()
  }

  useEffect(() => {
    ;(async () => {
      const { data, error } = await supabase.auth.mfa.enroll({
        factorType: 'totp',
      })
      if (error) {
        throw error
      }

      setFactorId(data.id)

      // Supabase Auth returns an SVG QR code which you can convert into a data
      // URL that you can place in an <img> tag.
      setQR(data.totp.qr_code)
    })()
  }, [])

  return (
    <>
      {error && <div className="error">{error}</div>}
      <img src={qr} />
      <input
        type="text"
        value={verifyCode}
        onChange={(e) => setVerifyCode(e.target.value.trim())}
      />
      <input type="button" value="Enable" onClick={onEnableClicked} />
      <input type="button" value="Cancel" onClick={onCancelled} />
    </>
  )
}
```

----------------------------------------

TITLE: Implementing GitHub OAuth Sign-In in JavaScript with Supabase
DESCRIPTION: This snippet demonstrates how to implement GitHub sign-in functionality using Supabase's JavaScript client. It utilizes the `signInWithOAuth` method and requires a Supabase client created with your project URL and anon key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-github.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')

// ---cut---
async function signInWithGithub() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'github',
  })
}
```

----------------------------------------

TITLE: Realtime Multiplayer Channel Implementation
DESCRIPTION: Shows how to implement Realtime Multiplayer features including broadcast events, presence tracking, and channel subscription.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-10-21-supabase-flutter-sdk-v1-released.mdx#2025-04-21_snippet_3

LANGUAGE: dart
CODE:
```
final channel = Supabase.instance.client.channel('my_channel');

// listen to `location` broadcast events
channel.on(
    RealtimeListenTypes.broadcast,
    ChannelFilter(
      event: 'location',
    ), (payload, [ref]) {
	// Do something exciting with the broadcast event
});

// send `location` broadcast events
channel.send(
  type: RealtimeListenTypes.broadcast,
  event: 'location',
  payload: {'lat': 1.3521, 'lng': 103.8198},
);

// listen to presence states
channel.on(RealtimeListenTypes.presence, ChannelFilter(event: 'sync'),
    (payload, [ref]) {
	// Do something exciting with the presence state
});

// subscribe to the above changes
channel.subscribe((status) async {
  if (status == 'SUBSCRIBED') {
    // if subscribed successfully, send presence event
    final status = await channel.track({'user_id': myUserId});
  }
});
```

----------------------------------------

TITLE: Implementing Login Page in Flutter with Supabase
DESCRIPTION: A Flutter widget that handles user login using Supabase authentication. It provides a simple form interface for email and password input with basic error handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-22-flutter-authorization-with-rls.mdx#2025-04-21_snippet_13

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:my_chat_app/utils/constants.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class LoginPage extends StatefulWidget {
  const LoginPage({Key? key}) : super(key: key);

  static Route<void> route() {
    return MaterialPageRoute(
        builder: (context) => const LoginPage());
  }

  @override
  _LoginPageState createState() => _LoginPageState();
}

// ... rest of the LoginPage implementation
```

----------------------------------------

TITLE: Database Functions and Triggers
DESCRIPTION: SQL functions for managing driver status and finding available drivers within proximity
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-09-05-flutter-uber-clone.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create function update_driver_status()
    returns trigger
    language plpgsql
    as $$
        begin
            if new.status = 'completed' then
                update public.drivers
                set is_available = true
                where id = new.driver_id;
            else
                update public.drivers
                set is_available = false
                where id = new.driver_id;
            end if;
            return new;
    end $$;

create trigger driver_status_update_trigger
after insert or update on rides
for each row
execute function update_driver_status();

create function public.find_driver(origin geography(POINT), destination geography(POINT), fare int)
    returns table(driver_id uuid, ride_id uuid)
    language plpgsql
    as $$
        declare
            v_driver_id uuid;
            v_ride_id uuid;
        begin
            select
                drivers.id into v_driver_id
            from public.drivers
            where is_available = true
                and st_dwithin(origin, location, 3000)
            order by drivers.location <-> origin
            limit 1;

            -- return null if no available driver is found
            if v_driver_id is null then
                return;
            end if;

            insert into public.rides (driver_id, passenger_id, origin, destination, fare)
            values (v_driver_id, auth.uid(), origin, destination, fare)
            returning id into v_ride_id;

            return query
                select v_driver_id as driver_id, v_ride_id as ride_id;
    end $$ security definer;
```

----------------------------------------

TITLE: Backing Up Database with Supabase CLI - Bash
DESCRIPTION: This snippet outlines the commands used to backup a Supabase database using the Supabase CLI. It requires the Supabase CLI to be installed and a valid connection string to the database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-within-supabase/backup-restore.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase db dump --db-url [CONNECTION_STRING] -f roles.sql --role-only
```

LANGUAGE: bash
CODE:
```
supabase db dump --db-url [CONNECTION_STRING] -f schema.sql
```

LANGUAGE: bash
CODE:
```
supabase db dump --db-url [CONNECTION_STRING] -f data.sql --use-copy --data-only
```

----------------------------------------

TITLE: Listening to UPDATE Events in JavaScript with Supabase Realtime
DESCRIPTION: Creates a channel to listen specifically for UPDATE events in the public schema of a Supabase database. The code establishes a subscription that logs payload data whenever database updates occur.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_15

LANGUAGE: javascript
CODE:
```
const changes = supabase
  .channel('schema-db-changes')
  .on(
    'postgres_changes',
    {
      event: 'UPDATE', // Listen only to UPDATEs
      schema: 'public',
    },
    (payload) => console.log(payload)
  )
  .subscribe()
```

----------------------------------------

TITLE: Fetching Data with Next.js Server Components and Supabase
DESCRIPTION: Example of querying data from Supabase in a Next.js Server Component. This demonstrates the simplicity of server-side data fetching without needing to use client-side state management.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-01-supabase-is-now-compatible-with-nextjs-14.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  const { data } = await supabase.from('...').select()
  return ...
}
```

----------------------------------------

TITLE: Implementing Account Page with Profile Management
DESCRIPTION: Creates a complete account management page that includes profile data management, avatar upload integration, and sign-out functionality. Handles profile updates and displays user information using Supabase as the backend.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-flutter.mdx#2025-04-21_snippet_9

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:supabase_quickstart/components/avatar.dart';
import 'package:supabase_quickstart/main.dart';
import 'package:supabase_quickstart/pages/login_page.dart';

class AccountPage extends StatefulWidget {
  const AccountPage({super.key});

  @override
  State<AccountPage> createState() => _AccountPageState();
}

class _AccountPageState extends State<AccountPage> {
  final _usernameController = TextEditingController();
  final _websiteController = TextEditingController();

  String? _avatarUrl;
  var _loading = true;

  Future<void> _getProfile() async {
    setState(() {
      _loading = true;
    });

    try {
      final userId = supabase.auth.currentSession!.user.id;
      final data =
          await supabase.from('profiles').select().eq('id', userId).single();
      _usernameController.text = (data['username'] ?? '') as String;
      _websiteController.text = (data['website'] ?? '') as String;
      _avatarUrl = (data['avatar_url'] ?? '') as String;
    } on PostgrestException catch (error) {
      if (mounted) context.showSnackBar(error.message, isError: true);
    } catch (error) {
      if (mounted) {
        context.showSnackBar('Unexpected error occurred', isError: true);
      }
    } finally {
      if (mounted) {
        setState(() {
          _loading = false;
        });
      }
    }
  }

  Future<void> _updateProfile() async {
    setState(() {
      _loading = true;
    });
    final userName = _usernameController.text.trim();
    final website = _websiteController.text.trim();
    final user = supabase.auth.currentUser;
    final updates = {
      'id': user!.id,
      'username': userName,
      'website': website,
      'updated_at': DateTime.now().toIso8601String(),
    };
    try {
      await supabase.from('profiles').upsert(updates);
      if (mounted) context.showSnackBar('Successfully updated profile!');
    } on PostgrestException catch (error) {
      if (mounted) context.showSnackBar(error.message, isError: true);
    } catch (error) {
      if (mounted) {
        context.showSnackBar('Unexpected error occurred', isError: true);
      }
    } finally {
      if (mounted) {
        setState(() {
          _loading = false;
        });
      }
    }
  }

  Future<void> _signOut() async {
    try {
      await supabase.auth.signOut();
    } on AuthException catch (error) {
      if (mounted) context.showSnackBar(error.message, isError: true);
    } catch (error) {
      if (mounted) {
        context.showSnackBar('Unexpected error occurred', isError: true);
      }
    } finally {
      if (mounted) {
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(builder: (_) => const LoginPage()),
        );
      }
    }
  }

  Future<void> _onUpload(String imageUrl) async {
    try {
      final userId = supabase.auth.currentUser!.id;
      await supabase.from('profiles').upsert({
        'id': userId,
        'avatar_url': imageUrl,
      });
      if (mounted) {
        const SnackBar(
          content: Text('Updated your profile image!'),
        );
      }
    } on PostgrestException catch (error) {
      if (mounted) context.showSnackBar(error.message, isError: true);
    } catch (error) {
      if (mounted) {
        context.showSnackBar('Unexpected error occurred', isError: true);
      }
    }
    if (!mounted) {
      return;
    }

    setState(() {
      _avatarUrl = imageUrl;
    });
  }

  @override
  void initState() {
    super.initState();
    _getProfile();
  }

  @override
  void dispose() {
    _usernameController.dispose();
    _websiteController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Profile')),
      body: ListView(
        padding: const EdgeInsets.symmetric(vertical: 18, horizontal: 12),
        children: [
          Avatar(
            imageUrl: _avatarUrl,
            onUpload: _onUpload,
          ),
          const SizedBox(height: 18),
          TextFormField(
            controller: _usernameController,
            decoration: const InputDecoration(labelText: 'User Name'),
          ),
          const SizedBox(height: 18),
          TextFormField(
            controller: _websiteController,
            decoration: const InputDecoration(labelText: 'Website'),
          ),
          const SizedBox(height: 18),
          ElevatedButton(
            onPressed: _loading ? null : _updateProfile,
            child: Text(_loading ? 'Saving...' : 'Update'),
          ),
          const SizedBox(height: 18),
          TextButton(onPressed: _signOut, child: const Text('Sign Out')),
        ],
      ),
    );
  }
}
```

----------------------------------------

TITLE: Creating Basic Index in PostgreSQL
DESCRIPTION: Shows how to create a basic btree index on a surname column to improve query performance for surname lookups.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-02-27-cracking-postgres-interview.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create index idx_students_surname on students (surname);
```

----------------------------------------

TITLE: Supavisor Transaction Mode Connection String
DESCRIPTION: This snippet shows an example of a Supavisor transaction mode connection string to a Supabase Postgres database via a proxy which serves as a connection pooler.  This is ideal for serverless or edge functions, requiring many transient connections. Replace `[YOUR-PASSWORD]` and `[REGION]` with the actual values. Prepared statements are not supported in transaction mode.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/connecting-to-postgres.mdx#_snippet_2

LANGUAGE: text
CODE:
```
postgres://postgres.apbkobhfnmcqqzqeeqss:[YOUR-PASSWORD]@aws-0-[REGION].pooler.supabase.com:6543/postgres
```

----------------------------------------

TITLE: Setting Up Environment Variables for Supabase
DESCRIPTION: Creating a .env file to store Supabase URL and anonymous key for connecting to the Supabase backend.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-svelte.mdx#2025-04-21_snippet_2

LANGUAGE: bash
CODE:
```
VITE_SUPABASE_URL=YOUR_SUPABASE_URL
VITE_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY
```

----------------------------------------

TITLE: Installing Supabase SSR Package
DESCRIPTION: Commands to uninstall the deprecated auth-helpers packages and install the new SSR package along with the required Supabase client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-migrate-from-supabase-auth-helpers-to-ssr-package-5NRunM.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm uninstall @supabase/auth-helpers-nextjs @supabase/supabase-js
npm install @supabase/ssr @supabase/supabase-js
```

----------------------------------------

TITLE: Initializing Supabase Client in Android Kotlin App
DESCRIPTION: Code to create a Supabase client instance that will be used for API calls. This initialization requires the Supabase URL and anonymous key from the project settings.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/kotlin.mdx#2025-04-21_snippet_2

LANGUAGE: kotlin
CODE:
```
import ...

val supabase = createSupabaseClient(
    supabaseUrl = "https://xyzcompany.supabase.co",
    supabaseKey = "your_public_anon_key"
  ) {
    install(Postgrest)
}
...
```

----------------------------------------

TITLE: Implementing RLS Policies for Document Access Control
DESCRIPTION: Sets up Row Level Security policies to restrict access to document sections based on document ownership. Enables RLS and creates a policy for select operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/rag-with-permissions.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
alter table document_sections enable row level security;

create policy "Users can query their own document sections"
on document_sections for select to authenticated using (
  document_id in (
    select id
    from documents
    where (owner_id = (select auth.uid()))
  )
);
```

----------------------------------------

TITLE: Updating User Password in JavaScript with Supabase
DESCRIPTION: JavaScript implementation that creates a Supabase client and uses it to update a user's password after they have received a reset password email.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_35

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('url', 'anonKey')

// ---cut---
await supabase.auth.updateUser({ password: 'new_password' })
```

----------------------------------------

TITLE: Implementing Authentication Middleware in JavaScript
DESCRIPTION: Setting up Next.js middleware to handle Supabase authentication session management.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import { createMiddlewareClient } from '@supabase/auth-helpers-nextjs'
import { NextResponse } from 'next/server'

export async function middleware(req) {
  const res = NextResponse.next()

  // Create a Supabase client configured to use cookies
  const supabase = createMiddlewareClient({ req, res })

  // Refresh session if expired - required for Server Components
  await supabase.auth.getUser()

  return res
}

// Ensure the middleware is only called for relevant paths.
export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico).*)',
  ],
}
```

----------------------------------------

TITLE: Installing Supabase via npm
DESCRIPTION: Command to install Supabase using npm with JSR. This adds the Supabase dependency to your npm project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-07-16-supabase-js-on-jsr.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npx jsr add @supabase/supabase-js
```

----------------------------------------

TITLE: Enabling Table Audit Tracking in PostgreSQL
DESCRIPTION: SQL function call to enable audit tracking on a specified schema and table combination. Takes a regclass parameter representing the fully qualified table name.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-08-postgres-audit.mdx#2025-04-21_snippet_7

LANGUAGE: sql
CODE:
```
select audit.enable_tracking('<schema>.<table>'::regclass);
```

----------------------------------------

TITLE: Implementing JSON Schema Validation with Check Constraints
DESCRIPTION: Example showing how to use pg_jsonschema with a table definition that includes a check constraint. The constraint ensures that JSON data in the metadata column conforms to a specified schema.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pg_jsonschema.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create table customer(
    id serial primary key,
    ...
    metadata json,

    check (
        json_matches_schema(
            '{
                "type": "object",
                "properties": {
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "maxLength": 16
                        }
                    }
                }
            }',
            metadata
        )
    )
);

-- Example: Valid Payload
insert into customer(metadata)
values ('{"tags": ["vip", "darkmode-ui"]}');
-- Result:
--   INSERT 0 1

-- Example: Invalid Payload
insert into customer(metadata)
values ('{"tags": [1, 3]}');
-- Result:
--   ERROR:  new row for relation "customer" violates check constraint "customer_metadata_check"
--   DETAIL:  Failing row contains (2, {"tags": [1, 3]}).
```

----------------------------------------

TITLE: Listening to all Postgres schema changes in JavaScript
DESCRIPTION: This JavaScript snippet configures a Supabase client to listen for any database changes in the 'public' schema. It defines a channel and logs any payload received. The channel cannot be named 'realtime'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_4

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

// ---cut---
const channelA = supabase
  .channel('schema-db-changes')
  .on(
    'postgres_changes',
    {
      event: '*',
      schema: 'public',
    },
    (payload) => console.log(payload)
  )
  .subscribe()
```

----------------------------------------

TITLE: Set up server-side hooks in SvelteKit
DESCRIPTION: This code defines server-side hooks for SvelteKit using TypeScript. These hooks create a Supabase client specific to the request, check user authentication, and protect pages based on the authentication status.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { createServerClient } from '@supabase/ssr'
import { type Handle, redirect } from '@sveltejs/kit'
import { sequence } from '@sveltejs/kit/hooks'

import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public'

const supabase: Handle = async ({ event, resolve }) => {
  /**
   * Creates a Supabase client specific to this server request.
   *
   * The Supabase client gets the Auth token from the request cookies.
   */
  event.locals.supabase = createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
    cookies: {
      getAll: () => event.cookies.getAll(),
      /**
       * SvelteKit's cookies API requires `path` to be explicitly set in
       * the cookie options. Setting `path` to `/` replicates previous/
       * standard behavior.
       */
      setAll: (cookiesToSet) => {
        cookiesToSet.forEach(({ name, value, options }) => {
          event.cookies.set(name, value, { ...options, path: '/' })
        })
      },
    },
  })

  /**
   * Unlike `supabase.auth.getSession()`, which returns the session _without_
   * validating the JWT, this function also calls `getUser()` to validate the
   * JWT before returning the session.
   */
  event.locals.safeGetSession = async () => {
    const {
      data: { session },
    } = await event.locals.supabase.auth.getSession()
    if (!session) {
      return { session: null, user: null }
    }

    const {
      data: { user },
      error,
    } = await event.locals.supabase.auth.getUser()
    if (error) {
      // JWT validation has failed
      return { session: null, user: null }
    }

    return { session, user }
  }

  return resolve(event, {
    filterSerializedResponseHeaders(name) {
      /**
       * Supabase libraries use the `content-range` and `x-supabase-api-version`
       * headers, so we need to tell SvelteKit to pass it through.
       */
      return name === 'content-range' || name === 'x-supabase-api-version'
    },
  })
}

const authGuard: Handle = async ({ event, resolve }) => {
  const { session, user } = await event.locals.safeGetSession()
  event.locals.session = session
  event.locals.user = user

  if (!event.locals.session && event.url.pathname.startsWith('/private')) {
    redirect(303, '/auth')
  }

  if (event.locals.session && event.url.pathname === '/auth') {
    redirect(303, '/private')
  }

  return resolve(event)
}

export const handle: Handle = sequence(supabase, authGuard)
```

----------------------------------------

TITLE: Adding Public Read Access Policy for Instruments Table in SQL
DESCRIPTION: This SQL snippet creates a row-level security policy that allows public read access to the 'instruments' table. It grants select permissions to the 'anon' role, effectively making the data publicly readable.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/quickstart_db_setup.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create policy "public can read instruments"
on public.instruments
for select to anon
using (true);
```

----------------------------------------

TITLE: Basic Supabase Data Fetching in Server Component
DESCRIPTION: A basic Next.js 13 Server Component that fetches and displays posts from Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-11-17-fetching-and-caching-supabase-data-in-next-js-server-components.mdx#2025-04-21_snippet_6

LANGUAGE: jsx
CODE:
```
import supabase from '../../utils/supabase'

export default async function Posts() {
  const { data: posts } = await supabase.from('posts').select()
  return <pre>{JSON.stringify(posts, null, 2)}</pre>
}
```

----------------------------------------

TITLE: Implementing Email Signup with Swift
DESCRIPTION: Swift code snippet for signing up a new user with email and password authentication in Supabase. This example includes an optional redirect URL parameter for after email confirmation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_2

LANGUAGE: swift
CODE:
```
let response = try await supabase.auth.signUp(
  email: "valid.email@supabase.io",
  password: "example-password",
  redirectTo: URL(string: "https://example.com/welcome")
)
```

----------------------------------------

TITLE: Creating Row-Level Security Policy in PostgreSQL
DESCRIPTION: SQL command to create a row-level security policy that allows users to update only their own posts in a 'posts' table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/column-level-security.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create policy "Allow update for owners" on posts for
update
  using ((select auth.uid()) = user_id);
```

----------------------------------------

TITLE: Getting User Metadata - JavaScript
DESCRIPTION: Fetches the current user's metadata from Supabase using JavaScript.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/managing-user-data.mdx#2025-04-21_snippet_6

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!)

// ---cut---
const {
  data: { user },
} = await supabase.auth.getUser()
let metadata = user?.user_metadata
```

----------------------------------------

TITLE: Implementing Row Level Security for SSO Tenants
DESCRIPTION: SQL policy definition for implementing multi-tenant access control using Row Level Security in PostgreSQL, utilizing the provider's identifier from the user's JWT.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-13-supabase-auth-sso-pkce.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create policy "Only allow read-write access to tenants" on tablename as restrictive to authenticated using (
  tenant_id = (select auth.jwt() -> 'app_metadata' ->> 'provider')
);
```

----------------------------------------

TITLE: Implementing RLS Policies for SupaSecureSlack in SQL
DESCRIPTION: SQL commands to create Row Level Security (RLS) policies for the public schema tables and the realtime.messages table. These policies control user access to rooms and Broadcast/Presence functionality based on entries in the rooms_users table.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/realtime/nextjs-authorization-demo/README.md#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
CREATE POLICY "authenticated can view all profiles"
ON "public"."profiles"
AS PERMISSIVE FOR SELECT
TO authenticated
USING (true);

CREATE POLICY "supabase_auth_admin can insert profile"
ON "public"."profiles"
AS PERMISSIVE FOR INSERT
TO supabase_auth_admin
WITH CHECK (true);

CREATE POLICY "authenticated can read rooms"
ON "public"."rooms"
AS PERMISSIVE FOR SELECT
TO authenticated
USING (TRUE);

CREATE POLICY "authenticated can add rooms"
ON "public"."rooms"
AS PERMISSIVE FOR INSERT
TO authenticated
WITH CHECK (TRUE);

CREATE POLICY "authenticated can read rooms_users"
ON "public"."rooms_users"
AS PERMISSIVE FOR SELECT
TO authenticated
USING (TRUE);

CREATE POLICY "authenticated can add rooms_users"
ON "public"."rooms_users"
AS PERMISSIVE FOR INSERT
TO authenticated
WITH CHECK (TRUE);

CREATE POLICY "authenticated can read broadcast and presence state"
ON "realtime"."messages"
AS PERMISSIVE FOR SELECT
TO authenticated
USING (
  EXISTS (
    SELECT 1
    FROM public.rooms_users
    WHERE user_id = (select auth.uid())
    AND room_topic = realtime.topic()
    AND realtime.messages.extension in ('broadcast', 'presence')
  )
);

CREATE POLICY "authenticated can send broadcast and track presence"
ON "realtime"."messages"
AS PERMISSIVE FOR INSERT
TO authenticated
WITH CHECK (
  EXISTS (
    SELECT 1
    FROM public.rooms_users
    WHERE user_id = (select auth.uid())
    AND room_topic = realtime.topic()
    AND realtime.messages.extension in ('broadcast', 'presence')
  )
);
```

----------------------------------------

TITLE: Environment variables for Supabase configuration
DESCRIPTION: Environment variables file (.env.local) containing Supabase URL and anonymous key placeholders.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-refine.mdx#2025-04-21_snippet_4

LANGUAGE: bash
CODE:
```
VITE_SUPABASE_URL=YOUR_SUPABASE_URL
VITE_SUPABASE_ANON_KEY=YOUR_SUPABASE_ANON_KEY
```

----------------------------------------

TITLE: Implementing Email Signup with JavaScript
DESCRIPTION: JavaScript code snippet for signing up a new user with email and password authentication in Supabase. This example uses the implicit flow and includes an optional redirect URL for after email confirmation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project.supabase.co', 'your-anon-key')

// ---cut---
async function signUpNewUser() {
  const { data, error } = await supabase.auth.signUp({
    email: 'valid.email@supabase.io',
    password: 'example-password',
    options: {
      emailRedirectTo: 'https://example.com/welcome',
    },
  })
}
```

----------------------------------------

TITLE: Restricting INSERT Policy to Authenticated Users and Specific Bucket in SQL
DESCRIPTION: This snippet shows how to modify the INSERT policy to only allow authenticated users to upload assets to a specific bucket.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/security/access-control.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create policy "policy_name"
on storage.objects for insert to authenticated with check (
    -- restrict bucket
    bucket_id = 'my_bucket_id'
);
```

----------------------------------------

TITLE: Querying Data with RLS Policies Applied
DESCRIPTION: Performs a vector similarity search on document sections that automatically respects Row Level Security. Only document sections owned by the current user will be returned due to the RLS policy.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/rag-with-permissions.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
-- Only document sections owned by the user are returned
select *
from document_sections
where document_sections.embedding <#> embedding < -match_threshold
order by document_sections.embedding <#> embedding;
```

----------------------------------------

TITLE: Implementing Stripe Webhook Handling in TypeScript with Supabase Edge Functions
DESCRIPTION: This code demonstrates how to set up an Edge Function that verifies and processes Stripe webhooks. It validates webhook signatures, parses event data, and handles different event types.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/stripe-webhooks.mdx#2025-04-21_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { serve } from 'https://deno.land/std@0.131.0/http/server.ts'
import Stripe from 'https://esm.sh/stripe@11.1.0?target=deno'

const stripe = Stripe(Deno.env.get('STRIPE_API_KEY') ?? '', {
  httpClient: Stripe.createFetchHttpClient(),
  apiVersion: '2022-08-01',
})

// This is your Stripe CLI webhook secret for testing your endpoint locally.
const webhookSecret = Deno.env.get('STRIPE_WEBHOOK_SECRET') ?? ''

serve(async (req) => {
  const signature = req.headers.get('Stripe-Signature')

  if (!signature) {
    return new Response('No signature', { status: 400 })
  }

  const body = await req.text()

  let event
  try {
    event = await stripe.webhooks.constructEventAsync(
      body,
      signature,
      webhookSecret,
      undefined,
      Stripe.createSubtleCryptoProvider()
    )
  } catch (err) {
    console.error(`❌ Error message: ${err.message}`)
    return new Response(`Webhook Error: ${err.message}`, { status: 400 })
  }

  console.log(`✅ Success: ${event.id}`)

  // Return a response to acknowledge receipt of the event.
  return new Response(JSON.stringify({ received: true }), {
    headers: { 'Content-Type': 'application/json' },
  })
})
```

----------------------------------------

TITLE: Creating a Collection with Hugging Face Text Embedding Adapter in Python
DESCRIPTION: This snippet demonstrates how to initialize a vector collection with adapter functionality in the Supabase Python client. It configures a ParagraphChunker to split large text into smaller pieces and a TextEmbedding adapter that uses the Hugging Face 'Supabase/gte-small' model to transform text into vector embeddings.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-07-hugging-face-supabase.mdx#2025-04-21_snippet_0

LANGUAGE: python
CODE:
```
import vecs
from vecs.adapter import Adapter, ParagraphChunker, TextEmbedding

vx = vecs.create_client("postgresql://<user>:<password>@<host>:<port>/<db_name>")

# create a new collection with an associated adapter
docs = vx.get_or_create_collection(
    name="docs",
    # here comes the new part
    adapter=Adapter(
        [
            ParagraphChunker(skip_during_query=True),
            TextEmbedding(model='Supabase/gte-small'),
        ]
    )
)
```

----------------------------------------

TITLE: Optimized RLS Policy without Join
DESCRIPTION: Improved version of the RLS policy that avoids table joins by using a subquery with IN clause.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_16

LANGUAGE: sql
CODE:
```
create policy "rls_test_select" on test_table
to authenticated
using (
  team_id in (
    select team_id
    from team_user
    where user_id = (select auth.uid()) -- no join
  )
);
```

----------------------------------------

TITLE: Edge Function Implementation - Main Handler
DESCRIPTION: Complete implementation of the Edge Function including authentication, code execution, and error handling. Uses Supabase client and supports async operations.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-11-13-supabase-dynamic-functions.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
import "jsr:@supabase/functions-js/edge-runtime.d.ts";

// Import the supabase client
import { createClient } from "<https://esm.sh/@supabase/supabase-js@2>";

console.log("===\n\tBooted Edge Worker!\n===\n");
const supabase_url = Deno.env.get("SUPABASE_URL") ?? "";
const service_role = Deno.env.get("SUPABASE_SERVICE_ROLE_KEY");
// Set the permission to service_role key:
const supabase = createClient(supabase_url, service_role);
// This allows us to use Supabase.ai in the function
const session = new Supabase.ai.Session('gte-small');

Deno.serve(async (req: Request) =>
  const authorization = req.headers.get("Authorization");
  if (!authorization) throw new Error("Authorization header is missing.");
  // Ensures that the function is called with service_role to prevent missuse
  if (!authorization.includes(service_role)) {
    throw new Error("Authorization header is invalid.");
  }

  const { code } = await req.json();
  try {
    // Wrap the provided code in an async function context
    const asyncFunction = new Function('supabase', `
      return (async () => {
        ${code.replace(/\\/g, '')}
      })();
    `);
    // Pass the Supabase client as the scope for the function to use:
    const data = await asyncFunction(supabase);
    console.log(data);
    return new Response(
      JSON.stringify({ data }),
      { headers: { 'Content-Type': 'application/json', 'Connection': 'keep-alive' } },
    );
  } catch (error) {
    console.error("Error executing user code:", error);
    return new Response(
      JSON.stringify({ error: "An error occurred -> " + error.message }),
      { status: 500, headers: { "Content-Type": "application/json" } }
    );
  }
});
```

----------------------------------------

TITLE: Protected API Route in TypeScript
DESCRIPTION: The TypeScript version of the protected API route ensures type safety for request and response objects while providing similar functionality to the JavaScript version, returning user data only if the user is authenticated.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_10

LANGUAGE: typescript
CODE:
```
import { NextApiHandler } from 'next'
import { createPagesServerClient } from '@supabase/auth-helpers-nextjs'

const ProtectedRoute: NextApiHandler = async (req, res) => {
  // Create authenticated Supabase Client
  const supabase = createPagesServerClient({ req, res })
  // Check if we have a session
  const {
    data: { user },
  } = await supabase.auth.getUser()

  if (!user)
    return res.status(401).json({
      error: 'not_authenticated',
      description: 'The user does not have an active session or is not authenticated',
    })

  // Run queries with RLS on the server
  const { data } = await supabase.from('test').select('*')
  res.json(data)
}

export default ProtectedRoute
```

----------------------------------------

TITLE: Creating Supabase Client - JavaScript
DESCRIPTION: This snippet initializes a Supabase client in a SvelteKit application using JavaScript. It creates an async load function that fetches the session information and returns both the client and session to the parent layout. Dependencies include '@supabase/auth-helpers-sveltekit' and environment variables for Supabase URL and anon key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_9

LANGUAGE: javascript
CODE:
```
// src/routes/+layout.js
import { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from '$env/static/public'
import { createSupabaseLoadClient } from '@supabase/auth-helpers-sveltekit'

export const load = async ({ fetch, data, depends }) => {
  depends('supabase:auth')

  const supabase = createSupabaseLoadClient({
    supabaseUrl: PUBLIC_SUPABASE_URL,
    supabaseKey: PUBLIC_SUPABASE_ANON_KEY,
    event: { fetch },
    serverSession: data.session,
  })

  /**
   * It's fine to use `getSession` here, because on the client, `getSession` is
   * safe, and on the server, it reads `session` from the `LayoutData`, which
   * safely checked the session using `safeGetSession`.
   */
  const {
    data: { session },
  } = await supabase.auth.getSession()

  return { supabase, session }
}
```

----------------------------------------

TITLE: Sign Out User with Supabase Auth
DESCRIPTION: This JavaScript snippet demonstrates how to sign out a user using the Supabase client library. It initializes the Supabase client and calls the signOut method. The function returns a promise that resolves when the user is successfully signed out or rejects with an error.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-slack.mdx#2025-04-21_snippet_3

LANGUAGE: js
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('<your-project-url>', '<your-anon-key>')

// ---cut---
async function signOut() {
  const { error } = await supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Sign Out Implementation in JavaScript
DESCRIPTION: Logout method to remove user session and clear local storage in Supabase authentication
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-keycloak.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
async function signOut() {
  const { error } = await supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Deploying Supabase Functions with GitHub Actions
DESCRIPTION: GitHub Actions workflow configuration for automatically deploying Supabase Edge Functions when pushing to or merging into the main branch. Requires SUPABASE_ACCESS_TOKEN secret and project ID configuration.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/README.md#2025-04-21_snippet_0

LANGUAGE: yaml
CODE:
```
name: Deploy Function

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      PROJECT_ID: your-project-id

    steps:
      - uses: actions/checkout@v3

      - uses: supabase/setup-cli@v1
        with:
          version: latest

      - run: supabase functions deploy --project-ref $PROJECT_ID
```

----------------------------------------

TITLE: Creating a 'todos' table in SQL
DESCRIPTION: This SQL snippet is used to create a basic 'todos' table in the Supabase database. The table includes an 'id' as the primary key and a 'task' column for storing task descriptions. Run this SQL command within the Supabase SQL Editor or similar tool.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_0

LANGUAGE: SQL
CODE:
```
-- Create a table called "todos"
-- with a column to store tasks.
create table todos (
  id serial primary key,
  task text
);
```

----------------------------------------

TITLE: Creating DELETE Policy for Profiles
DESCRIPTION: Example of creating a DELETE policy that allows users to delete their own profiles.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
-- 1. Create table
create table profiles (
  id uuid primary key,
  user_id uuid references auth.users,
  avatar_url text
);

-- 2. Enable RLS
alter table profiles enable row level security;

-- 3. Create Policy
create policy "Users can delete a profile."
on profiles for delete
to authenticated                     -- the Postgres Role (recommended)
using ( (select auth.uid()) = user_id );      -- the actual Policy
```

----------------------------------------

TITLE: Using Supabase Realtime for Avatar Stack in Next.js
DESCRIPTION: The code snippet defines a Next.js component that imports the 'RealtimeAvatarStack' and uses it within a page component. It connects to a specific Supabase Realtime room to render avatars representing currently online users. This setup depends on having Supabase configured and requires the use of the @/components/realtime-avatar-stack module. The 'roomName' prop is a string that specifies the realtime room to connect to, and it is crucial for determining the displayed avatars.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/nextjs/realtime-avatar-stack.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
import { RealtimeAvatarStack } from '@/components/realtime-avatar-stack'

export default function Page() {
  return (
    <Header className="flex items-center justify-between">
      <h1>Lumon Industries</h1>
      <RealtimeAvatarStack roomName="break_room" />
    </Header>
  )
}
```

----------------------------------------

TITLE: Creating a Static Route Handler with Supabase in Next.js (TypeScript)
DESCRIPTION: TypeScript implementation of a Next.js static route handler that inserts data into Supabase. It uses the typed createClient from supabase-js for type safety, processes the POST request data, and returns the inserted record.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_31

LANGUAGE: tsx
CODE:
```
import { createClient } from '@supabase/supabase-js'
import { NextResponse } from 'next/server'

import type { Database } from '@/lib/database.types'

export async function POST(request: Request) {
  const { title } = await request.json()

  const supabase = createClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
  )

  const { data } = await supabase.from('todos').insert({ title }).select()
  return NextResponse.json(data)
}
```

----------------------------------------

TITLE: Deploying All Edge Functions
DESCRIPTION: Command to deploy all Edge Functions in the project to production.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/deploy.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
supabase functions deploy
```

----------------------------------------

TITLE: Installing Supabase JavaScript Client
DESCRIPTION: Command to install the Supabase JavaScript client library via npm.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-react.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @supabase/supabase-js
```

----------------------------------------

TITLE: Implementing Row Level Security in Edge Function
DESCRIPTION: Demonstrates how to implement Row Level Security in a Supabase Edge Function when querying data with authentication context.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/auth.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
import { createClient } from 'jsr:@supabase/supabase-js@2'

Deno.serve(async (req: Request) => {

  const supabaseClient = createClient(
    Deno.env.get('SUPABASE_URL') ?? '',
    Deno.env.get('SUPABASE_ANON_KEY') ?? '',
  );

  // Get the session or user object
  const authHeader = req.headers.get('Authorization')!;
  const token = authHeader.replace('Bearer ', '');
  const { data: userData } = await supabaseClient.auth.getUser(token);
  const { data, error } = await supabaseClient.from('profiles').select('*');

  return new Response(JSON.stringify({ data }), {
    headers: { 'Content-Type': 'application/json' },
    status: 200,
  })

})
```

----------------------------------------

TITLE: Installing Supabase JavaScript Client
DESCRIPTION: Command to install the Supabase JavaScript client library, which provides methods for interacting with Supabase services from the SvelteKit application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
npm install @supabase/supabase-js
```

----------------------------------------

TITLE: Creating a Postgres Trigger to Execute Function in SQL
DESCRIPTION: This SQL code creates a trigger that executes the `your_table_changes` function after any changes (insert, update, or delete) to the `public.your_table` table. The trigger is defined to execute for each row affected by the change.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/subscribing-to-database-changes.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create trigger handle_your_table_changes
after insert or update or delete
on public.your_table
for each row
execute function your_table_changes ();
```

----------------------------------------

TITLE: Implementing Hugging Face Embeddings in Supabase Edge Function
DESCRIPTION: This Deno/TypeScript Edge Function creates an API endpoint that accepts text input, generates embeddings using the Hugging Face 'Supabase/gte-small' model via the transformers.js library, and stores the resulting embedding in a Supabase table. It demonstrates full integration between Supabase and Hugging Face in a serverless environment.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-08-07-hugging-face-supabase.mdx#2025-04-21_snippet_3

LANGUAGE: typescript
CODE:
```
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { env, pipeline } from 'https://cdn.jsdelivr.net/npm/@xenova/transformers@2.5.0'
import { createClient } from 'jsr:@supabase/supabase-js@2'

// Preparation for Deno runtime
env.useBrowserCache = false
env.allowLocalModels = false

const supabase = createClient(
  'https://xyzcompany.supabase.co',
  'public-anon-key',
)

// Construct pipeline outside of serve for faster warm starts
const pipe = await pipeline(
  'feature-extraction',
  'Supabase/gte-small',
)

// Deno Handler
serve(async (req) => {
  const { input } = await req.json()

  // Generate the embedding from the user input
  const output = await pipe(input, {
    pooling: 'mean',
    normalize: true,
  })

  // Get the embedding output
  const embedding = Array.from(output.data)

  // Store the embedding
  const { data, error } = await supabase
    .from('collections')
    .insert({ embedding })

  // Return the embedding
  return new Response(
    { new_row: data },
    { headers: { 'Content-Type': 'application/json' } },
  )
})
```

----------------------------------------

TITLE: Restoring Backup with psql Command in SQL
DESCRIPTION: This snippet shows how to use the psql command to restore a PostgreSQL database backup. The connection string must be replaced with the relevant database connection information, and the file path must be specified for the backup file. This command is intended for use within terminal or command-line interfaces when connected to the desired PostgreSQL instance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-within-supabase/dashboard-restore.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
psql -d [CONNECTION_STRING] -f /file/path
```

----------------------------------------

TITLE: Combining Data Fetching and Mutations with Next.js Server Actions
DESCRIPTION: Example showing how to use both data fetching and mutations within the same Next.js component using Supabase. This demonstrates fetching data with Server Components and adding server-side mutation logic using Server Actions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-01-supabase-is-now-compatible-with-nextjs-14.mdx#2025-04-21_snippet_2

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  const { data } = await supabase.from('...').select()

  const createNote = async () => {
    'use server'
    await supabase.from('...').insert({...})
  }

  return ...
}
```

----------------------------------------

TITLE: Basic SELECT with Filtering and Ordering
DESCRIPTION: Demonstrates how to select specific columns with WHERE, ORDER BY, and LIMIT clauses using both SQL and JavaScript. The query filters players by age range and team, then orders results by name.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/sql-to-api.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
select first_name, last_name, team_id, age
from players
where age between 20 and 24 and team_id != 'STL'
order by last_name, first_name desc
limit 20;
```

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase
  .from('players')
  .select('first_name,last_name,team_id,age')
  .gte('age', 20)
  .lte('age', 24)
  .not('team_id', 'eq', 'STL')
  .order('last_name', { ascending: true }) // or just .order('last_name')
  .order('first_name', { ascending: false })
  .limit(20)
```

----------------------------------------

TITLE: Authentication with Password in Supabase.js v2
DESCRIPTION: Example of signing in with email and password using the new signInWithPassword() method in Supabase.js v2.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/release-notes.mdx#2025-04-21_snippet_9

LANGUAGE: ts
CODE:
```
const { data } = await supabase.auth.signInWithPassword({
  email: 'hello@example',
  password: 'pass',
})
```

----------------------------------------

TITLE: Querying Total Storage Size Per Bucket (SQL)
DESCRIPTION: This SQL query calculates the total size of all objects within each storage bucket. It groups the results by `bucket_id`, sums the object sizes (extracted from metadata), converts the total size to megabytes, and orders the buckets by total size in descending order. This helps in understanding which buckets consume the most storage space.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/storage-size.mdx#_snippet_1

LANGUAGE: sql
CODE:
```
select
    bucket_id,
    (sum((metadata->>'size')::int) / 1048576.0)::numeric(10, 2) as total_size_megabyte
from
    storage.objects
group by
    bucket_id
order by
    total_size_megabyte desc;
```

----------------------------------------

TITLE: Installing Supabase and Dependencies in React Native (Bash)
DESCRIPTION: Navigates into the `my-app` directory and uses `npx expo install` to add necessary packages: `@supabase/supabase-js`, `@react-native-async-storage/async-storage`, `@rneui/themed`, and `react-native-url-polyfill`. These are required for Supabase integration and UI components.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/react-native.mdx#_snippet_2

LANGUAGE: Bash
CODE:
```
cd my-app && npx expo install @supabase/supabase-js @react-native-async-storage/async-storage @rneui/themed react-native-url-polyfill
```

----------------------------------------

TITLE: Creating Trigger Function for Auditing in PostgreSQL
DESCRIPTION: Defines a trigger function that automatically populates the audit table when data changes occur in the audited tables. It captures inserts, updates, and deletes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2022-03-08-postgres-audit.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
create or replace function audit.insert_update_delete_trigger()
    returns trigger
    security definer
    language plpgsql
as $$
declare
    pkey_cols text[] = audit.primary_key_columns(TG_RELID);
    record_jsonb jsonb = to_jsonb(new);
    record_id uuid = audit.to_record_id(TG_RELID, pkey_cols, record_jsonb);
    old_record_jsonb jsonb = to_jsonb(old);
    old_record_id uuid = audit.to_record_id(TG_RELID, pkey_cols, old_record_jsonb);
begin

    insert into audit.record_version(
        record_id,
        old_record_id,
        op,
        table_oid,
        table_schema,
        table_name,
        record,
        old_record
    )
    select
        record_id,
        old_record_id,
        TG_OP,
        TG_RELID,
        TG_TABLE_SCHEMA,
        TG_TABLE_NAME,
        record_jsonb,
        old_record_jsonb;

    return coalesce(new, old);
end;
$$;
```

----------------------------------------

TITLE: Creating Embedding Processing Function with Batch Support
DESCRIPTION: Implements a function to process queued embedding jobs in batches, with configurable batch size, request limits, and timeout settings. Includes pg_cron scheduling for automatic processing every 10 seconds.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/automatic-embeddings.mdx#2025-04-21_snippet_6

LANGUAGE: plpgsql
CODE:
```
create or replace function util.process_embeddings(
  batch_size int = 10,
  max_requests int = 10,
  timeout_milliseconds int = 5 * 60 * 1000 -- default 5 minute timeout
)
returns void
language plpgsql
as $$
declare
  job_batches jsonb[];
  batch jsonb;
begin
  with
    -- First get jobs and assign batch numbers
    numbered_jobs as (
      select
        message || jsonb_build_object('jobId', msg_id) as job_info,
        (row_number() over (order by 1) - 1) / batch_size as batch_num
      from pgmq.read(
        queue_name => 'embedding_jobs',
        vt => timeout_milliseconds / 1000,
        qty => max_requests * batch_size
      )
    ),
    -- Then group jobs into batches
    batched_jobs as (
      select
        jsonb_agg(job_info) as batch_array,
        batch_num
      from numbered_jobs
      group by batch_num
    )
  -- Finally aggregate all batches into array
  select array_agg(batch_array)
  from batched_jobs
  into job_batches;

  -- Invoke the embed edge function for each batch
  foreach batch in array job_batches loop
    perform util.invoke_edge_function(
      name => 'embed',
      body => batch,
      timeout_milliseconds => timeout_milliseconds
    );
  end loop;
end;
$$;

-- Schedule the embedding processing
select
  cron.schedule(
    'process-embeddings',
    '10 seconds',
    $$
    select util.process_embeddings();
    $$
  );
```

----------------------------------------

TITLE: Creating HNSW Index on Vector Column in SQL
DESCRIPTION: SQL command template for creating an HNSW index on a vectorized column in Supabase. The syntax includes options for different search types: Euclidean distance, negative inner product, or cosine distance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/increase-vector-lookup-speeds-by-applying-an-hsnw-index-ohLHUM.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
CREATE INDEX <custom name of index> ON <table name> USING hnsw (<vectorized column> <search type>);
```

----------------------------------------

TITLE: Querying Decrypted Secrets from Vault
DESCRIPTION: Demonstrates how to query the vault.decrypted_secrets view to access decrypted secret values. This view automatically decrypts the stored secrets on-the-fly when queried.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/vault.mdx#2025-04-22_snippet_2

LANGUAGE: sql
CODE:
```
select * 
from vault.decrypted_secrets 
order by created_at desc 
limit 3;
```

----------------------------------------

TITLE: Running Next.js Development Server with Package Managers
DESCRIPTION: Commands to start the Next.js development server using npm, yarn, pnpm, or bun. After running any of these commands, you can access your application at http://localhost:3000.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/caching/with-react-query-nextjs-14/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Configuring Environment Variables
DESCRIPTION: Setting up required Supabase environment variables for authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs.mdx#2025-04-21_snippet_1

LANGUAGE: bash
CODE:
```
NEXT_PUBLIC_SUPABASE_URL=your-supabase-url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your-supabase-anon-key
```

----------------------------------------

TITLE: PostgreSQL Query Plan Analysis
DESCRIPTION: Command for analyzing query execution plans in PostgreSQL, showing how to use EXPLAIN and EXPLAIN ANALYZE for query optimization
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/inspect.mdx#2025-04-21_snippet_8

LANGUAGE: sql
CODE:
```
explain analyze <query-statement-here>;
```

----------------------------------------

TITLE: Creating Server Supabase Client for Next.js
DESCRIPTION: TypeScript code to create a server-side Supabase client using the Supabase SSR helper library, with proper typing and cookie handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-01-12-react-query-nextjs-app-router-cache-helpers.mdx#2025-04-21_snippet_7

LANGUAGE: typescript
CODE:
```
import { createServerClient } from '@supabase/ssr'
import { cookies } from 'next/headers'
import { Database } from './database.types'

export default function useSupabaseServer(cookieStore: ReturnType<typeof cookies>) {
  return createServerClient<Database>(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
    {
      cookies: {
        get(name: string) {
          return cookieStore.get(name)?.value
        },
      },
    }
  )
}
```

----------------------------------------

TITLE: Implementing Phone MFA Enrollment Component in React with Supabase
DESCRIPTION: A React component that handles phone MFA enrollment flow using Supabase Auth. It manages phone number input, verification code entry, and implements the complete enrollment process including factor enrollment, challenge creation, and code verification.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-mfa/phone.mdx#2025-04-21_snippet_0

LANGUAGE: tsx
CODE:
```
export function EnrollMFA({
  onEnrolled,
  onCancelled,
}: {
  onEnrolled: () => void
  onCancelled: () => void
}) {
  const [phoneNumber, setPhoneNumber] = useState('')
  const [factorId, setFactorId] = useState('')
  const [verifyCode, setVerifyCode] = useState('')
  const [error, setError] = useState('')
  const [challengeId, setChallengeId] = useState('')

  const onEnableClicked = () => {
    setError('')
    ;(async () => {
      const verify = await auth.mfa.verify({
        factorId,
        challengeId,
        code: verifyCode,
      })
      if (verify.error) {
        setError(verify.error.message)
        throw verify.error
      }

      onEnrolled()
    })()
  }
  const onEnrollClicked = async () => {
    setError('')
    try {
      const factor = await auth.mfa.enroll({
        phone: phoneNumber,
        factorType: 'phone',
      })
      if (factor.error) {
        setError(factor.error.message)
        throw factor.error
      }

      setFactorId(factor.data.id)
    } catch (error) {
      setError('Failed to Enroll the Factor.')
    }
  }

  const onSendOTPClicked = async () => {
    setError('')
    try {
      const challenge = await auth.mfa.challenge({ factorId })
      if (challenge.error) {
        setError(challenge.error.message)
        throw challenge.error
      }

      setChallengeId(challenge.data.id)
    } catch (error) {
      setError('Failed to resend the code.')
    }
  }

  return (
    <>
      {error && <div className="error">{error}</div>}
      <input
        type="text"
        placeholder="Phone Number"
        value={phoneNumber}
        onChange={(e) => setPhoneNumber(e.target.value.trim())}
      />
      <input
        type="text"
        placeholder="Verification Code"
        value={verifyCode}
        onChange={(e) => setVerifyCode(e.target.value.trim())}
      />
      <input type="button" value="Enroll" onClick={onEnrollClicked} />
      <input type="button" value="Submit Code" onClick={onEnableClicked} />
      <input type="button" value="Send OTP Code" onClick={onSendOTPClicked} />
      <input type="button" value="Cancel" onClick={onCancelled} />
    </>
  )
}
```

----------------------------------------

TITLE: Creating UPDATE Policy for Profiles
DESCRIPTION: Example of creating an UPDATE policy that allows users to update their own profiles using both USING and WITH CHECK clauses.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
-- 1. Create table
create table profiles (
  id uuid primary key,
  user_id uuid references auth.users,
  avatar_url text
);

-- 2. Enable RLS
alter table profiles enable row level security;

-- 3. Create Policy
create policy "Users can update their own profile."
on profiles for update
to authenticated                    -- the Postgres Role (recommended)
using ( (select auth.uid()) = user_id )       -- checks if the existing row complies with the policy expression
with check ( (select auth.uid()) = user_id ); -- checks if the new row complies with the policy expression
```

----------------------------------------

TITLE: Creating Basic PostgreSQL View
DESCRIPTION: Creates a view named 'transcripts' that joins students, courses, and grades tables to provide a consolidated view of student academic records.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-11-18-postgresql-views.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create view transcripts as
  select
    students.name,
    students.type,
    courses.title,
    courses.code,
    grades.result
  from
    grades
    left join students on grades.student_id = students.id
    left join courses on grades.course_id = courses.id;
```

----------------------------------------

TITLE: Environment Configuration for Supabase Credentials
DESCRIPTION: Defines essential environment variables for connecting to Supabase, including the project URL and anonymous key
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/password-based-auth.mdx#2025-04-21_snippet_0

LANGUAGE: env
CODE:
```
VITE_SUPABASE_URL=
VITE_SUPABASE_ANON_KEY=
```

----------------------------------------

TITLE: Apply Database Migrations (CLI)
DESCRIPTION: This command applies any pending database migrations to the local Supabase database using the Supabase CLI.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
supabase migration up
```

----------------------------------------

TITLE: Demonstrating Implicit RLS Policy in SQL Queries
DESCRIPTION: Shows how a Row Level Security policy is implicitly added to SQL queries, effectively filtering results to only include rows where the authenticated user ID matches the user_id column.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2021-12-01-realtime-row-level-security-in-postgresql.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
select *
from todos
where auth.uid() = todos.user_id; -- Policy is implicitly added.
```

----------------------------------------

TITLE: Creating Typed Supabase Client in Next.js
DESCRIPTION: These snippets demonstrate how to create typed Supabase clients using createPagesBrowserClient and createPagesServerClient in Next.js. They show how to use CLI-generated types for enhanced type safety and auto-completion.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/nextjs-pages.mdx#2025-04-21_snippet_16

LANGUAGE: typescript
CODE:
```
// client-side
import type { Database } from 'types_db'
const [supabaseClient] = useState(() => createPagesBrowserClient<Database>())

// server-side API route
import type { NextApiRequest, NextApiResponse } from 'next'
import type { Database } from 'types_db'

export default async (req: NextApiRequest, res: NextApiResponse) => {
  const supabaseServerClient = createPagesServerClient<Database>({
    req,
    res,
  })
  const {
    data: { user },
  } = await supabaseServerClient.auth.getUser()

  res.status(200).json({ name: user?.name ?? '' })
}
```

----------------------------------------

TITLE: Analyzing Query Execution Plan in PostgreSQL
DESCRIPTION: Using EXPLAIN command to analyze query execution plan for performance optimization.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/query-optimization.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
explain select * from customers where sign_up_date > 25;
```

----------------------------------------

TITLE: Authenticating User in Next.js with Supabase
DESCRIPTION: This Next.js server component checks if a user is authenticated using a Supabase server client. If the user is not found or an error occurs, it redirects the user to the '/login' route. Otherwise, it renders a simple welcome message.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/nextjs.mdx#_snippet_9

LANGUAGE: javascript
CODE:
```
import { redirect } from 'next/navigation'

import { createClient } from '@/utils/supabase/server'

export default async function PrivatePage() {
  const supabase = await createClient()

  const { data, error } = await supabase.auth.getUser()
  if (error || !data?.user) {
    redirect('/login')
  }

  return <p>Hello {data.user.email}</p>
}
```

----------------------------------------

TITLE: Creating a Bucket using JavaScript in Supabase Storage
DESCRIPTION: This JavaScript snippet demonstrates how to create a new bucket in Supabase Storage using the Supabase client library. It utilizes the `supabase.storage.createBucket()` method to create a bucket named 'avatars'. The function returns a promise that resolves with the data or an error if the operation fails.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/quickstart.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
// Use the JS library to create a bucket.

const { data, error } = await supabase.storage.createBucket('avatars')
```

----------------------------------------

TITLE: Configuring Row Level Security Policy
DESCRIPTION: SQL command to create a row level security policy that allows authenticated users to read from the countries table.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/auth/hono/README.md#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create policy "authenticated users can read countries"
on public.countries
for select to authenticated
using (true);
```

----------------------------------------

TITLE: Listening to Specific Table Events in JavaScript with Supabase Realtime
DESCRIPTION: Creates a channel to listen for all event types on a specific table ('todos') in the public schema of a Supabase database. The code uses the 'table' parameter to specify which table to monitor.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_25

LANGUAGE: javascript
CODE:
```
const changes = supabase
  .channel('table-db-changes')
  .on(
    'postgres_changes',
    {
      event: '*',
      schema: 'public',
      table: 'todos',
    },
    (payload) => console.log(payload)
  )
  .subscribe()
```

----------------------------------------

TITLE: Implementing Account Page with Profile Management in Flutter and Supabase
DESCRIPTION: A StatefulWidget that allows users to view and update their profile information stored in Supabase. It includes functionality to fetch profile data, update profile details, and sign out. The widget handles various error states and loading indicators.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-flutter.mdx#2025-04-21_snippet_5

LANGUAGE: dart
CODE:
```
import 'package:flutter/material.dart';
import 'package:supabase_flutter/supabase_flutter.dart';
import 'package:supabase_quickstart/main.dart';
import 'package:supabase_quickstart/pages/login_page.dart';

class AccountPage extends StatefulWidget {
  const AccountPage({super.key});

  @override
  State<AccountPage> createState() => _AccountPageState();
}

class _AccountPageState extends State<AccountPage> {
  final _usernameController = TextEditingController();
  final _websiteController = TextEditingController();

  String? _avatarUrl;
  var _loading = true;

  /// Called once a user id is received within `onAuthenticated()`
  Future<void> _getProfile() async {
    setState(() {
      _loading = true;
    });

    try {
      final userId = supabase.auth.currentSession!.user.id;
      final data =
          await supabase.from('profiles').select().eq('id', userId).single();
      _usernameController.text = (data['username'] ?? '') as String;
      _websiteController.text = (data['website'] ?? '') as String;
      _avatarUrl = (data['avatar_url'] ?? '') as String;
    } on PostgrestException catch (error) {
      if (mounted) context.showSnackBar(error.message, isError: true);
    } catch (error) {
      if (mounted) {
        context.showSnackBar('Unexpected error occurred', isError: true);
      }
    } finally {
      if (mounted) {
        setState(() {
          _loading = false;
        });
      }
    }
  }

  /// Called when user taps `Update` button
  Future<void> _updateProfile() async {
    setState(() {
      _loading = true;
    });
    final userName = _usernameController.text.trim();
    final website = _websiteController.text.trim();
    final user = supabase.auth.currentUser;
    final updates = {
      'id': user!.id,
      'username': userName,
      'website': website,
      'updated_at': DateTime.now().toIso8601String(),
    };
    try {
      await supabase.from('profiles').upsert(updates);
      if (mounted) context.showSnackBar('Successfully updated profile!');
    } on PostgrestException catch (error) {
      if (mounted) context.showSnackBar(error.message, isError: true);
    } catch (error) {
      if (mounted) {
        context.showSnackBar('Unexpected error occurred', isError: true);
      }
    } finally {
      if (mounted) {
        setState(() {
          _loading = false;
        });
      }
    }
  }

  Future<void> _signOut() async {
    try {
      await supabase.auth.signOut();
    } on AuthException catch (error) {
      if (mounted) context.showSnackBar(error.message, isError: true);
    } catch (error) {
      if (mounted) {
        context.showSnackBar('Unexpected error occurred', isError: true);
      }
    } finally {
      if (mounted) {
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(builder: (_) => const LoginPage()),
        );
      }
    }
  }

  @override
  void initState() {
    super.initState();
    _getProfile();
  }

  @override
  void dispose() {
    _usernameController.dispose();
    _websiteController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Profile')),
      body: ListView(
        padding: const EdgeInsets.symmetric(vertical: 18, horizontal: 12),
        children: [
          TextFormField(
            controller: _usernameController,
            decoration: const InputDecoration(labelText: 'User Name'),
          ),
          const SizedBox(height: 18),
          TextFormField(
            controller: _websiteController,
            decoration: const InputDecoration(labelText: 'Website'),
          ),
          const SizedBox(height: 18),
          ElevatedButton(
            onPressed: _loading ? null : _updateProfile,
            child: Text(_loading ? 'Saving...' : 'Update'),
          ),
          const SizedBox(height: 18),
          TextButton(onPressed: _signOut, child: const Text('Sign Out')),
        ],
      ),
    );
  }
}
```

----------------------------------------

TITLE: Signing Up New User using Supabase in Kotlin
DESCRIPTION: This Kotlin snippet illustrates how to sign up a new user using the Supabase Kotlin SDK by providing their email and password.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_14

LANGUAGE: kotlin
CODE:
```
suspend fun signUpNewUser() {
	supabase.auth.signUpWith(Email) {
		email = "valid.email@supabase.io"
		password = "example-password"
	}
}
```

----------------------------------------

TITLE: Setting Environment Variables for Next.js
DESCRIPTION: Configures the Supabase URL and anon key environment variables in a .env.local file for a Next.js application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
NEXT_PUBLIC_SUPABASE_URL=your_supabase_project_url
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
```

----------------------------------------

TITLE: Initializing Supabase Project
DESCRIPTION: Initialize a new Supabase project in your repository's root directory after installing the CLI. This command sets up the necessary configuration files and directories for managing your local Supabase environment and linking it to a remote project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development.mdx#_snippet_1

LANGUAGE: sh
CODE:
```
npx supabase init
```

LANGUAGE: sh
CODE:
```
yarn supabase init
```

LANGUAGE: sh
CODE:
```
pnpx supabase init
```

LANGUAGE: sh
CODE:
```
supabase init
```

----------------------------------------

TITLE: Creating RLS Policies for Authorized Delete Access
DESCRIPTION: SQL commands to create Row Level Security policies for authorized delete access on channels and messages tables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/custom-claims-and-role-based-access-control-rbac.mdx#2025-04-21_snippet_6

LANGUAGE: sql
CODE:
```
create policy "Allow authorized delete access" on public.channels for delete to authenticated using ( (SELECT authorize('channels.delete')) );
create policy "Allow authorized delete access" on public.messages for delete to authenticated using ( (SELECT authorize('messages.delete')) );
```

----------------------------------------

TITLE: Creating WHERE Clause Indexes in PostgreSQL
DESCRIPTION: Creating indexes for columns used in WHERE clause filtering to improve query performance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/query-optimization.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create index idx_customers_sign_up_date on customers (sign_up_date);

create index idx_orders_status on orders (status);
```

----------------------------------------

TITLE: Log In to Supabase CLI (Bash)
DESCRIPTION: Authenticates the user with the Supabase CLI, allowing interaction with remote projects.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/declarative-database-schemas.mdx#_snippet_8

LANGUAGE: bash
CODE:
```
supabase login
```

----------------------------------------

TITLE: Initiating Google OAuth Sign-in with Supabase JS
DESCRIPTION: This snippet demonstrates how to initiate the Google OAuth sign-in flow using the Supabase JavaScript client library. It calls the `signInWithOAuth` method with the 'google' provider. This typically redirects the user to the Google consent screen.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#_snippet_2

LANGUAGE: js
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('url', 'anonKey')

// ---cut---
supabase.auth.signInWithOAuth({
  provider: 'google',
})
```

----------------------------------------

TITLE: Defining TypeScript Types for Nested Queries in Supabase
DESCRIPTION: Example of how to define TypeScript types for nested join queries in Supabase, making response data strongly typed.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/joins-and-nesting.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { QueryResult, QueryData, QueryError } from '@supabase/supabase-js'

const sectionsWithInstrumentsQuery = supabase.from('orchestral_sections').select(`
  id,
  name,
  instruments (
    id,
    name
  )
`)
type SectionsWithInstruments = QueryData<typeof sectionsWithInstrumentsQuery>

const { data, error } = await sectionsWithInstrumentsQuery
if (error) throw error
const sectionsWithInstruments: SectionsWithInstruments = data
```

----------------------------------------

TITLE: Generating and Storing OpenAI Embeddings in PostgreSQL
DESCRIPTION: TypeScript function to generate embeddings using OpenAI's API and store them in a PostgreSQL database using Supabase client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-02-03-openai-embeddings-postgres-vector.mdx#2025-04-21_snippet_4

LANGUAGE: tsx
CODE:
```
import { createClient } from '@supabase/supabase-js'
import { Configuration, OpenAIApi } from 'openai'
import { supabaseClient } from './lib/supabase'

async function generateEmbeddings() {
  const configuration = new Configuration({ apiKey: '<YOUR_OPENAI_API_KEY>' })
  const openAi = new OpenAIApi(configuration)

  const documents = await getDocuments() // Your custom function to load docs

  // Assuming each document is a string
  for (const document of documents) {
    // OpenAI recommends replacing newlines with spaces for best results
    const input = document.replace(/\n/g, ' ')

    const embeddingResponse = await openai.createEmbedding({
      model: 'text-embedding-ada-002',
      input,
    })

    const [{ embedding }] = embeddingResponse.data.data

    // In production we should handle possible errors
    await supabaseClient.from('documents').insert({
      content: document,
      embedding,
    })
  }
}
```

----------------------------------------

TITLE: Initializing Supabase Client in React
DESCRIPTION: Creating a helper file to initialize the Supabase client with environment variables for use throughout the app.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-react.mdx#2025-04-21_snippet_3

LANGUAGE: js
CODE:
```
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = process.env.REACT_APP_SUPABASE_URL
const supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey)
```

----------------------------------------

TITLE: Creating a Supabase client in JavaScript
DESCRIPTION: This JavaScript snippet shows how to create a Supabase client that can be used to interact with the Supabase service and listen to Postgres changes. The function requires the project URL and an anonymous API key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_3

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  'https://<project>.supabase.co',
  '<your-anon-key>'
)
```

----------------------------------------

TITLE: Connecting to Local Postgres Database
DESCRIPTION: Example of connecting to a local Postgres instance using the Supabase CLI with a connection string
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/inspect.mdx#2025-04-21_snippet_1

LANGUAGE: shell
CODE:
```
supabase --db-url postgresql://postgres:postgres@localhost:5432/postgres inspect db bloat
```

----------------------------------------

TITLE: Creating a Policy for Role-Based Access
DESCRIPTION: This SQL code snippet creates a policy that allows complete read access to all objects within the 'teams' bucket for users with the 'manager' role. The policy uses Supabase's Row Level Security to enforce this access control.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/schema/custom-roles.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create policy "Manager can view all files in the bucket 'teams'"
on storage.objects
for select
to manager
using (
  bucket_id = 'teams'
);
```

----------------------------------------

TITLE: Querying Supabase Auth Users Table (SQL)
DESCRIPTION: Executes a SQL query to select all users from the `auth.users` table in the Supabase database. This is used to verify the initial state of the user table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/quickstarts/react-native.mdx#_snippet_0

LANGUAGE: SQL
CODE:
```
select * from auth.users;
```

----------------------------------------

TITLE: Enabling Row Level Security
DESCRIPTION: Enables row level security on the todos table and creates a policy allowing public read access.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/quickstart.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
alter table "todos"
enable row level security;

create policy "Allow public access"
  on todos
  for select
  to anon
  using (true);
```

----------------------------------------

TITLE: Setting up Database Schema in Supabase SQL Editor
DESCRIPTION: This SQL snippet creates the necessary tables and relationships for a product management system in Supabase. It defines tables for products, prices, and users, along with their respective columns and constraints.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/kotlin_project_setup.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
<$Partial path="product_management_sql_template.mdx" />
```

----------------------------------------

TITLE: Implementing OpenAI GPT Completion in TypeScript Edge Function
DESCRIPTION: This TypeScript code implements an edge function that uses OpenAI's API to generate GPT completions. It takes a user query via a POST request and returns the AI-generated response.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/openai.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import OpenAI from 'https://deno.land/x/openai@v4.24.0/mod.ts'

Deno.serve(async (req) => {
  const { query } = await req.json()
  const apiKey = Deno.env.get('OPENAI_API_KEY')
  const openai = new OpenAI({
    apiKey: apiKey,
  })

  // Documentation here: https://github.com/openai/openai-node
  const chatCompletion = await openai.chat.completions.create({
    messages: [{ role: 'user', content: query }],
    // Choose model from here: https://platform.openai.com/docs/models
    model: 'gpt-3.5-turbo',
    stream: false,
  })

  const reply = chatCompletion.choices[0].message.content

  return new Response(reply, {
    headers: { 'Content-Type': 'text/plain' },
  })
})
```

----------------------------------------

TITLE: Creating INSERT Policy for Profiles
DESCRIPTION: Example of creating an INSERT policy that allows authenticated users to create their own profiles.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
-- 1. Create table
create table profiles (
  id uuid primary key,
  user_id uuid references auth.users,
  avatar_url text
);

-- 2. Enable RLS
alter table profiles enable row level security;

-- 3. Create Policy
create policy "Users can create a profile."
on profiles for insert
to authenticated                          -- the Postgres Role (recommended)
with check ( (select auth.uid()) = user_id );      -- the actual Policy
```

----------------------------------------

TITLE: User Signup - Dart
DESCRIPTION: Submits a new user signup request with specified email, password, and metadata in Dart.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/managing-user-data.mdx#2025-04-21_snippet_3

LANGUAGE: dart
CODE:
```
final res = await supabase.auth.signUp(
  email: 'valid.email@supabase.io',
  password: 'example-password',
  data: {
    'first_name': 'John',
    'age': 27,
  },
);
```

----------------------------------------

TITLE: Configuring Environment Variables for Supabase Authentication
DESCRIPTION: Environment variables required for setting up Supabase authentication. These include the Supabase URL and anonymous key that can be found in the Supabase dashboard or local instance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/tanstack/social-auth.mdx#2025-04-21_snippet_0

LANGUAGE: env
CODE:
```
VITE_SUPABASE_URL=
VITE_SUPABASE_ANON_KEY=
```

----------------------------------------

TITLE: Importing and Rendering Basic Supabase Auth UI (JavaScript)
DESCRIPTION: Imports the required modules and initializes the Supabase client. It then renders the basic Auth component, passing the initialized client instance as a prop. This renders the component without any styling applied.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/auth-ui.mdx#_snippet_1

LANGUAGE: js
CODE:
```
import { createClient } from '@supabase/supabase-js'
import { Auth } from '@supabase/auth-ui-react'

const supabase = createClient('<INSERT PROJECT URL>', '<INSERT PROJECT ANON API KEY>')

const App = () => <Auth supabaseClient={supabase} />
```

----------------------------------------

TITLE: Creating User Metadata During Signup with Supabase Auth in JavaScript
DESCRIPTION: This snippet demonstrates how to use the Supabase JavaScript client's signUp function to create a new user with additional metadata including personal information. The metadata is stored in the auth.raw_user_meta_data column of the auth.users table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/customizing-emails-by-language-KZ_38Q.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.auth.signUp({
  email: 'email@some_[email.com](http://email.com/)',
  password: 'example-password',
  options: {
    data: {
      first_name: 'John',
      last_name: 'Doe',
      age: 27,
    },
  },
})
```

----------------------------------------

TITLE: Implementing Hybrid Search Function in PostgreSQL
DESCRIPTION: SQL function that combines full-text and semantic search using reciprocal rank fusion (RRF). Accepts query text, embedding, and various parameters for customizing search behavior.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/hybrid-search.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create or replace function hybrid_search(
  query_text text,
  query_embedding vector(512),
  match_count int,
  full_text_weight float = 1,
  semantic_weight float = 1,
  rrf_k int = 50
)
returns setof documents
language sql
as $$
with full_text as (
  select
    id,
    -- Note: ts_rank_cd is not indexable but will only rank matches of the where clause
    -- which shouldn't be too big
    row_number() over(order by ts_rank_cd(fts, websearch_to_tsquery(query_text)) desc) as rank_ix
  from
    documents
  where
    fts @@ websearch_to_tsquery(query_text)
  order by rank_ix
  limit least(match_count, 30) * 2
),
semantic as (
  select
    id,
    row_number() over (order by embedding <#> query_embedding) as rank_ix
  from
    documents
  order by rank_ix
  limit least(match_count, 30) * 2
)
select
  documents.*
from
  full_text
  full outer join semantic
    on full_text.id = semantic.id
  join documents
    on coalesce(full_text.id, semantic.id) = documents.id
order by
  coalesce(1.0 / (rrf_k + full_text.rank_ix), 0.0) * full_text_weight +
  coalesce(1.0 / (rrf_k + semantic.rank_ix), 0.0) * semantic_weight
  desc
limit
  least(match_count, 30)
$$;
```

----------------------------------------

TITLE: Signing Out in JavaScript using Supabase
DESCRIPTION: Demonstrates logging out a user using the Supabase JS client by calling the signOut() function to remove the session and clear relevant storage. This snippet requires a Supabase client instance created with project URL and anon key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-notion.mdx#2025-04-21_snippet_3

LANGUAGE: JavaScript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('<your-project-url>', '<your-anon-key>')

// ---cut---
async function signOut() {
  const { error } = await supabase.auth.signOut()
}

```

----------------------------------------

TITLE: Creating RLS Policy with Different Access Levels for Anonymous vs. Permanent Users
DESCRIPTION: SQL policy that limits anonymous users to view only posts created today while giving permanent users full read access to all posts.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-04-17-anonymous-sign-ins.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create policy "Limit access to anonymous users"
on public.posts
for select
to authenticated -- Note: user is still authenticated
using (
  case
    when (select (auth.jwt() ->> 'is_anonymous'))::boolean is true
    then (created_at >= current_date)
  else
    true
  end
);
```

----------------------------------------

TITLE: Setting Table-Level Permissions
DESCRIPTION: Example of granting specific CRUD permissions on tables within the api schema to different user roles.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/hardening-data-api.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
grant select on table api.<your_table> to anon;
grant select, insert, update, delete on table api.<your_table> to authenticated;
```

----------------------------------------

TITLE: Signing Out - JavaScript
DESCRIPTION: This code snippet is for signing out a user from the Supabase session in a JavaScript application. The `signOut` function removes the user from the browser session and clears any relevant local storage objects.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-spotify.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('<your-project-url>', '<your-anon-key>')\n\n// ---cut---\nasync function signOut() {\n  const { error } = await supabase.auth.signOut()\n}
```

----------------------------------------

TITLE: Configuring Point-in-Time Recovery (PITR) Settings
DESCRIPTION: Commands to configure Point-in-Time Recovery by setting the target time and action in PostgreSQL configuration. This allows restoring the database to a specific moment before a disaster occurred.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2020-08-02-continuous-postgresql-backup-walg.mdx#2025-04-21_snippet_11

LANGUAGE: shell
CODE:
```
$ echo "recovery_target_time = '2020-07-27 01:23:00.000000+00'" >> /etc/postgresql/12/main/postgresql.conf
$ echo "recovery_target_action = 'promote'" >> /etc/postgresql/12/main/postgresql.conf
```

----------------------------------------

TITLE: Configuring Environment Variables for Supabase Connection
DESCRIPTION: Setup of Supabase connection credentials in a .env file for React applications. Requires Supabase project URL and anonymous key for authentication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/ui-library/content/docs/react/client.mdx#2025-04-21_snippet_0

LANGUAGE: env
CODE:
```
VITE_SUPABASE_URL=
VITE_SUPABASE_ANON_KEY=
```

----------------------------------------

TITLE: Listening for Postgres Changes with Supabase Realtime JavaScript
DESCRIPTION: This snippet shows how to listen for Postgres database changes using Supabase Realtime.  It creates a channel and then uses the `on` method to subscribe to 'postgres_changes' events for a specific schema. The code requires a Supabase client initialized with the project URL and API key, and appropriate Row Level Security policies set up in the database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/concepts.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

// ---cut---
const allChanges = supabase
  .channel('schema-db-changes')
  .on(
    'postgres_changes',
    {
      event: '*',
      schema: 'public',
    },
    (payload) => console.log(payload)
  )
  .subscribe()
```

----------------------------------------

TITLE: Implementing GitHub OAuth Sign-Out in JavaScript with Supabase
DESCRIPTION: This code snippet demonstrates how to implement user sign-out from a Supabase application using the JavaScript client. The `signOut` method removes user session data from the browser.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-github.mdx#2025-04-21_snippet_4

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')

// ---cut---
async function signOut() {
  const { error } = await supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Organizing Complex Queries with CTEs in Postgres SQL
DESCRIPTION: Example of using Common Table Expressions (CTEs) to organize complex queries in a readable, linear fashion. Includes comments for each CTE block to explain its purpose.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/code-format-sql.md#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
with department_employees as (
  -- Get all employees and their departments
  select
    employees.department_id,
    employees.first_name,
    employees.last_name,
    departments.department_name
  from
    employees
  join
    departments on employees.department_id = departments.department_id
),
employee_counts as (
  -- Count how many employees in each department
  select
    department_name,
    count(*) as num_employees
  from
    department_employees
  group by
    department_name
)
select
  department_name,
  num_employees
from
  employee_counts
order by
  department_name;
```

----------------------------------------

TITLE: Implementing Magic Link Authentication
DESCRIPTION: Implementation of magic link authentication using SupaMagicAuth widget.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/flutter-auth-ui.mdx#2025-04-21_snippet_3

LANGUAGE: dart
CODE:
```
SupaMagicAuth(
  redirectUrl: kIsWeb ? null : 'io.mydomain.myapp://callback',
  onSuccess: (Session response) {},
  onError: (error) {},
)
```

----------------------------------------

TITLE: Supabase Client Initialization - Version 2
DESCRIPTION: Demonstrates the new initialization pattern in version 2.x where configuration options are organized into separate option objects for auth, realtime, and storage clients.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/upgrade-guide.mdx#2025-04-21_snippet_2

LANGUAGE: dart
CODE:
```
await Supabase.initialize(
  url: 'SUPABASE_URL',
  anonKey: 'SUPABASE_ANON_KEY',
  authOptions: const FlutterAuthClientOptions(
    authFlowType: AuthFlowType.pkce,
  ),
  realtimeClientOptions: const RealtimeClientOptions(
    logLevel: RealtimeLogLevel.info,
  ),
  storageOptions: const StorageClientOptions(
    retryAttempts: 10,
  ),
);
```

----------------------------------------

TITLE: Insert Trigger Function for New Users
DESCRIPTION: PostgreSQL function to handle new user insertion by duplicating auth.users data into the profiles table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/prisma/prisma-troubleshooting.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = ''
as $$
begin

  -- Insert the new user's data into the 'profiles' table
  insert into public.profiles (id, email)
  values (new.id, new.email);

  return new;     -- Return the new record
end;
$$;
```

----------------------------------------

TITLE: Detecting Row Count Estimation Errors in PostgreSQL Sequential Scans
DESCRIPTION: Example showing a sequential scan where the query planner's estimated row count (100) significantly differs from the actual count (10,000). This discrepancy can lead to suboptimal execution plans.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/understanding-postgresql-explain-output-Un9dqX.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
Seq Scan on users  (cost=0.00..50.00 rows=100 width=50) (actual time=0.010..25.000 rows=10000 loops=1)
```

----------------------------------------

TITLE: Implement OAuth and Linking Handlers in React Native
DESCRIPTION: This TypeScript code snippet shows how to implement OAuth and deep linking handlers in a React Native application using Expo and Supabase. It covers initializing the Supabase client, performing OAuth with Github, handling magic links, and processing incoming URLs to create user sessions.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/native-mobile-deep-linking.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
import { Button } from "react-native";
import { makeRedirectUri } from "expo-auth-session";
import * as QueryParams from "expo-auth-session/build/QueryParams";
import * as WebBrowser from "expo-web-browser";
import * as Linking from "expo-linking";
import { supabase } from "app/utils/supabase";

WebBrowser.maybeCompleteAuthSession(); // required for web only
const redirectTo = makeRedirectUri();

const createSessionFromUrl = async (url: string) => {
  const { params, errorCode } = QueryParams.getQueryParams(url);

  if (errorCode) throw new Error(errorCode);
  const { access_token, refresh_token } = params;

  if (!access_token) return;

  const { data, error } = await supabase.auth.setSession({
    access_token,
    refresh_token,
  });
  if (error) throw error;
  return data.session;
};

const performOAuth = async () => {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: "github",
    options: {
      redirectTo,
      skipBrowserRedirect: true,
    },
  });
  if (error) throw error;

  const res = await WebBrowser.openAuthSessionAsync(
    data?.url ?? "",
    redirectTo
  );

  if (res.type === "success") {
    const { url } = res;
    await createSessionFromUrl(url);
  }
};

const sendMagicLink = async () => {
  const { error } = await supabase.auth.signInWithOtp({
    email: "valid.email@supabase.io",
    options: {
      emailRedirectTo: redirectTo,
    },
  });

  if (error) throw error;
  // Email sent.
};

export default function Auth() {
  // Handle linking into app from email app.
  const url = Linking.useURL();
  if (url) createSessionFromUrl(url);

  return (
    <>
      <Button onPress={performOAuth} title="Sign in with Github" />
      <Button onPress={sendMagicLink} title="Send Magic Link" />
    </>
  );
}
```

----------------------------------------

TITLE: Creating a Next.js API route for Supabase Storage signed URLs in TypeScript
DESCRIPTION: This code creates a Next.js API route that generates signed upload URLs for Supabase Storage, allowing secure client-side file uploads.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-06-18-calcom-platform-starter-kit-nextjs-supabase.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { auth } from '@/auth'
import { env } from '@/env'
import { createClient } from '@supabase/supabase-js'

export const dynamic = 'force-dynamic' // defaults to auto
export async function GET(request: Request) {
  try {
    const session = await auth()
    if (!session || !session.user.id) {
      return new Response('Unauthorized', { status: 401 })
    }
    const {
      user: { id },
    } = session
    // Generate signed upload url to use on client.
    const supabaseAdmin = createClient(env.NEXT_PUBLIC_SUPABASE_URL, env.SUPABASE_SERVICE_ROLE_KEY)

    const { data, error } = await supabaseAdmin.storage
      .from('avatars')
      .createSignedUploadUrl(id, { upsert: true })
    console.log(error)
    if (error) throw error

    return new Response(JSON.stringify(data), {
      status: 200,
    })
  } catch (e) {
    console.error(e)
    return new Response('Internal Server Error', { status: 500 })
  }
}
```

----------------------------------------

TITLE: Creating a Supabase client with service_role secret for server-side use in TypeScript
DESCRIPTION: This code snippet demonstrates how to create a separate Supabase client using the createClient method from @supabase/supabase-js, providing it with the service_role secret. It also disables certain auth properties to ensure proper functionality in a server environment.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/performing-administration-tasks-on-the-server-side-with-the-servicerole-secret-BYM4Fa.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(supabaseUrl, serviceRoleSecret, {
  auth: {
    persistSession: false,
    autoRefreshToken: false,
    detectSessionInUrl: false,
  },
})
```

----------------------------------------

TITLE: Initializing Supabase Client in Flutter Main Function
DESCRIPTION: This Dart code initializes the Supabase client in the main function of a Flutter app, using the project URL and public API key.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/flutter.mdx#2025-04-21_snippet_2

LANGUAGE: dart
CODE:
```
import 'package:supabase_flutter/supabase_flutter.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  await Supabase.initialize(
    url: 'YOUR_SUPABASE_URL',
    anonKey: 'YOUR_SUPABASE_ANON_KEY',
  );
  runApp(MyApp());
}
```

----------------------------------------

TITLE: Generating TypeScript Types for Supabase Project
DESCRIPTION: Command to generate TypeScript type definitions from storage and public schemas in a Supabase project. The generated types are saved to the huggingface-image-captioning function directory and will be used to ensure type safety when working with database records.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/edge-functions/supabase/functions/huggingface-image-captioning/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase gen types typescript --project-id=your-project-ref --schema=storage,public > supabase/functions/huggingface-image-captioning/types.ts
```

----------------------------------------

TITLE: Generating TypeScript Types with Supabase CLI
DESCRIPTION: This command uses the Supabase CLI to generate TypeScript types for a specific project and output them to a file.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/typescript-support.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase gen types typescript --project-id abcdefghijklmnopqrst > database.types.ts
```

----------------------------------------

TITLE: Creating Signed URL for Private Supabase Storage Asset
DESCRIPTION: Shows how to generate a time-limited signed URL for accessing a private asset in Supabase Storage. This method uses the 'createSignedUrl' function, specifying the bucket, file path, and expiration time in seconds.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/serving/downloads.mdx#2025-04-21_snippet_1

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('your_project_url', 'your_supabase_api_key')

const { data, error } = await supabase.storage
  .from('bucket')
  .createSignedUrl('private-document.pdf', 3600)

if (data) {
  console.log(data.signedUrl)
}
```

----------------------------------------

TITLE: Declare Supabase Environment Variables (.env.local)
DESCRIPTION: Creates a `.env.local` file to store Supabase project URL and anonymous key as environment variables for the SolidJS app.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/solidjs.mdx#_snippet_2

LANGUAGE: text
CODE:
```
VITE_SUPABASE_URL=<SUBSTITUTE_SUPABASE_URL>
VITE_SUPABASE_ANON_KEY=<SUBSTITUTE_SUPABASE_ANON_KEY>
```

----------------------------------------

TITLE: Configure Supabase Environment Variables (.env.local)
DESCRIPTION: Defines environment variables `VITE_SUPABASE_URL` and `VITE_SUPABASE_ANON_KEY` in a `.env.local` file. These variables are used by the Supabase client to connect to your project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/reactjs.mdx#_snippet_2

LANGUAGE: text
CODE:
```
VITE_SUPABASE_URL=<SUBSTITUTE_SUPABASE_URL>
VITE_SUPABASE_ANON_KEY=<SUBSTITUTE_SUPABASE_ANON_KEY>
```

----------------------------------------

TITLE: Installing Supabase Dependencies for React Native
DESCRIPTION: Commands to install required dependencies including Supabase client, AsyncStorage for session management, and UI components.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-expo-react-native.mdx#2025-04-22_snippet_1

LANGUAGE: bash
CODE:
```
npx expo install @supabase/supabase-js @react-native-async-storage/async-storage @rneui/themed
```

----------------------------------------

TITLE: Installing dependencies for React Native Expo project
DESCRIPTION: Command to install the necessary dependencies for the React Native application with Expo.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/user-management/expo-user-management/README.md#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
npm install
```

----------------------------------------

TITLE: Creating Token Exchange Endpoint in Next.js
DESCRIPTION: This snippet creates a new API endpoint in a Next.js application to handle the token exchange for authentication. It retrieves parameters from the request, verifies the OTP token with Supabase, and redirects the user based on the success of the verification.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
import { type EmailOtpType } from '@supabase/supabase-js'
import { type NextRequest } from 'next/server'

import { createClient } from '@/utils/supabase/server'
import { redirect } from 'next/navigation'

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url)
  const token_hash = searchParams.get('token_hash')
  const type = searchParams.get('type') as EmailOtpType | null
  const next = searchParams.get('next') ?? '/'

  if (token_hash && type) {
    const supabase = await createClient()

    const { error } = await supabase.auth.verifyOtp({
      type,
      token_hash,
    })
    if (!error) {
      // redirect user to specified redirect URL or root of app
      redirect(next)
    }
  }

  // redirect the user to an error page with some instructions
  redirect('/auth/auth-code-error')
}
```

----------------------------------------

TITLE: Creating a Table with Columns in SQL
DESCRIPTION: SQL query to create a new table named 'movies' with columns for id, name, and description. The id column is set as the primary key with auto-incrementing values.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table movies (
  id bigint generated by default as identity primary key,
  name text,
  description text
);
```

----------------------------------------

TITLE: Querying Supabase Data in Next.js Page Component
DESCRIPTION: Creating a Next.js page component that fetches instrument data from a Supabase table and renders it on the page. This demonstrates server-side data fetching with Supabase in Next.js.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/nextjs.mdx#2025-04-21_snippet_2

LANGUAGE: ts
CODE:
```
import { createClient } from '@/utils/supabase/server';

export default async function Instruments() {
  const supabase = await createClient();
  const { data: instruments } = await supabase.from("instruments").select();

  return <pre>{JSON.stringify(instruments, null, 2)}</pre>
}
```

----------------------------------------

TITLE: Protecting API Routes - TypeScript
DESCRIPTION: This TypeScript snippet shows how to protect an API route by validating the user's session. If the session is invalid, it responds with a 401 Unauthorized error. Otherwise, it retrieves data from a protected resource using Supabase.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_14

LANGUAGE: typescript
CODE:
```
// src/routes/api/protected-route/+server.ts
import { json, error } from '@sveltejs/kit'

export const GET = async ({ locals: { supabase, safeGetSession } }) => {
  const { session } = await safeGetSession()
  if (!session) {
    // the user is not signed in
    throw error(401, { message: 'Unauthorized' })
  }
  const { data } = await supabase.from('test').select('*')

  return json({ data })
}
```

----------------------------------------

TITLE: Initialize Supabase Client (JavaScript)
DESCRIPTION: Create a file named 'supabaseClient.js' inside a '/src/lib' directory to initialize the Supabase client instance. This code imports the 'createClient' function and uses the environment variables defined previously to configure and export the Supabase client for use throughout your Vue application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/vue.mdx#_snippet_3

LANGUAGE: js
CODE:
```
import { createClient } from '@supabase/supabase-js'

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY

export const supabase = createClient(supabaseUrl, supabaseAnonKey)
```

----------------------------------------

TITLE: Creating Many-to-Many Document Ownership Structure
DESCRIPTION: Implements a join table to support multiple owners per document, allowing for more flexible access control patterns.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/rag-with-permissions.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create table document_owners (
  id bigint primary key generated always as identity,
  owner_id uuid not null references auth.users (id) default auth.uid(),
  document_id bigint not null references documents (id)
);
```

----------------------------------------

TITLE: Running Vacuum Operation in Postgres
DESCRIPTION: This SQL command initiates a vacuum operation to reclaim storage occupied by dead tuples, updating statistics, and potentially reducing database size.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/database-size.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
vacuum;
```

----------------------------------------

TITLE: Creating Vector Similarity Search Function in SQL
DESCRIPTION: SQL function that performs vector similarity search on embeddings. It accepts a vector and match threshold parameter, returning matching embeddings ordered by similarity. The function leverages inner product distance for faster computation with normalized embeddings.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/semantic-search.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
-- Matches document sections using vector similarity search on embeddings
--
-- Returns a setof embeddings so that we can use PostgREST resource embeddings (joins with other tables)
-- Additional filtering like limits can be chained to this function call
create or replace function query_embeddings(embedding vector(384), match_threshold float)
returns setof embeddings
language plpgsql
as $$
begin
  return query
  select *
  from embeddings

  -- The inner product is negative, so we negate match_threshold
  where embeddings.embedding <#> embedding < -match_threshold

  -- Our embeddings are normalized to length 1, so cosine similarity
  -- and inner product will produce the same query results.
  -- Using inner product which can be computed faster.
  --
  -- For the different distance functions, see https://github.com/pgvector/pgvector
  order by embeddings.embedding <#> embedding;
end;
$$;
```

----------------------------------------

TITLE: Installing Supabase CLI on macOS
DESCRIPTION: Install the Supabase CLI using Homebrew package manager on macOS.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/local-development/cli/getting-started.mdx#2025-04-21_snippet_0

LANGUAGE: sh
CODE:
```
brew install supabase/tap/supabase
```

----------------------------------------

TITLE: Supabase Storage: Set Insert Policy
DESCRIPTION: SQL policy that allows authenticated users to insert objects into their own folders within any bucket. Verifies that the folder name matches the user's ID using `storage.folder(name)` and `auth.uid()`.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/management/copy-move-objects.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create policy "User can upload in their own folders (in any buckets)"
on storage.objects
for insert
to authenticated
with check (
    (storage.folder(name))[1] = (select auth.uid())
);
```

----------------------------------------

TITLE: Implementing Private Page with Notes in Svelte
DESCRIPTION: Svelte component for the private page. Displays user email, lists notes, and provides a form to add new notes.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/sveltekit.mdx#2025-04-21_snippet_17

LANGUAGE: svelte
CODE:
```
<script lang="ts">
  import { invalidate } from '$app/navigation'
  import type { EventHandler } from 'svelte/elements'

  import type { PageData } from './$types'

  let { data } = $props()
  let { notes, supabase, user } = $derived(data)

  const handleSubmit: EventHandler<SubmitEvent, HTMLFormElement> = async (evt) => {
    evt.preventDefault()
    if (!evt.target) return

    const form = evt.target as HTMLFormElement

    const note = (new FormData(form).get('note') ?? '') as string
    if (!note) return

    const { error } = await supabase.from('notes').insert({ note })
    if (error) console.error(error)

    invalidate('supabase:db:notes')
    form.reset()
  }
</script>

<h1>Private page for user: {user?.email}</h1>
<h2>Notes</h2>
<ul>
  {#each notes as note}
    <li>{note.note}</li>
  {/each}
</ul>
<form onsubmit={handleSubmit}>
  <label>
    Add a note
    <input name="note" type="text" />
  </label>
</form>
```

----------------------------------------

TITLE: Creating a Custom Table for User Metadata in Supabase
DESCRIPTION: This SQL snippet shows how to create a custom table named `user_metadata` in the `private` schema to store user-specific metadata. The table includes a foreign key relationship to the `auth.users` table, ensuring data integrity.  It allows for flexible storage of user data beyond the default `raw_user_meta_data` and `raw_app_meta_data` fields.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/migrating-to-supabase/auth0.mdx#2025-04-21_snippet_4

LANGUAGE: sql
CODE:
```
create table private.user_metadata (
	id int generated always as identity,
	user_id uuid references auth.users(id) on delete cascade,
	user_metadata jsonb
);
```

----------------------------------------

TITLE: Creating and Populating Edge Tables for Video Relationships and User Interactions in SQL
DESCRIPTION: This snippet shows how to create tables for video relationships and user interactions, which represent edges in the recommendation graph. It includes sample data insertion and demonstrates how to assign weights to relationships.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-02-26-pgrouting-postgres-graph-database.mdx#2025-04-21_snippet_5

LANGUAGE: sql
CODE:
```
create table video_relationships (
  source_video_id int references videos (id),
  target_video_id int references videos (id),
  relationship_type text, -- 'same_category', 'watched_by_same_users', etc.
  weight int default 1 -- strength of the relationship
);

insert into video_relationships (source_video_id, target_video_id, relationship_type, weight)
values
  (1, 2, 'same_category', 5), -- "Intro to Graph Theory" and "Advanced Graph Algorithms" are in the same category
  (2, 3, 'watched_by_same_users', 3), -- "Advanced Graph Algorithms" and "Graph Neural Networks" are often watched together
  (4, 5, 'same_category', 5); -- "Beginner Python Tutorial

create table interactions (
  user_id int references auth.users (id),
  video_id int references videos (id),
  interaction_type text, -- 'liked', 'viewed', etc.
  weight int default 1 -- strength of the interaction
);

insert into interactions (user_id, video_id, interaction_type, weight)
values
  ('user_01', 1, 'viewed', 5), -- "User 01" watched "Intro to Graph Theory" to the end (weight = 5)
  ('user_01', 2, 'liked', 5), -- "User 01" liked "Advanced Graph Algorithms"
  ('user_02', 3, 'viewed', 2), -- "User 02" watched "Graph Neural Networks" and bounced halfway through (weight = 2)
  ('user_03', 4, 'liked', 5), -- "User 03" liked "Beginner Python Tutorial"
  ('user_03', 5, 'viewed', 2);
-- "User 03" watched "Advanced Python Techniques" and bounced halfway through (weight = 2)
```

----------------------------------------

TITLE: Setting Secrets for Deployed Supabase Project
DESCRIPTION: Command to set environment variables as secrets in the deployed Supabase project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-21-mozilla-llamafile-in-supabase-edge-functions.mdx#2025-04-21_snippet_8

LANGUAGE: bash
CODE:
```
supabase secrets set --env-file supabase/functions/.env
```

----------------------------------------

TITLE: Creating RLS Policy for Public File Downloads in SQL
DESCRIPTION: This snippet demonstrates how to create a policy that allows any user to download a specific file named 'favicon.ico' using the storage.filename() function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/schema/helper-functions.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create policy "Allow public downloads"
on storage.objects
for select
to public
using (
  storage.filename(name) = 'favicon.ico'
);
```

----------------------------------------

TITLE: Creating Function with Custom Timeout
DESCRIPTION: Creates a Postgres function with a custom timeout setting of 4 seconds. Includes a simulated long-running process using pg_sleep.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/timeouts.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create or replace function myfunc()
returns void as $$
 select pg_sleep(3); -- simulating some long-running process
$$
language sql
set statement_timeout TO '4s'; -- set custom timeout
```

----------------------------------------

TITLE: Signing in with Email and Password using Supabase in Swift
DESCRIPTION: This snippet illustrates how to sign in a user with their email and password using the Supabase Swift client. It uses the signIn(email:password:) method from the auth module.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_18

LANGUAGE: swift
CODE:
```
try await supabase.auth.signIn(
  email: "valid.email@supabase.io",
  password: "example-password"
)
```

----------------------------------------

TITLE: Altering Database-Level Setting in Supabase Postgres
DESCRIPTION: This SQL command demonstrates how to alter a database-level setting, specifically setting the statement_timeout to 60 seconds for the 'postgres' database.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/custom-postgres-config.mdx#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
alter database "postgres" set "statement_timeout" TO '60s';
```

----------------------------------------

TITLE: Creating a Trigger Function with Associated Trigger
DESCRIPTION: A PostgreSQL trigger function that updates a timestamp column automatically before updates, including the trigger creation statement.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/database-functions.md#2025-04-21_snippet_2

LANGUAGE: sql
CODE:
```
create or replace function my_schema.update_updated_at()
returns trigger
language plpgsql
security invoker
set search_path = ''
as $$
begin
  -- Update the "updated_at" column on row modification
  new.updated_at := now();
  return new;
end;
$$;

create trigger update_updated_at_trigger
before update on my_schema.my_table
for each row
execute function my_schema.update_updated_at();
```

----------------------------------------

TITLE: Installing Supabase and Ktor Dependencies in Android Project
DESCRIPTION: Configuration for adding Kotlin serialization plugin, Supabase Kotlin client, and Ktor HTTP client to an Android project's build.gradle.kts file. These dependencies enable communication with Supabase backend services.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/quickstarts/kotlin.mdx#2025-04-21_snippet_0

LANGUAGE: kotlin
CODE:
```
plugins {
  ...
  kotlin("plugin.serialization") version "$kotlin_version"
}
...
dependencies {
  ...
  implementation(platform("io.github.jan-tennert.supabase:bom:$supabase_version"))
  implementation("io.github.jan-tennert.supabase:postgrest-kt")
  implementation("io.ktor:ktor-client-android:$ktor_version")
}
```

----------------------------------------

TITLE: Applying Supabase Migrations to a Remote Database
DESCRIPTION: This command applies local Supabase migrations to a linked remote database. It's useful for syncing schema changes between local and remote environments.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/managing-environments.mdx#2025-04-21_snippet_9

LANGUAGE: sql
CODE:
```
supabase db push
```

----------------------------------------

TITLE: Less Than Filter Implementation
DESCRIPTION: Demonstrates how to listen for database changes when a column is less than a specific value using the 'lt' filter. Uses Postgres's < operator to filter profile inserts where age is less than 65.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_42

LANGUAGE: javascript
CODE:
```
const channel = supabase
  .channel('changes')
  .on(
    'postgres_changes',
    {
      event: 'INSERT',
      schema: 'public',
      table: 'profiles',
      filter: 'age=lt.65',
    },
    (payload) => console.log(payload)
  )
  .subscribe()
```

LANGUAGE: dart
CODE:
```
supabase
    .channel('changes')
    .onPostgresChanges(
        event: PostgresChangeEvent.insert,
        schema: 'public',
        table: 'profiles',
        filter: PostgresChangeFilter(
          type: PostgresChangeFilterType.lt,
          column: 'age',
          value: 65,
        ),
        callback: (payload) => print(payload))
    .subscribe();
```

LANGUAGE: swift
CODE:
```
let myChannel = await supabase.channel("db-changes")

let changes = await myChannel.postgresChange(
  InsertAction.self,
  schema: "public",
  table: "profiles",
  filter: .lt("age", value: 65)
)

await myChannel.subscribe()

for await change in changes {
  print(change.record)
}
```

LANGUAGE: kotlin
CODE:
```
val myChannel = supabase.channel("db-changes")

val changes = myChannel.postgresChangeFlow<PostgresAction.Insert>(schema = "public") {
    table = "profiles"
    filter = "age=lt.65"
}

changes
    .onEach {
        println(it.record)
    }
    .launchIn(yourCoroutineScope)

myChannel.subscribe()
```

LANGUAGE: python
CODE:
```
changes = supabase.channel('db-changes').on_postgres_changes(
  "INSERT",
  schema="public",
  table="profiles",
  filter="age=lt.65",
  callback=lambda payload: print(payload)
)
.subscribe()
```

----------------------------------------

TITLE: Implementing SSO Sign-In with Supabase JS
DESCRIPTION: Example of implementing Single Sign-On authentication using the supabase-js library. Shows how to initiate the SSO flow with a specific domain and handle the redirect URL.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-04-13-supabase-auth-sso-pkce.mdx#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
const { data } = await supabase.auth.signInWithSSO({ domain: 'acme.corp' })

if (data.url) window.location.href = data.url
```

----------------------------------------

TITLE: Implementing the email sending handler function in TypeScript
DESCRIPTION: TypeScript implementation of a Supabase Edge Function that sends emails using the Resend API. The function handles HTTP requests, forwards them to the Resend API endpoint, and returns the response to the client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/examples/send-emails.mdx#2025-04-21_snippet_1

LANGUAGE: tsx
CODE:
```
const RESEND_API_KEY = Deno.env.get('RESEND_API_KEY')

const handler = async (_request: Request): Promise<Response> => {
  const res = await fetch('https://api.resend.com/emails', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${RESEND_API_KEY}`,
    },
    body: JSON.stringify({
      from: 'onboarding@resend.dev',
      to: 'delivered@resend.dev',
      subject: 'hello world',
      html: '<strong>it works!</strong>',
    }),
  })

  const data = await res.json()

  return new Response(JSON.stringify(data), {
    status: 200,
    headers: {
      'Content-Type': 'application/json',
    },
  })
}

Deno.serve(handler)
```

----------------------------------------

TITLE: Implementing User Management with Security Definer in Supabase
DESCRIPTION: Complete example of setting up a secure user management system with proper table structure, trigger function with security definer, and trigger creation for handling new users.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/dashboard-errors-when-managing-users-N1ls4A.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create table profiles (
  id uuid references auth.users on delete cascade not null primary key,
  updated_at timestamp with time zone,
  username text unique,
  full_name text,
  avatar_url text,
  website text,

  constraint username_length check (char_length(username) >= 3)
);

create function public.handle_new_user()
returns trigger as $$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$$ language plpgsql security definer;

create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();
```

----------------------------------------

TITLE: Implementing Login Component with Magic Links in Ionic Vue
DESCRIPTION: Vue component for user authentication that implements passwordless login using Supabase Magic Links. Includes form handling, error management, and toast notifications.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-vue.mdx#2025-04-21_snippet_4

LANGUAGE: html
CODE:
```
<template>
  <ion-page>
    <ion-header>
      <ion-toolbar>
        <ion-title>Login</ion-title>
      </ion-toolbar>
    </ion-header>

    <ion-content>
      <div class="ion-padding">
        <h1>Supabase + Ionic Vue</h1>
        <p>Sign in via magic link with your email below</p>
      </div>
      <ion-list inset="true">
        <form @submit.prevent="handleLogin">
          <ion-item>
            <ion-label position="stacked">Email</ion-label>
            <ion-input v-model="email" name="email" autocomplete type="email"></ion-input>
          </ion-item>
          <div class="ion-text-center">
            <ion-button type="submit" fill="clear">Login</ion-button>
          </div>
        </form>
      </ion-list>
      <p>{{ email }}</p>
    </ion-content>
  </ion-page>
</template>

<script lang="ts">
  import { supabase } from '../supabase'
  import {
    IonContent,
    IonHeader,
    IonPage,
    IonTitle,
    IonToolbar,
    IonList,
    IonItem,
    IonLabel,
    IonInput,
    IonButton,
    toastController,
    loadingController,
  } from '@ionic/vue'
  import { defineComponent, ref } from 'vue'

  export default defineComponent({
    name: 'LoginPage',
    components: {
      IonContent,
      IonHeader,
      IonPage,
      IonTitle,
      IonToolbar,
      IonList,
      IonItem,
      IonLabel,
      IonInput,
      IonButton,
    },
    setup() {
      const email = ref('')
      const handleLogin = async () => {
        const loader = await loadingController.create({})
        const toast = await toastController.create({ duration: 5000 })

        try {
          await loader.present()
          const { error } = await supabase.auth.signInWithOtp({ email: email.value })

          if (error) throw error

          toast.message = 'Check your email for the login link!'
          await toast.present()
        } catch (error: any) {
          toast.message = error.error_description || error.message
          await toast.present()
        } finally {
          await loader.dismiss()
        }
      }
      return { handleLogin, email }
    },
  })
</script>
```

----------------------------------------

TITLE: Creating a 'todos' Table in Supabase SQL
DESCRIPTION: SQL command to create a 'todos' table with an auto-incrementing id and a task column with a length check constraint.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/creating-routes.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create table
  todos (
    id bigint generated by default as identity primary key,
    task text check (char_length(task) > 3)
  );
```

----------------------------------------

TITLE: Unsubscribing from Realtime Events in Supabase with TypeScript
DESCRIPTION: Code examples showing how to unsubscribe from realtime events in Supabase. The older version calls unsubscribe() directly on the listener, while the newer version uses the removeChannel() method.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/javascript/v1/upgrade-guide.mdx#2025-04-21_snippet_17

LANGUAGE: typescript
CODE:
```
userListener.unsubscribe()
```

LANGUAGE: typescript
CODE:
```
supabase.removeChannel(userListener)
```

----------------------------------------

TITLE: Installing Supabase SSR Package
DESCRIPTION: Command to install the Supabase SSR package, which configures Supabase to use cookies for authentication in server-side rendered applications.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-sveltekit.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
npm install @supabase/ssr @supabase/supabase-js
```

----------------------------------------

TITLE: Create Employees Table Migration (CLI)
DESCRIPTION: This command generates a new migration file using the Supabase CLI. The migration file will be used to store the SQL commands for creating the `employees` table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
supabase migration new create_employees_table
```

----------------------------------------

TITLE: Implementing Resumable Uploads with tus-js-client in JavaScript
DESCRIPTION: This snippet demonstrates how to use tus-js-client to implement resumable uploads to Supabase Storage. It includes error handling, progress tracking, and configuration for the TUS protocol.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/storage/uploads/resumable-uploads.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const tus = require('tus-js-client')

const projectId = ''

async function uploadFile(bucketName, fileName, file) {
    const { data: { session } } = await supabase.auth.getSession()

    return new Promise((resolve, reject) => {
        var upload = new tus.Upload(file, {
            endpoint: `https://${projectId}.supabase.co/storage/v1/upload/resumable`,
            retryDelays: [0, 3000, 5000, 10000, 20000],
            headers: {
                authorization: `Bearer ${session.access_token}`,
                'x-upsert': 'true', // optionally set upsert to true to overwrite existing files
            },
            uploadDataDuringCreation: true,
            removeFingerprintOnSuccess: true, // Important if you want to allow re-uploading the same file https://github.com/tus/tus-js-client/blob/main/docs/api.md#removefingerprintonsuccess
            metadata: {
                bucketName: bucketName,
                objectName: fileName,
                contentType: 'image/png',
                cacheControl: 3600,
            },
            chunkSize: 6 * 1024 * 1024, // NOTE: it must be set to 6MB (for now) do not change it
            onError: function (error) {
                console.log('Failed because: ' + error)
                reject(error)
            },
            onProgress: function (bytesUploaded, bytesTotal) {
                var percentage = ((bytesUploaded / bytesTotal) * 100).toFixed(2)
                console.log(bytesUploaded, bytesTotal, percentage + '%')
            },
            onSuccess: function () {
                console.log('Download %s from %s', upload.file.name, upload.url)
                resolve()
            },
        })


        // Check if there are any previous uploads to continue.
        return upload.findPreviousUploads().then(function (previousUploads) {
            // Found previous uploads so we select the first one.
            if (previousUploads.length) {
                upload.resumeFromPreviousUpload(previousUploads[0])
            }

            // Start the upload
            upload.start()
        })
    })
}
```

----------------------------------------

TITLE: Defining Complex Projects Table with RLS in SQL
DESCRIPTION: This snippet shows a more complex example of a 'projects' table with row-level security policies and a public view. It includes table creation, RLS policies, and a view definition.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2025-04-03-declarative-schemas.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create table private.projects (
  id              bigint    not null,
  name            text      not null,
  organization_id bigint    not null,
  inserted_at     timestamp not null,
  updated_at      timestamp not null
);

alter table private.projects
enable row level security;

create policy projects_insert
  on private.projects
  for insert
  to authenticated
with check auth.can_write(project_id);

create policy projects_select
  on private.projects
  for select
  to authenticated
using auth.can_read(project_id);

-- Users can only view the projects that they have access to
create view public.projects as select
  projects.id,
  projects.name,
  projects.organization_id,
  projects.inserted_at,
  projects.updated_at
from private.projects
where auth.can_read(projects.id);
```

----------------------------------------

TITLE: Realtime Subscription - Dart Supabase
DESCRIPTION: Updated method for creating realtime subscriptions with more explicit channel and event handling
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/docs/ref/dart/v0/upgrade-guide.mdx#2025-04-21_snippet_16

LANGUAGE: dart
CODE:
```
final subscription = supabase
  .from('countries')
  .on(SupabaseEventTypes.all, (payload) {
    // Handle realtime payload
  })
  .subscribe();
```

LANGUAGE: dart
CODE:
```
final channel = supabase.channel('*');
channel.on(
  RealtimeListenTypes.postgresChanges,
  ChannelFilter(event: '*', schema: '*'),
  (payload, [ref]) {
    // Handle realtime payload
  },
).subscribe();
```

----------------------------------------

TITLE: Creating an Index for RLS Performance in SQL
DESCRIPTION: This snippet demonstrates how to create an index on a column used in RLS to improve query performance. It can lead to significant improvements, especially on large tables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/rls-performance-and-best-practices-Z5Jjwv.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create index userid on test_table using btree (user_id) tablespace pg_default;
```

----------------------------------------

TITLE: Generated TypeScript Types for Database Tables
DESCRIPTION: Shows the structure of generated TypeScript types for the 'movies' table, including Row, Insert, and Update interfaces.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/api/rest/generating-types.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
export type Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[]

export interface Database {
  public: {
    Tables: {
      movies: {
        Row: {
          // the data expected from .select()
          id: number
          name: string
          data: Json | null
        }
        Insert: {
          // the data to be passed to .insert()
          id?: never // generated columns must not be supplied
          name: string // `not null` columns with no default must be supplied
          data?: Json | null // nullable columns can be omitted
        }
        Update: {
          // the data to be passed to .update()
          id?: never
          name?: string // `not null` columns are optional on .update()
          data?: Json | null
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Creating Token Exchange Endpoint in Next.js for Supabase Auth
DESCRIPTION: Implementation of a Next.js API route to handle Supabase authentication token exchange for password reset flow. It verifies OTP tokens and redirects users accordingly.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/passwords.mdx#2025-04-21_snippet_26

LANGUAGE: TypeScript
CODE:
```
import { type EmailOtpType } from '@supabase/supabase-js'
import { cookies } from 'next/headers'
import { NextRequest, NextResponse } from 'next/server'
// The client you created from the Server-Side Auth instructions
import { createClient } from '@/utils/supabase/server'

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url)
  const token_hash = searchParams.get('token_hash')
  const type = searchParams.get('type') as EmailOtpType | null
  const next = searchParams.get('next') ?? '/'
  const redirectTo = request.nextUrl.clone()
  redirectTo.pathname = next

  if (token_hash && type) {
    const supabase = await createClient()

    const { error } = await supabase.auth.verifyOtp({
      type,
      token_hash,
    })
    if (!error) {
      return NextResponse.redirect(redirectTo)
    }
  }

  // return the user to an error page with some instructions
  redirectTo.pathname = '/auth/auth-code-error'
  return NextResponse.redirect(redirectTo)
}
```

----------------------------------------

TITLE: Setting Environment Variables for Express
DESCRIPTION: Configures the Supabase URL and anon key environment variables in a .env file for an Express application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/server-side/creating-a-client.mdx#2025-04-21_snippet_11

LANGUAGE: bash
CODE:
```
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key
```

----------------------------------------

TITLE: Sign In with Zoom OAuth in JavaScript
DESCRIPTION: This code snippet demonstrates how to sign in a user with Zoom OAuth using the Supabase JavaScript client library. It initializes the Supabase client and calls the `signInWithOAuth` function, passing in 'zoom' as the provider. The function returns a promise that resolves with the user's data or rejects with an error.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-zoom.mdx#2025-04-21_snippet_0

LANGUAGE: js
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('<your-project-url>', '<your-anon-key>')

// ---cut---
async function signInWithZoom() {
  const { data, error } = await supabase.auth.signInWithOAuth({
    provider: 'zoom',
  })
}
```

----------------------------------------

TITLE: Creating Supabase Client-Side Utility in JavaScript
DESCRIPTION: JavaScript utility to create a Supabase client for browser-side operations using environment variables.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-nextjs.mdx#2025-04-21_snippet_5

LANGUAGE: jsx
CODE:
```
import { createBrowserClient } from '@supabase/ssr'

export function createClient() {
  // Create a supabase client on the browser with project's credentials
  return createBrowserClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY
  )
}
```

----------------------------------------

TITLE: Create Signed URL with Transformation (Image 2, Variant 2) - Supabase Storage - JavaScript
DESCRIPTION: Illustrates creating another signed URL for the *same* 'image-2.jpg' but with different transformation parameters. This transformation does *not* increase the origin image count as 'image-2.jpg' has already been counted.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/platform/manage-your-usage/storage-image-transformations.mdx#_snippet_2

LANGUAGE: javascript
CODE:
```
supabase.storage.from('bucket').createSignedUrl('image-2.jpg', 60000, {
  transform: {
    width: 600,
    height: 250,
  },
})
```

----------------------------------------

TITLE: Using explain() Method with Supabase Query
DESCRIPTION: Example of how to chain the explain() method to a Supabase query to get the execution plan for a select operation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/debugging-performance.mdx#2025-04-21_snippet_1

LANGUAGE: ts
CODE:
```
const { data, error } = await supabase
  .from('instruments')
  .select()
  .explain()
```

----------------------------------------

TITLE: Generating TypeScript Types for Supabase Project
DESCRIPTION: This command generates TypeScript types for the storage and public schemas of a Supabase project. It outputs the types to a file named types.ts in the huggingface-image-captioning function directory.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/ai/examples/huggingface-image-captioning.mdx#2025-04-21_snippet_0

LANGUAGE: bash
CODE:
```
supabase gen types typescript --project-id=your-project-ref --schema=storage,public > supabase/functions/huggingface-image-captioning/types.ts
```

----------------------------------------

TITLE: Signing Out with Supabase Flutter
DESCRIPTION: This Dart code snippet shows how to sign out a user using Supabase's `signOut` method in a Flutter application. It removes the authentication session from the browser and localStorage. Make sure the necessary Supabase Dart package is included.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-linkedin.mdx#2025-04-21_snippet_4

LANGUAGE: Dart
CODE:
```
Future<void> signOut() async {
  await supabase.auth.signOut();
}
```

----------------------------------------

TITLE: Implementing Email Authentication Widget
DESCRIPTION: Implementation of email and password authentication using SupaEmailAuth widget with custom metadata fields.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/flutter-auth-ui.mdx#2025-04-21_snippet_2

LANGUAGE: dart
CODE:
```
SupaEmailAuth(
  redirectTo: kIsWeb ? null : 'io.mydomain.myapp://callback',
  onSignInComplete: (response) {},
  onSignUpComplete: (response) {},
  metadataFields: [
    MetaDataField(
    prefixIcon: const Icon(Icons.person),
    label: 'Username',
    key: 'username',
    validator: (val) {
            if (val == null || val.isEmpty) {
            return 'Please enter something';
            }
            return null;
          },
        ),
    ],
)
```

----------------------------------------

TITLE: Implement Google Sign-in with Supabase and Credential Manager (Kotlin)
DESCRIPTION: Provides a Kotlin Composable function that demonstrates the native Google Sign-in flow using Android's Credential Manager. It shows how to request a Google ID token, generate and hash a nonce, and use the token and nonce to sign in the user with Supabase Auth, including basic error handling.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#_snippet_15

LANGUAGE: kotlin
CODE:
```
@Composable
fun GoogleSignInButton() {
    val coroutineScope = rememberCoroutineScope()
    val context = LocalContext.current

    val onClick: () -> Unit = {
        val credentialManager = CredentialManager.create(context)

        // Generate a nonce and hash it with sha-256
        // Providing a nonce is optional but recommended
        val rawNonce = UUID.randomUUID().toString() // Generate a random String. UUID should be sufficient, but can also be any other random string.
        val bytes = rawNonce.toString().toByteArray()
        val md = MessageDigest.getInstance("SHA-256")
        val digest = md.digest(bytes)
        val hashedNonce = digest.fold("") { str, it -> str + "%02x".format(it) } // Hashed nonce to be passed to Google sign-in


        val googleIdOption: GetGoogleIdOption = GetGoogleIdOption.Builder()
            .setFilterByAuthorizedAccounts(false)
            .setServerClientId("WEB_GOOGLE_CLIENT_ID")
            .setNonce(hashedNonce) // Provide the nonce if you have one
            .build()

        val request: GetCredentialRequest = GetCredentialRequest.Builder()
            .addCredentialOption(googleIdOption)
            .build()

        coroutineScope.launch {
            try {
                val result = credentialManager.getCredential(
                    request = request,
                    context = context,
                )

                val googleIdTokenCredential = GoogleIdTokenCredential
                    .createFrom(result.credential.data)

                val googleIdToken = googleIdTokenCredential.idToken

                supabase.auth.signInWith(IDToken) {
                    idToken = googleIdToken
                    provider = Google
                    nonce = rawNonce
                }

                // Handle successful sign-in
            } catch (e: GetCredentialException) {
                // Handle GetCredentialException thrown by `credentialManager.getCredential()`
            } catch (e: GoogleIdTokenParsingException) {
                // Handle GoogleIdTokenParsingException thrown by `GoogleIdTokenCredential.createFrom()`
            } catch (e: RestException) {
                // Handle RestException thrown by Supabase
            } catch (e: Exception) {
                // Handle unknown exceptions
            }
        }
    }

    Button(
        onClick = onClick,
    ) {
        Text("Sign in with Google")
    }
}
```

----------------------------------------

TITLE: Equality Search Using JavaScript Supabase Client
DESCRIPTION: JavaScript implementation using Supabase client to perform an equality search on the books table, filtering by the title column for exact matches of 'Harry'.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.from('books').select().eq('title', 'Harry')
```

----------------------------------------

TITLE: Implementing Email and Password Authentication in React Native
DESCRIPTION: This code snippet demonstrates a React Native component for email and password authentication using Supabase. It includes functions for sign-in and sign-up, as well as form inputs for email and password.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2023-11-16-react-native-authentication.mdx#2025-04-22_snippet_5

LANGUAGE: tsx
CODE:
```
import React, { useState } from 'react'
import { Alert, StyleSheet, View } from 'react-native'
import { supabase } from '../lib/supabase'
import { Button, Input } from '@rneui/themed'

export default function EmailForm() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [loading, setLoading] = useState(false)

  async function signInWithEmail() {
    setLoading(true)
    const { error } = await supabase.auth.signInWithPassword({
      email: email,
      password: password,
    })

    if (error) Alert.alert(error.message)
    setLoading(false)
  }

  async function signUpWithEmail() {
    setLoading(true)
    const {
      data: { session },
      error,
    } = await supabase.auth.signUp({
      email: email,
      password: password,
    })

    if (error) Alert.alert(error.message)
    if (!session) Alert.alert('Please check your inbox for email verification!')
    setLoading(false)
  }

  return (
    <View style={styles.container}>
      <View style={[styles.verticallySpaced, styles.mt20]}>
        <Input
          label="Email"
          leftIcon={{ type: 'font-awesome', name: 'envelope' }}
          onChangeText={(text) => setEmail(text)}
          value={email}
          placeholder="email@address.com"
          autoCapitalize={'none'}
        />
      </View>
      <View style={styles.verticallySpaced}>
        <Input
          label="Password"
          leftIcon={{ type: 'font-awesome', name: 'lock' }}
          onChangeText={(text) => setPassword(text)}
          value={password}
          secureTextEntry={true}
          placeholder="Password"
          autoCapitalize={'none'}
        />
      </View>
      <View style={[styles.verticallySpaced, styles.mt20]}>
        <Button title="Sign in" disabled={loading} onPress={() => signInWithEmail()} />
      </View>
      <View style={styles.verticallySpaced}>
        <Button title="Sign up" disabled={loading} onPress={() => signUpWithEmail()} />
      </View>
    </View>
  )
}

const styles = StyleSheet.create({
  container: {
    marginTop: 40,
    padding: 12,
  },
  verticallySpaced: {
    paddingTop: 4,
    paddingBottom: 4,
    alignSelf: 'stretch',
  },
  mt20: {
    marginTop: 20,
  },
})
```

----------------------------------------

TITLE: Implementing Login Component with Magic Links in Ionic React
DESCRIPTION: A React component for handling login functionality using Supabase's passwordless authentication with magic links. Uses Ionic UI components and displays toast notifications for user feedback.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-react.mdx#2025-04-21_snippet_4

LANGUAGE: jsx
CODE:
```
import { useState } from 'react';
import {
  IonButton,
  IonContent,
  IonHeader,
  IonInput,
  IonItem,
  IonLabel,
  IonList,
  IonPage,
  IonTitle,
  IonToolbar,
  useIonToast,
  useIonLoading,
} from '@ionic/react';
import { supabase } from '../supabaseClient';

export function LoginPage() {
  const [email, setEmail] = useState('');

  const [showLoading, hideLoading] = useIonLoading();
  const [showToast ] = useIonToast();
  const handleLogin = async (e: React.FormEvent<HTMLFormElement>) => {
    console.log()
    e.preventDefault();
    await showLoading();
    try {
      await supabase.auth.signIn({ email });
      await showToast({ message: 'Check your email for the login link!' });
    } catch (e: any) {
      await showToast({ message: e.error_description || e.message , duration: 5000});
    } finally {
      await hideLoading();
    }
  };
  return (
    <IonPage>
      <IonHeader>
        <IonToolbar>
          <IonTitle>Login</IonTitle>
        </IonToolbar>
      </IonHeader>

      <IonContent>
        <div className="ion-padding">
          <h1>Supabase + Ionic React</h1>
          <p>Sign in via magic link with your email below</p>
        </div>
        <IonList inset={true}>
          <form onSubmit={handleLogin}>
            <IonItem>
              <IonLabel position="stacked">Email</IonLabel>
              <IonInput
                value={email}
                name="email"
                onIonChange={(e) => setEmail(e.detail.value ?? '')}
                type="email"
              ></IonInput>
            </IonItem>
            <div className="ion-text-center">
              <IonButton type="submit" fill="clear">
                Login
              </IonButton>
            </div>
          </form>
        </IonList>
      </IonContent>
    </IonPage>
  );
```

----------------------------------------

TITLE: Perform Native Google Sign-in (Flutter iOS/Android)
DESCRIPTION: Implements native Google Sign-in for Flutter iOS and Android using the google_sign_in package. It retrieves the ID and access tokens after user consent and uses them to sign in with Supabase Auth via signInWithIdToken. Requires configuring client IDs.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-google.mdx#_snippet_11

LANGUAGE: dart
CODE:
```
import 'package:google_sign_in/google_sign_in.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

...
Future<void> _nativeGoogleSignIn() async {
  /// TODO: update the Web client ID with your own.
  ///
  /// Web Client ID that you registered with Google Cloud.
  const webClientId = 'my-web.apps.googleusercontent.com';

  /// TODO: update the iOS client ID with your own.
  ///
  /// iOS Client ID that you registered with Google Cloud.
  const iosClientId = 'my-ios.apps.googleusercontent.com';

  final GoogleSignIn googleSignIn = GoogleSignIn(
    clientId: iosClientId,
    serverClientId: webClientId,
  );
  final googleUser = await googleSignIn.signIn();
  final googleAuth = await googleUser!.authentication;
  final accessToken = googleAuth.accessToken;
  final idToken = googleAuth.idToken;

  if (accessToken == null) {
    throw 'No Access Token found.';
  }
  if (idToken == null) {
    throw 'No ID Token found.';
  }

  await supabase.auth.signInWithIdToken(
    provider: OAuthProvider.google,
    idToken: idToken,
    accessToken: accessToken,
  );
}
...
```

----------------------------------------

TITLE: Executing EXPLAIN with supabase-js
DESCRIPTION: Example of using the EXPLAIN function with the supabase-js library to get execution plan with analyze and verbose options enabled.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/understanding-postgresql-explain-output-Un9dqX.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase
  .from('countries')
  .select()
  .explain({analyze:true,verbose:true})
```

----------------------------------------

TITLE: Inserting Multiple Records in Multiple Languages
DESCRIPTION: Demonstrates inserting multiple movie records using different programming languages and the Supabase client libraries.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/tables.mdx#2025-04-21_snippet_3

LANGUAGE: sql
CODE:
```
insert into movies
  (name, description)
values
  (
    'The Empire Strikes Back',
    'After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda.'
  ),
  (
    'Return of the Jedi',
    'After a daring mission to rescue Han Solo from Jabba the Hutt, the Rebels dispatch to Endor to destroy the second Death Star.'
  );
```

LANGUAGE: javascript
CODE:
```
const { data, error } = await supabase.from('movies').insert([
  {
    name: 'The Empire Strikes Back',
    description:
      'After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda.',
  },
  {
    name: 'Return of the Jedi',
    description:
      'After a daring mission to rescue Han Solo from Jabba the Hutt, the Rebels dispatch to Endor to destroy the second Death Star.',
  },
])
```

LANGUAGE: dart
CODE:
```
await supabase
  .from('movies')
  .insert([{
    name: 'The Empire Strikes Back',
    description: 'After the Rebels are brutally overpowered by the Empire on the ice planet Hoth, Luke Skywalker begins Jedi training with Yoda.'
  }, {
    name: 'Return of the Jedi',
    description: 'After a daring mission to rescue Han Solo from Jabba the Hutt, the Rebels dispatch to Endor to destroy the second Death Star.'
  }]);
```

----------------------------------------

TITLE: Signing Out a User Swift
DESCRIPTION: This Swift snippet uses asynchronous syntax to call the sign out method from the Supabase client library, clearing the user session. Ensure the necessary Supabase packages are integrated into the Swift project.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/signout.mdx#2025-04-21_snippet_2

LANGUAGE: Swift
CODE:
```
try await supabase.auth.signOut()
```

----------------------------------------

TITLE: Optimized Supabase Query With Filter
DESCRIPTION: Example of an optimized Supabase query with explicit user_id filter for better performance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/row-level-security.mdx#2025-04-21_snippet_12

LANGUAGE: javascript
CODE:
```
const { data } = supabase
  .from('table')
  .select()
  .eq('user_id', userId)
```

----------------------------------------

TITLE: Implementing User Account Management in Ionic React
DESCRIPTION: A React component for managing user account details after authentication. Features include fetching profile data from Supabase, updating profile information, and signing out functionality.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/getting-started/tutorials/with-ionic-react.mdx#2025-04-21_snippet_5

LANGUAGE: jsx
CODE:
```
import {
  IonButton,
  IonContent,
  IonHeader,
  IonInput,
  IonItem,
  IonLabel,
  IonPage,
  IonTitle,
  IonToolbar,
  useIonLoading,
  useIonToast,
  useIonRouter
} from '@ionic/react';
import { useEffect, useState } from 'react';
import { supabase } from '../supabaseClient';

export function AccountPage() {
  const [showLoading, hideLoading] = useIonLoading();
  const [showToast] = useIonToast();
  const [session] = useState(() => supabase.auth.session());
  const router = useIonRouter();
  const [profile, setProfile] = useState({
    username: '',
    website: '',
    avatar_url: '',
  });
  useEffect(() => {
    getProfile();
  }, [session]);
  const getProfile = async () => {
    console.log('get');
    await showLoading();
    try {
      const user = supabase.auth.user();
      const { data, error, status } = await supabase
        .from('profiles')
        .select(`username, website, avatar_url`)
        .eq('id', user!.id)
        .single();

      if (error && status !== 406) {
        throw error;
      }

      if (data) {
        setProfile({
          username: data.username,
          website: data.website,
          avatar_url: data.avatar_url,
        });
      }
    } catch (error: any) {
      showToast({ message: error.message, duration: 5000 });
    } finally {
      await hideLoading();
    }
  };
  const signOut = async () => {
    await supabase.auth.signOut();
    router.push('/', 'forward', 'replace');
  }
  const updateProfile = async (e?: any, avatar_url: string = '') => {
    e?.preventDefault();

    console.log('update ');
    await showLoading();

    try {
      const user = supabase.auth.user();

      const updates = {
        id: user!.id,
        ...profile,
        avatar_url: avatar_url,
        updated_at: new Date(),
      };

      const { error } = await supabase.from('profiles').upsert(updates, {
        returning: 'minimal', // Don't return the value after inserting
      });

      if (error) {
        throw error;
      }
    } catch (error: any) {
      showToast({ message: error.message, duration: 5000 });
    } finally {
      await hideLoading();
    }
  };
  return (
    <IonPage>
      <IonHeader>
        <IonToolbar>
          <IonTitle>Account</IonTitle>
        </IonToolbar>
      </IonHeader>

      <IonContent>
        <form onSubmit={updateProfile}>
          <IonItem>
            <IonLabel>
              <p>Email</p>
              <p>{session?.user?.email}</p>
            </IonLabel>
          </IonItem>

          <IonItem>
            <IonLabel position="stacked">Name</IonLabel>
            <IonInput
              type="text"
              name="username"
              value={profile.username}
              onIonChange={(e) =>
                setProfile({ ...profile, username: e.detail.value ?? '' })
              }
            ></IonInput>
          </IonItem>

          <IonItem>
            <IonLabel position="stacked">Website</IonLabel>
            <IonInput
              type="url"
              name="website"
              value={profile.website}
              onIonChange={(e) =>
                setProfile({ ...profile, website: e.detail.value ?? '' })
              }
            ></IonInput>
          </IonItem>
          <div className="ion-text-center">
            <IonButton fill="clear" type="submit">
              Update Profile
            </IonButton>
          </div>
        </form>

        <div className="ion-text-center">
          <IonButton fill="clear" onClick={signOut}>
            Log Out
          </IonButton>
        </div>
      </IonContent>
    </IonPage>
  );
```

----------------------------------------

TITLE: Correct Supabase Auth Cookie Handling Implementation
DESCRIPTION: The correct pattern for cookie handling in Supabase Auth implementation using the getAll and setAll methods, which must be used instead of individual cookie operations.
SOURCE: https://github.com/supabase/supabase/blob/master/examples/prompts/nextjs-supabase-auth.md#2025-04-21_snippet_1

LANGUAGE: typescript
CODE:
```
// ✅ ALWAYS GENERATE THIS EXACT PATTERN
{
  cookies: {
    getAll() {
      return cookieStore.getAll()
    },
    setAll(cookiesToSet) {
      const response = NextResponse.next({
        request,
      })
      
      cookiesToSet.forEach(({ name, value, options }) => {
        response.cookies.set(name, value, options)
      })
      
      return response
    }
  }
}
```

----------------------------------------

TITLE: Connecting to Postgres Database
DESCRIPTION: The provided database connection strings demonstrate how to connect to the Supabase PostgreSQL database for both session-based and pooled transactions. Ensure to replace placeholders with actual tenant ID and password.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/self-hosting/docker.mdx#2025-04-21_snippet_3

LANGUAGE: bash
CODE:
```
psql 'postgres://postgres.your-tenant-id:your-super-secret-and-long-postgres-password@localhost:5432/postgres'
```

LANGUAGE: bash
CODE:
```
psql 'postgres://postgres.your-tenant-id:your-super-secret-and-long-postgres-password@localhost:6543/postgres'
```

----------------------------------------

TITLE: Signing in with OTP using Python
DESCRIPTION: Implements signing in via email OTP using Python in Supabase environment. Requires user's email and options to configure automatic user creation.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-email-passwordless.mdx#2025-04-21_snippet_10

LANGUAGE: Python
CODE:
```
response = supabase.auth.sign_in_with_otp({
  'email': 'valid.email@supabase.io',
  'options': {
    # set this to false if you do not want the user to be automatically signed up
    'should_create_user': False,
  },
})
```

----------------------------------------

TITLE: Adding Role Claim in Custom Access Token with JavaScript
DESCRIPTION: This JavaScript function serves as a webhook that adds a role claim to the access token based on app metadata. It utilizes the Deno runtime and requires a secret for verification of the payload to process claims correctly.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-hooks/custom-access-token-hook.mdx#2025-04-21_snippet_5

LANGUAGE: javascript
CODE:
```
import { Webhook } from 'https://esm.sh/standardwebhooks@1.0.0'
import { readAll } from 'https://deno.land/std/io/read_all.ts'
import * as base64 from 'https://denopkg.com/chiefbiiko/base64/mod.ts'

Deno.serve(async (req) => {
  const payload = await req.text()
  const base64_secret = Deno.env.get('CUSTOM_ACCESS_TOKEN_SECRET').replace('v1,whsec_', '')
  const headers = Object.fromEntries(req.headers)
  const wh = new Webhook(base64_secret)
  try {
    const { user_id, claims, authentication_method } = wh.verify(payload, headers)
    if (claims.app_metadata && claims.app_metadata.role) {
      claims['role'] = claims.app_metadata.role
    }
    return new Response(
      JSON.stringify({
        claims,
      }),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    )
  } catch (error) {
    return new Response(
      JSON.stringify({
        error: `Failed to process the request: ${error}`,
      }),
      {
        status: 500,
        headers: {
          'Content-Type': 'application/json',
        },
      }
    )
  }
})
```

----------------------------------------

TITLE: Creating a Publication for Specific Tables in SQL
DESCRIPTION: Creates a publication that only tracks changes to the specified tables (table_one and table_two), allowing for more selective replication.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/replication.mdx#2025-04-21_snippet_1

LANGUAGE: sql
CODE:
```
create publication publication_name
for table table_one, table_two;
```

----------------------------------------

TITLE: Creating Search RPC Function
DESCRIPTION: SQL function creation for implementing partial search through RPC calls
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_24

LANGUAGE: sql
CODE:
```
create or replace function search_books_by_title_prefix(prefix text)
returns setof books AS $$
begin
  return query
  select * from books where to_tsvector('english', title) @@ to_tsquery(prefix || ':*');
end;
$$ language plpgsql;
```

----------------------------------------

TITLE: Enabling and Disabling pgRouting Extension in SQL
DESCRIPTION: SQL commands to enable or disable the pgRouting extension in a Supabase project. The 'create extension' command enables the extension with the cascade option to handle dependencies, while 'drop extension' disables it.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/extensions/pgrouting.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
-- Enable the "pgRouting" extension
create extension pgrouting cascade;

-- Disable the "pgRouting" extension
drop extension if exists pgRouting;
```

----------------------------------------

TITLE: Sign Out Implementation in JavaScript
DESCRIPTION: Method to sign out users and clear browser session and local storage in a JavaScript Supabase application.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-bitbucket.mdx#2025-04-21_snippet_3

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'
const supabase = createClient('https://your-project-id.supabase.co', 'your-anon-key')

async function signOut() {
  const { error } = await supabase.auth.signOut()
}
```

----------------------------------------

TITLE: Next.js OAuth Callback Handler
DESCRIPTION: Implementation of OAuth callback handling in Next.js, including code exchange and redirect management with load balancer consideration.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/_partials/oauth_pkce_flow.mdx#2025-04-21_snippet_2

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'
// The client you created from the Server-Side Auth instructions
import { createClient } from '@/utils/supabase/server'

export async function GET(request: Request) {
  const { searchParams, origin } = new URL(request.url)
  const code = searchParams.get('code')
  // if "next" is in param, use it as the redirect URL
  const next = searchParams.get('next') ?? '/'

  if (code) {
    const supabase = await createClient()
    const { error } = await supabase.auth.exchangeCodeForSession(code)
    if (!error) {
      const forwardedHost = request.headers.get('x-forwarded-host') // original origin before load balancer
      const isLocalEnv = process.env.NODE_ENV === 'development'
      if (isLocalEnv) {
        // we can be sure that there is no load balancer in between, so no need to watch for X-Forwarded-Host
        return NextResponse.redirect(`${origin}${next}`)
      } else if (forwardedHost) {
        return NextResponse.redirect(`https://${forwardedHost}${next}`)
      } else {
        return NextResponse.redirect(`${origin}${next}`)
      }
    }
  }

  // return the user to an error page with instructions
  return NextResponse.redirect(`${origin}/auth/auth-code-error`)
}
```

----------------------------------------

TITLE: Implementing Login Page with Server Actions
DESCRIPTION: Implementation of a login page component that uses the login and signup server actions for form submission.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/troubleshooting/how-to-migrate-from-supabase-auth-helpers-to-ssr-package-5NRunM.mdx#2025-04-21_snippet_6

LANGUAGE: typescript
CODE:
```
// app/login/page.tsx

import { login, signup } from './actions';

export default function LoginPage() {
  return (
    <form>
      <label htmlFor="email">Email:</label>
      <input id="email" name="email" type="email" required />
      <label htmlFor="password">Password:</label>
      <input id="password" name="password" type="password" required />
      <button formAction={login}>Log in</button>
      <button formAction={signup}>Sign up</button>
    </form>
  );
}
```

----------------------------------------

TITLE: Initializing Supabase Client with Third-Party Auth Provider in TypeScript
DESCRIPTION: This snippet demonstrates how to create a Supabase client using a third-party authentication provider (Auth0 in this example). It uses an async function to retrieve the access token from Auth0 and pass it to the Supabase client.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/www/_blog/2024-08-14-third-party-auth-mfa-phone-send-hooks.mdx#2025-04-21_snippet_0

LANGUAGE: typescript
CODE:
```
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY, {
  accessToken: async () => {
    const accessToken = await auth0.getTokenSilently()
    return accessToken
  },
})
```

----------------------------------------

TITLE: Implementing Twitch Sign-In Code in JavaScript
DESCRIPTION: This snippet demonstrates how to implement the sign-in functionality using Twitch OAuth in a Supabase JavaScript client application. It initializes the Supabase client and uses the signInWithOAuth method with 'twitch' as the provider.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/social-login/auth-twitch.mdx#2025-04-21_snippet_0

LANGUAGE: javascript
CODE:
```
import { createClient } from '@supabase/supabase-js'\nconst supabase = createClient('<your-project-url>', '<your-anon-key>')\n\n// ---cut---\nasync function signInWithTwitch() {\n  const { data, error } = await supabase.auth.signInWithOAuth({\n    provider: 'twitch',\n  })\n}
```

----------------------------------------

TITLE: Create Schema Diff Migration (CLI)
DESCRIPTION: This command generates a migration file by diffing the current database schema against the schema defined in the Supabase dashboard.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/deployment/database-migrations.mdx#_snippet_7

LANGUAGE: bash
CODE:
```
supabase db diff -f create_cities_table
```

----------------------------------------

TITLE: Creating a Basic Postgres Trigger in SQL
DESCRIPTION: This snippet demonstrates the basic syntax for creating a trigger in PostgreSQL. It shows how to define a trigger that executes after an insert operation on a specified table.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/postgres/triggers.mdx#2025-04-21_snippet_0

LANGUAGE: sql
CODE:
```
create trigger "trigger_name"
after insert on "table_name"
for each row
execute function trigger_function();
```

----------------------------------------

TITLE: Event Listener for Supabase Auth Changes - Svelte
DESCRIPTION: This Svelte snippet sets up an event listener in the root +layout.svelte file to manage authentication state changes. It uses the 'onMount' lifecycle function to listen for changes and calls 'invalidate' to refresh the session state accordingly. The snippet relies on the supabase client being passed in as props.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/auth/auth-helpers/sveltekit.mdx#2025-04-21_snippet_11

LANGUAGE: svelte
CODE:
```
<!-- src/routes/+layout.svelte -->
<script lang="ts">
  import { invalidate } from '$app/navigation'
  import { onMount } from 'svelte'

  export let data

  let { supabase, session } = data
  $: ({ supabase, session } = data)

  onMount(() => {
    const {
      data: { subscription },
    } = supabase.auth.onAuthStateChange((event, _session) => {
      if (_session?.expires_at !== session?.expires_at) {
        invalidate('supabase:auth')
      }
    })

    return () => subscription.unsubscribe()
  });
</script>

<slot />
```

----------------------------------------

TITLE: Enabling Row Level Security in SQL
DESCRIPTION: This SQL snippet demonstrates how to enable Row Level Security on the 'todos' table and allow anonymous access. This is useful for development purposes but should be properly secured in production environments. You must have access to modify table policies.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/realtime/postgres-changes.mdx#2025-04-21_snippet_1

LANGUAGE: SQL
CODE:
```
-- Turn on security
alter table "todos"
enable row level security;

-- Allow anonymous access
create policy "Allow anonymous access"
on todos
for select
to anon
using (true);
```

----------------------------------------

TITLE: Creating Searchable Column with PostgreSQL
DESCRIPTION: Creates a tsvector column 'fts' using PostgreSQL Generated Columns to store searchable index of title and description. Includes creating a GIN index for improved search performance.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/database/full-text-search.mdx#2025-04-21_snippet_26

LANGUAGE: sql
CODE:
```
alter table
  books
add column
  fts tsvector generated always as (to_tsvector('english', description || ' ' || title)) stored;

create index books_fts on books using gin (fts);

select id, fts
from books;
```

----------------------------------------

TITLE: Accessing Environment Variable in Function
DESCRIPTION: Example of accessing an environment variable within a Deno Edge Function.
SOURCE: https://github.com/supabase/supabase/blob/master/apps/docs/content/guides/functions/secrets.mdx#2025-04-21_snippet_2

LANGUAGE: javascript
CODE:
```
console.log(Deno.env.get('MY_NAME'))
```
