dmFyaWFibGUgInN1cGFiYXNlX3BhdCIgewogIHR5cGUgICAgICAgICA9IHN0cmluZwogIGRlc2NyaXB0aW9uID0gIlN1cGFiYXNlIFBlcnNvbmFsIEFjY2VzcyBUb2tlbiIKICBzZW5zaXRpdmUgICA9IHRydWUKfQoKdmFyaWFibGUgInN1cGFiYXNlX29yZ19pZCIgewogIHR5cGUgICAgICAgICA9IHN0cmluZwogIGRlc2NyaXB0aW9uID0gIlN1cGFiYXNlIE9yZ2FuaXphdGlvbiBJRCIKfQoKdmFyaWFibGUgInByb2plY3RfbmFtZSIgewogIHR5cGUgICAgICAgICA9IHN0cmluZwogIGRlc2NyaXB0aW9uID0gIk5hbWUgb2YgdGhlIFN1cGFiYXNlIHByb2plY3QiCiAgZGVmYXVsdCAgICAgID0gImluc3RhYmlkcy1wcm9qZWN0Igp9Cgp2YXJpYWJsZSAiZGJf
cGFzc3dvcmQiIHsKICB0eXBlICAgICAgICAgPSBzdHJpbmcKICBkZXNjcmlwdGlvbiA9ICJQYXNzd29yZCBmb3Ig
dGhlIFN1cGFiYXNlIGRhdGFiYXNlIgogIHNlbnNpdGl2ZSAgICA9IHRydWUKfQoKdmFyaWFibGUgImltYWdlX3Rh
ZyIgewogIHR5cGUgICAgICAgICA9IHN0cmluZwogIGRlc2NyaXB0aW9uID0gIkRvY2tlciBpbWFnZSB0YWcgZm9y
IHRoZSBDbG91ZCBSdW4gZGVwbG95bWVudCIsCiAgZGVmYXVsdCAgICAgID0gImxhdGVzdCIKfQoKdmFyaWFibGUg
InJlZ2lvbiIgewogIHR5cGUgICAgICAgICA9IHN0cmluZwogIGRlc2NyaXB0aW9uID0gIkdvb2dsZSBDbG91ZCBy
ZWdpb24gdG8gZGVwbG95IENsb3VkIFJ1biIKICBkZWZhdWx0ICAgICAgPSAidXMtY2VudHJhbDEiCn0KCiMgQWRk
IG90aGVyIHZhcmlhYmxlcyBhcyBuZWVkZWQsIHN1Y2ggYXMKdmFyaWFibGUgImdjcF9wcm9qZWN0X2lkIiB7CiAg
dHlwZSAgICAgICAgID0gc3RyaW5nCiAgZGVzY3JpcHRpb24gPSAiR29vZ2xlIENsb3VkIFByb2plY3QgSUQiCn0K
CiMgQWRkIG91dHB1dHMgdG8gZXhwb3NlIHZhbHVlcyBmcm9tIHRoZSBtb2R1bGVzLCBlZy4gQ2xvdWQgUnVuIFVS
TAppCn0K